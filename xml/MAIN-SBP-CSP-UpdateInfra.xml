<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>

<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-sbp-csp-update-infra"
	xml:lang="en">

	<info>
		<title>SUSE Update Infrastructure Setup Guide for Cloud Service Providers</title>
		<!--  <orgname>SUSE Best Practices</orgname>-->
		<productname>SUSE Linux Enterprise Server, SUSE Cloud, Repository Mirroring Tool,
			Subscription Management Tool</productname>
		<!-- <productnumber>15 SP1</productnumber>-->

		<author>
			<personname>
				<firstname>Jona</firstname>
				<surname>Apelbaum, CSP Cloud Architect, SUSE</surname>
			</personname>
			<!--   <affiliation>-->
			<!--    <jobtitle>Public Cloud Architect</jobtitle>-->
			<!--    <orgname>&suse;</orgname>-->
			<!--   </affiliation>-->
		</author>

		<author>
			<personname>
				<firstname>Mike</firstname>
				<surname>Friesenegger, Solution Architect, SUSE</surname>
			</personname>
			<!--   <affiliation>-->
			<!--    <jobtitle>Solution Architect</jobtitle>-->
			<!--    <orgname>&suse;</orgname>-->
			<!--   </affiliation>-->
		</author>

		<date>October 20, 2020</date>

		<abstract>
			<para>This guide describes the setup of the required infrastructure for a SUSE cloud in
				generic terms that scales from small to large cloud installations. The guide is an
				optional, but highly recommended element of a Cloud Service Provider's (CSPs)
				infrastructure. It allows for central license and repository management.</para>
		</abstract>

	</info>

	<sect1 xml:id="sec-intro">
		<title>Introduction</title>

		<para>The use of cloud resources is one of the fastest growing areas of the IT industry. In
			many cases, Infrastructure as a Service (IaaS) is a leading use case of public clouds.
			The public cloud brings with it a <quote>start and use</quote> expectation. This poses a
			challenge for an Enterprise Linux distribution such as &sle; to provide access to
			the update repositories without formal registration of the operating system (OS)
			installation.</para>
		<para>In a traditional data center a &suse; customer will set up a new machine (physical
			or virtual) and configure the system to connect to a local Repository Mirroring Tool
			(RMT), be managed by &suse; Manager, or connect to the &scc; (SCC).</para>
		<para>Generating registration entitlements for every instance for use with SCC and providing
			these to the user would not meet the <quote>fire up and use</quote> expectation. </para>
		<para>The RMT for SUSE Linux Enterprise 15 SP1 allows enterprise customers to optimize the
			management of SUSE Linux Enterprise software updates and subscription entitlements. It
			establishes a proxy system for &suse; Customer Center with repositories and
			registration targets. This helps you to centrally manage software updates within a
			firewall on a per-system basis, while maintaining your corporate security policies and
			regulatory compliance.</para>
		<para>RMT allows you to provision updates for all of your devices running a product based on
			&sls;. By downloading these updates once and distributing them throughout the
			enterprise, you can set more restrictive firewall policies. This also reduces bandwidth
			usage, as there is no need to download the same updates for each device. RMT is fully
			supported and available as a download for customers with an active SUSE Linux Enterprise
			product subscription.</para>
		<para>This guide describes the setup of the required infrastructure in generic terms that
			scale from small to large public cloud installations. In addition, this setup can also
			be implemented in a private cloud setup.</para>
	</sect1>

	<sect1 xml:id="sec-overview">
		<title>High Level Overview</title>

		<figure>
			<title>Update Infrastructure Overview</title>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="csp-infra-img1-high-level-overview.png" width="90%"
						format="PNG"/>
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="csp-infra-img1-high-level-overview.png" width="80%"
						format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>The update infrastructure consists of two major components:</para>

		<itemizedlist>
			<listitem>
				<para>Region Servers</para>
			</listitem>
			<listitem>
				<para>Repository Mirroring Tool (RMT) Servers</para>
			</listitem>
		</itemizedlist>

		<para>Both components run as virtual machines (VMs). All services run on SUSE Linux
			Enterprise Server 15 SP1 or higher. These systems may be registered directly to SCC or
			may be managed using SUSE Manager. Optionally, if using Region Servers, the systems must
			also have the Public Cloud Module repository configured.</para>

		<sect2 xml:id="sec-region-server-s">
			<title>Region Server(s)</title>

			<para>The function of the Region Server is to provide information about the RMT servers
				in a given region to the connecting guest. </para>

			<para>For CSP&#8217;s operating in various geographical locations, the Region
				Servers provide instances information on the RMT server to use for that location. If
				the CSP has only one region, it is still appropriate to use the Region Server to
				allow for an easier future expansion.</para>

			<note>
				<title>Optional Component</title>
				<para>The Region Server is an OPTIONAL component. It is however advised to implement
					an automatic RMT server selection mechanism. This enables for automated
					registration to give end customers a <quote>launch and use</quote> experience,
					without the need to manually enter or select a registration server.</para>
			</note>


			<sect3 xml:id="sec-behind-scenes">
				<title>Behind the scenes</title>

				<para> SUSE Linux Enterprise Server guest instances connect to a Region Server to
					receive a list of RMT servers available in the region in which the guest
					instance was launched. The information is provided to the client in XML format
					and is sufficient for the client to automatically register with the region-local
					RMT server. </para>

				<para>Generally, multiple Region Server instances should be operated to ensure
					availability of the Region Service if any Region Server is too distant (high
					latency), down, or otherwise unavailable. Information about the Region Servers
					in the cloud framework is encoded in the guest images by including the region
					serverâ€™s public certificate in the <filename>/var/
						lib/regionService/certs/</filename> directory. The name of the certificates
					is used to attempt to connect to the Region Server via HTTPS.</para>

			</sect3>
		</sect2>

		<sect2 xml:id="sec-rmt-server-s">
			<title>RMT Server(s)</title>

			<para>The RMT server serves as cache for the package repositories obtained from SCC. The
				RMT server itself is registered with SCC, or managed via SUSE Manager, as it would
				be in a traditional data center.</para>

			<para>Given the data provided by a Region Server, the client proceeds through a
					<quote>regular</quote> automated registration process. This registration process
				is identical to the process an administrator would complete when registering a new
				system against an RMT server operated in a traditional data center.</para>
		</sect2>
	</sect1>

	<sect1 xml:id="sec-detailed-setup-guide">
		<title>Detailed Setup Guide</title>

		<para>Although the Region Server is the first service used by a client, its setup and
			configuration is dependent on the setup of the RMT servers. Therefore, the setup guide
			will describe the setup in reverse order as compared to the previous section.</para>


		<sect2 xml:id="sec-prerequisite">
			<title>Prerequisite</title>

			<itemizedlist>
				<listitem>
					<para>Retrieve the SCC mirroring credentials</para>
				</listitem>
				<listitem>
					<orderedlist>
						<listitem>
							<para> Visit the SUSE Customer Center at <link
									xlink:href="http://scc.suse.com">http://scc.suse.com</link> and
								log in. </para>
						</listitem>
						<listitem>
							<para> If you are member of multiple organizations, choose the
								organization you want to work with from the sidebar on the left.
							</para>
						</listitem>
						<listitem>
							<para> Select Proxies in the top menu. </para>

							<figure>
								<title>SUSE Customer Center Organizations</title>
								<mediaobject>
									<imageobject role="fo">
										<imagedata fileref="csp-infra-img2-scc.png" width="70%"
											format="PNG"/>
									</imageobject>
									<imageobject role="html">
										<imagedata fileref="csp-infra-img2-scc.png" width="80%"
											format="PNG"/>
									</imageobject>
								</mediaobject>
							</figure>

						</listitem>
						<listitem>
							<para> The credentials are displayed in the top right corner. </para>

							<figure>
								<title>SUSE Customer Center Mirroring Credentials</title>
								<mediaobject>
									<imageobject role="fo">
										<imagedata
											fileref="csp-infra-img3-mirroring-credentials.png"
											width="70%" format="PNG"/>
									</imageobject>
									<imageobject role="html">
										<imagedata
											fileref="csp-infra-img3-mirroring-credentials.png"
											width="80%" format="PNG"/>
									</imageobject>
								</mediaobject>
							</figure>

						</listitem>
						<listitem>
							<para> To see the password, select the <emphasis role="strong"
									>eye</emphasis> symbol. </para>
						</listitem>
					</orderedlist>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 xml:id="sec-general-setup">
			<title>General Setup</title>

			<para>Before any of the servers are set up and configured, some general preparations
				should be completed. Access restriction to the servers is a multi-level process as
				described in more detail later. This is usually achieved with firewalls. </para>

			<para> For each region there should be at least two RMT servers. Additionally, there
				should be at least two Region Servers. Depending on the footprint of the cloud
				environment, more Region Servers, with instances running in different regions, may
				be desired. </para>


		</sect2>

		<sect2 xml:id="sec-firewall-rules">

			<title>Firewall Rules</title>

			<sect3 xml:id="sec-rmt-servers">

				<title>RMT Servers</title>

				<para> The firewall rules for the RMT server need to allow incoming traffic on ports
					22,80,and 443 from all addresses(<systemitem class="ipaddress"
						>0.0.0.0/0</systemitem>; <systemitem class="ipaddress">::/0</systemitem>).
					All other ports should be blocked. </para>

			</sect3>

			<sect3 xml:id="sec-region-servers">
				<title>Region Servers</title>

				<para>The firewall rules for the Region Servers need to allow incoming traffic on
					ports 22 and 443 from all addresses <systemitem class="ipaddress"
						>0.0.0.0/0</systemitem>; <systemitem class="ipaddress">::/0</systemitem>).
					If you prefer, you can move SSH to run on a different port and configure your
					firewall rules accordingly. </para>
			</sect3>

			<sect3 xml:id="sec-prepare-ssh-for-server">
				<title>Prepare SSH Key Pairs for the Server</title>

				<para> The final preparatory step is to generate SSH key pairs for the servers. It
					is recommended to use different keys for the RMT server and the Region Server. </para>

				<screen>ssh-keygen -t rsa -f RMT
ssh-keygen -t rsa -f regionsrv</screen>
			</sect3>

		</sect2>

		<sect2 xml:id="sec-rmt-server-setup">
			<title>RMT Server Setup</title>

			<para> It is recommended to have two RMT servers per physical location (region)
				available. The number of RMT servers depends on the bandwidth within the data center
				and the number of expected simultaneous users. As a reference, SUSE operates two RMT
				servers per region on Amazon Web Services (AWS) and can easily satisfy the
				throughput needs for registered clients. </para>

			<para> Thus, it is unlikely that more than two RMT servers are needed in your setup. The
				setup of an RMT server inside a virtual machine is no different from the setup of an
				RMT Server on a physical machine. A standard RMT server installation is described in
				the next chapter. For detailed information on the RMT server, refer to the <link
					xlink:href="https://documentation.suse.com/sles/15-SP1/html/SLES-all/book-rmt.html"
					>Repository Mirroring Tool Guide</link>. A step-by-step instruction for a
				standard installation is provided in that document. </para>

			<note>
				<title/>
				<para>Alternatively, you can build an image with <emphasis role="strong"
						>KIWI</emphasis>. For more information about KIWI, refer to <link
						xlink:href="https://doc.opensuse.org/projects/kiwi/doc/">openSUSE KIWI Image
						System Cookbook</link>.</para>
			</note>

			<sect3 xml:id="sec-default-rmt-server-installation">
				<title>Default RMT Server Installation</title>

				<sect4 xml:id="sec-system-installation">
					<title>During System Installation</title>

					<para>During the system installation, make sure you select the
							<package>rmt-server</package> package.</para>

					<procedure>
						<step>
							<para>When getting to the <emphasis role="strong">Installation
									Summary</emphasis> step of the installation, select <emphasis
									role="strong">Software</emphasis>.</para>

							<figure>
								<title>Installation Summary</title>
								<mediaobject>
									<imageobject role="fo">
										<imagedata fileref="csp-infra-img4-installation-summary.png"
											width="70%" format="PNG"/>
									</imageobject>
									<imageobject role="html">
										<imagedata fileref="csp-infra-img4-installation-summary.png"
											width="80%" format="PNG"/>
									</imageobject>
								</mediaobject>
							</figure>
						</step>

						<step>
							<para>On the software selection page click <emphasis role="strong"
									>Details</emphasis>. Go to the <emphasis role="strong">Search
									Tab</emphasis>. Type <emphasis role="italic">rmt</emphasis> and
								select <emphasis role="strong">rmt-server</emphasis>. The
								dependencies are automatically selected.</para>
							<figure>
								<title>Software Selection</title>
								<mediaobject>
									<imageobject role="fo">
										<imagedata
											fileref="csp-infra-img5-rmt-software-selection.png"
											width="70%" format="PNG"/>
									</imageobject>
									<imageobject role="html">
										<imagedata
											fileref="csp-infra-img5-rmt-software-selection.png"
											width="80%" format="PNG"/>
									</imageobject>
								</mediaobject>
							</figure>
						</step>

						<step>
							<para> Click <emphasis role="strong">Accept</emphasis>. Click <emphasis
									role="strong">Continue</emphasis> to accept the automatic
								dependencies added.</para>
						</step>
						<step>
							<para>Continue with the installation.</para>
						</step>
					</procedure>
				</sect4>

				<sect4 xml:id="sec-install-rmt-existing-system">
					<title>Install an RMT Server on an Existing System</title>

					<para>To install RMT on a running SUSE Linux Enterprise Server installation, use
							<package>zypper</package>. Type the following command:</para>
					<screen>sudo zypper in rmt-server</screen>
					<para>RMT is now installed.</para>
				</sect4>
			</sect3>
		</sect2>

		<sect2 xml:id="sec-rmt-config">
			<title>RMT Configuration</title>

			<sect3 xml:id="sec-initial-config">

				<title>Initial Configuration</title>
				<para/>
				<procedure>
					<step>
						<para>Start YaST with the <package>rmt</package> module</para>
						<screen>sudo yast2 rmt</screen>
					</step>
					<step>
						<para>Enter your organizations credentials from SCC.</para>
					</step>
					<step>
						<para>Enter the credentials for a new MariaDB user and database name. This
							user will then be created. Then select <emphasis role="strong"
								>Next</emphasis>. If a password for the MariaDB root user is already
							set, you are required to enter it. If no password is set for root, you
							are asked to enter a new one.</para>
					</step>
					<step>
						<para>Enter a common name for the SSL certificates. The common name should
							usually be the fully qualified domain name (FQDN) of the server. Enter
							all domain names and IP addresses with which you want to reach the RMT
							server as alternative common names. When all common names are entered,
							select <emphasis role="strong">Next</emphasis>.</para>
					</step>
					<step>
						<para>To view the summary, click <emphasis role="strong">Next</emphasis>.
							Close YaST by clicking <emphasis role="strong">Finish</emphasis>. YaST
							then enables and starts all <package>systemd</package> services and
							timers.</para>
					</step>
				</procedure>
			</sect3>

			<sect3 xml:id="sec-repository-management">
				<title>Repository Management</title>

				<sect4 xml:id="sec-sync-repo-metadata">
					<title>Synchronizing Repository Metadata</title>
					<para>The local RMT database needs to be updated periodically with the
						information downloaded from SUSE Customer Center. This includes information
						about available products and repositories. This synchronization is done
						automatically using the <package>systemd</package> timer
							<package>rmt-server-sync.timer</package>. You can manually run the
						synchronization command. When first installing RMT, this is a good option to
						get the initial synchronization quicker. To do so, run the following
						command: </para>
					<screen>sudo rmt-cli sync</screen>
				</sect4>

				<sect4 xml:id="sec-mirroring-packages">
					<title>Mirroring Packages</title>
					<para> Packages for enabled repositories are mirrored on your RMT server.
						Packages are downloaded periodically once a day. The download can also be
						triggered manually at any time. The periodic mirroring is done by the
							<package>systemd</package> timer
							<package>rmt-server-mirror.timer</package>.</para>

					<procedure>
						<step>
							<para>Enable products/repositories to be mirrored: </para>
							<substeps>
								<step>
									<para>Select <emphasis role="strong">Using
										Products</emphasis>.</para>
									<substeps>
										<step>
											<para>Enter the following command to display the
												products available:</para>
											<screen>rmt-cli products list ï¿½all</screen>
										</step>
										<step>
											<para>Note the ID or product name of the products you
												want to enable.</para>
										</step>
										<step>
											<para>Enter the following command for each product you
												want to enable:</para>
											<screen>rmt-cli products enable ID/name</screen>
										</step>
									</substeps>
								</step>
							</substeps>
							<para>Example:</para>
							<screen>
						tux > sudo rmt-cli products list --all
						+------+----------------------+---------+--------+--------------
						| ID | Product | Version | Arch | Mirror? | Last mirrored
						+------+----------------------+---------+--------+--------------
						[...]
						| 1743 | SUSE Package Hub | 15 | x86_64 | Don't Mirror |
						| | PackageHub/15/x86_64 | | | |
						[...]
						tux > sudo rmt-cli products enable 1743
						2 repo(s) successfully enabled.
						tux > sudo rmt-cli products disable 1743
						2 repo(s) successfully disabled.
						</screen>
							<para>To enable or disable multiple products at once, specify a space
								delimited list of their IDs or product strings. Example:</para>
							<screen>tux > sudo rmt-cli repos disable 2526 3263</screen>
						</step>
						<step>
							<para>Select <emphasis role="strong">Using
								Repositories</emphasis>.</para>
							<para>This is similar to the above which uses specific products instead
								of the complete repository that holds them.</para>
							<substeps>
								<step>
									<para>Enter the following command to get a list of repositories
										to enable:</para>
									<screen>rmt-cli products list --all</screen>
								</step>
								<step>
									<para>Note the ID or product name of the repositories you want
										to enable.</para>
								</step>
								<step>
									<para>Enter the following command to enable the
										repository:</para>
									<screen>rmt-cli repos enable ID</screen>
								</step>
							</substeps>
						</step>
						<step>
							<para>Initiate an initial mirroring using the following command:</para>
							<screen>sudo rmt-cli mirror</screen>
						</step>
					</procedure>
				</sect4>


				<!--	duplicated section!! see next section level 3-->
<!--				<sect4 xml:id="sec-config-data-disks">
					<title>Configuring Data Disks to Hold Repositories and DB</title>

					<para>After the installation of the RMT Server package (RMT), the directory
						structure required by RMT is set up in
							<filename>/var/lib/rmt/public/repo</filename>. Ideally, use an extra
						disk to hold the repositories. The following process outlines the steps
						necessary to set the external device up to hold the repositories.</para>

					<para>For the RMT repository disk follow the steps below:</para>
					<procedure>
						<step>
							<para>Add the disk to the SUSE Linux Enterprise Server instance that
								holds the RMT server.</para>
						</step>
						<step>
							<para> Use <command>sudo fdisk -l</command> to list the available block
								devices. </para>
						</step>
						<step>
							<para>Create a partition table (using YaST, <package>gparted</package>,
								or <package>fdisk</package>) and create one partition on the device.
							</para>
						</step>
						<step>
							<para> (Optional-recommended) Create a volume group, to easily add more
								storage for repository growth.</para>
						</step>
						<step>
							<para> Create a file system on the newly created partition. XFS is the
								recommended file system for this storage device. </para>
						</step>
						<step>
							<para> Copy the content of the RMT directory to a <quote>safe</quote>
								place: </para>
							<screen>sudo mkdir /tmp/RMTData; rsync -av /var/lib/rmt/public/repo /tmp/RMTData</screen>
						</step>
						<step>
							<para>Mount the storage partition:</para>
							<screen>sudo mount /dev/sd? /var/lib/rmt/public/repo</screen>
						</step>
						<step>
							<para>Make sure to have the RMT user and the <package>nginx</package>
								group owners of the newly mounted directory:</para>
							<screen>
						sudo chown _rmt /var/lib/rmt/public/repo -R
						sudo chgrp nginx /var/lib/rmt/public/repo -R
						</screen>
						</step>
						<step>
							<para>Restore the content of the backed up repo directory:</para>
							<screen>rsync -av /tmp/RMTData/ /var/lib/rmt/public/repo; rm -rf /tmp/RMTData</screen>
						</step>
						<step>
							<para>Make sure the disks are mounted on startup by having the entries
								in <filename>/etc/fstab</filename>.</para>
						</step>
					</procedure>
				</sect4>-->
			</sect3>


			<sect3 xml:id="sec-configure-data-disks">
				<title>Configuring Data Disks to Hold Repositories and DB</title>

				<para>After the installation of the RMT server package, the directory structure
					required by RMT is set up in <filename>/var/lib/rmt/public/repo</filename>.
					Ideally, use an extra disk to hold the repositories. The following process
					outlines the steps necessary to set up the external device to hold the
					repositories.</para>

				<para>For the RMT repository disk follow the steps outlined below:</para>

				<procedure>
					<step>
						<para>Add the disk to the SUSE Linux Enterprise Server instance that holds
							the RMT server.</para>
					</step>
					<step>
						<para> Use <command>sudo fdisk -l</command> to list the available block
							devices. </para>
					</step>
					<step>
						<para>Create a partition table (using YaST, <package>gparted</package>, or
								<package>fdisk</package>) and create one partition on the
							device.</para>
					</step>
					<step>
						<para>Optional but recommended: Create a volume group, to easily add more
							storage for repository growth. </para>
					</step>
					<step>
						<para> Create a file system on the newly created partition. XFS is the
							recommended file system for this storage device. </para>
					</step>
					<step>
						<para> Copy the content of the RMT directory to a <quote>safe</quote> place: </para>
						<screen>sudo mkdir /tmp/RMTData; rsync -av /var/lib/rmt/public/repo /tmp/RMTData</screen>
					</step>
					<step>
						<para>Mount the storage partition:</para>
						<screen>sudo mount /dev/sd? /var/lib/rmt/public/repo</screen>
					</step>
					<step>
						<para>Make sure to have the <package>rmt</package> user and the
								<package>nginx</package> group owners of the newly mounted
							directory:</para>
						<screen>
						sudo chown _rmt /var/lib/rmt/public/repo -R
						sudo chgrp nginx /var/lib/rmt/public/repo -R
						</screen>
					</step>
					<step>
						<para>Restore the content of the backed-up repository directory:</para>
						<screen>rsync -av /tmp/RMTData/ /var/lib/rmt/public/repo; rm -rf /tmp/RMTData</screen>
					</step>
					<step>
						<para>Make sure the disks are mounted on start-up by having the entries in
								<filename>/etc/fstab</filename>. </para>
					</step>
				</procedure>

				<para>The procedure for placing the DB data onto a separate device is the
					same:</para>

				<procedure>
					<step>
						<para>Attach a disk of at least 40 GB to the RMT server.</para>
					</step>
					<step>
						<para> Use <command>sudo fdisk -l</command> to list the available block
							devices. </para>
					</step>
					<step>
						<para>Create a partition table (using YaST, <package>gparted</package>, or
								<package>fdisk</package>) and create one partition on the
							device.</para>
					</step>
					<step>
						<para> Create a file system on the newly created partition. XFS is the
							recommended file system for this storage device. </para>
					</step>
					<step>
						<para> Copy the content of the DB directory to a <quote>safe</quote> place: </para>
						<screen>mkdir /tmp/dbData; rsync -av /var/lib/mysql/ /tmp/dbData</screen>
					</step>
					<step>
						<para>Mount the storage partition:</para>
						<screen>mount /dev/sd? /var/lib/mysql</screen>
					</step>
					<step>
						<para>Restore the content of the repository directory:</para>
						<screen>rsync -av /tmp/dbData/ /var/lib/mysql; rm -rf /tmp/dbData</screen>
					</step>
					<step>
						<para>Change ownership and group membership to the default:</para>
						<screen>chgrp root mysql -R
chown mysql mysql -R</screen>
					</step>
					<step>
						<para>Make sure the disks are mounted on start-up by having the entries in
								<filename>/etc/fstab</filename>. </para>
					</step>
				</procedure>
			</sect3>
		</sect2>
	</sect1>


	<sect1 xml:id="sec-migrate-smt-rmt">
		<title>Migrating from Subscription Management Tool to Repository Mirroring Tool</title>

		<sect2 xml:id="sec-export-smt-data">
			<title>Export the Subscription Management Tool (SMT) Data</title>
			<procedure>
				<step>
					<para>Update your SMT server installation by running the following
						command:</para>
					<screen>sudo zypper up</screen>
				</step>
				<step>
					<para>If you want to export your SSL certificates along with the rest of the
						data, run the following command:</para>
					<screen>sudo smt data-export </screen>
					<para>Remember to keep your certificates in a <quote>safe</quote> place.</para>
					<para>If you do not want to export the SSL certificates from SMT, run the
						command:</para>
					<screen>sudo smt-data-export â€“no-ssl-export</screen>
				</step>
				<step>
					<para>The exported configuration is now saved to
							<filename>smt-export.XXXXXX.tar.gz</filename>. Copy the file to a
						location which can be accessed by the new RMT server.</para>
				</step>
			</procedure>
		</sect2>

		<sect2 xml:id="sec-importing-data-smt-rmt">
			<title>Importing SMT data to RMT</title>
			<procedure>
				<step>
					<para> Update your RMT server installation by running the following command: </para>
					<screen>sudo zypper up</screen>
				</step>
				<step>
					<para>Copy the exported <filename>.tar.gz</filename> file to an empty directory.
						Then unpack it:</para>
					<screen>
sudo mkdir  EMPTY_DIR
sudo cd EMTPY_DIR
sudo cp /PATH/TO/smt-export.XXXXXX.tar.gz ./
sudo tar xf smt-export.XXXXXX.tar.gz
					</screen>
				</step>
				<step>
					<para>If you chose to export the SSL certificates from SMT, copy the CA private
						key and certificate to <filename>/etc/rmt/ssl/</filename>:</para>
					<screen>
sudo cp ssl/cacert.key /etc/rmt/ssl/rmt-ca.key
sudo cp ssl/cacert.pem /etc/rmt/ssl/rmt-ca.crt
					</screen>
				</step>
				<step>
					<para>Run the YaST RMT configuration module. If you imported the SMT CA
						certificate, add the domain of the SMT server to the common names of the new
						SSL certificate. </para>
				</step>
				<step>
					<para>Run the RMT synchronization to get the products and repositories data from
						SUSE Customer Center:</para>
					<screen>sudo rmt-cli sync</screen>
				</step>
				<step>
					<para>Import the data from the SMT server:</para>
					<screen>sudo rmt-data-import -d ./</screen>
				</step>
				<step>
					<para> Optional: Move the mirrored repository data from to RMT and adjust the
						ownership of the copied data: </para>
					<screen>
sudo cp -r /var/www/htdocs/repo/* /var/lib/rmt/public/repo
sudo chown -R _rmt:nginx /var/lib/rmt/public/repo
					</screen>
				</step>
				<step>
					<para>Update the packages in the repositories by starting the mirroring
						process:</para>
					<screen>sudo rmt-cli mirror</screen>
				</step>
			</procedure>
		</sect2>

		<sect2 xml:id="sec-moving-data-smt-rmt">
			<title>Optional: Moving Mirrored Data From the SMT to the RMT Server </title>

			<procedure>
				<step>
					<para>Option 1: If a separate disk has been used for the mirrored data on the
						SMT server, perform the following actions:</para>
					<substeps>
						<step>
							<para>Unmount the disk from the SMT server with:</para>
							<screen>sudo umount /dev/sdX</screen>
						</step>
						<step>
							<para>Mount it to the new RMT server (this can be the same in case of an
								in-place upgrade):</para>
							<screen>mount  /dev/sdX/ /var/lib/rmt/public/repo</screen>
						</step>
					</substeps>
				</step>
				<step>
					<para>Option 2: In case of an in-place upgrade, and when no separate disk has
						been used, perform the following action:</para>
					<substeps>
						<step>
							<para>Copy the mirrored data from the location SMT uses to the location
								RMT uses:</para>
						</step>
						<step>
							<screen>sudo cp -r /var/www/htdocs/repo/* /var/lib/rmt/public/repo</screen>
						</step>
					</substeps>
				</step>
				<step>
					<para>Finally, set the permissions on the repository directory so the RMT server
						can access it:</para>
					<screen>sudo chown -R _rmt:nginx /var/lib/rmt/public/repo</screen>
				</step>
			</procedure>
		</sect2>
	</sect1>

	<sect1 xml:id="sec-rmt-registration-sharing-for-csp">
		<title>Setting up RMT Registration Sharing for Cloud Service Providers</title>

		<sect2 xml:id="sec-intro-rmt-reg-sharing">
			<title>Introduction</title>

			<para>Registration sharing replicates client registrations. This enables CSPs to provide
				redundant RMT servers per region so registered instances will continue to have
				access to valid repositories in case of a RMT failure in the region.</para>

			<para>For registration sharing you will need to ensure the following:</para>

			<itemizedlist>
				<listitem>
					<para>Two or more RMT servers need to be available in a region that have been
						deployed using SUSE Linux Enterprise Server 15 SP1 or newer</para>
				</listitem>
				<listitem>
					<para>Each RMT server is registered with SCC.</para>
				</listitem>
				<listitem>
					<para>Each RMT server is synchronizing repositories from SUSE Customer
						Center.</para>
				</listitem>
				<listitem>
					<para>Instances can successfully register and de-register with each individual
						RMT server in a region.</para>
				</listitem>
				<listitem>
					<para>Instance registrations forwarding to SUSE Customer Center is disabled in
						each RMT setup.</para>
				</listitem>
				<listitem>
					<para>Name resolution has been configured so all RMT servers in a region can
						resolve the other RMT servers in the same region.</para>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 xml:id="sec-deployment-rmt-reg-sharing">
			<title>Deployment</title>

			<procedure>
				<step>
					<para> Stop the RMT servers in the region and install the
							<package>rmt-server-pubcloud</package> package: </para>
					<screen>systemctl stop rmt-server
					SUSEConnect -p sle-module-public-cloud/15.1/x86_64
					zypper in rmt-server-pubcloud</screen>
					<para> The following message might be displayed: </para>
					<screen>Problem: rmt-server-config-2.5.7-3.15.1.x86_64 conflicts with rmt-server-configuration provided by rmt-server-pubcloud-2.5.7-3.15.1.x86_64
					Solution 1: deinstallation of rmt-server-config-2.5.7-3.15.1.x86_64
					Solution 2: do not install rmt-server-pubcloud-2.5.7-3.15.1.x86_64
					Choose from above solutions by number or cancel [1/2/c/d/?] (c):</screen>
					<para>If so, choose <emphasis role="strong">Solution 1</emphasis> to deinstall
						<filename>rmt-server-config</filename>.</para>
				</step>
				<step>
					<para> Add an Instance Verification example in
							<filename>/usr/share/rmt/engines/instance_verification/lib/instance_verification/providers/example_csp.rb</filename>
						by pasting the following information: </para>
					<screen>
class InstanceVerification::Providers::Example &lt; InstanceVerification::ProviderBase
	def instance_valid?
		@instance_id = 'i-0000000000'
		@instance_billing_info = 'example'
		true # this is an example, always returns true
	end
end
					</screen>
					<para> By default, the <package>rmt-server-pubcloud</package> package enables
						instance verification so CSPs can link the RMT systems to a billing system.
						The following is an example of how a CSP can verify an instance can only
						access repositories that it is authorized to access. Visit <link
							xlink:href="https://github.com/SUSE/rmt/tree/master/engines/instance_verification"
						/> for more information. </para>
				</step>
				<step>
					<para> Add a registration sharing section to the bottom of
							<filename>/etc/rmt.conf</filename>. </para>
					<para> For more details, review
							<filename>/usr/share/rmt/engines/registration_sharing/README.md</filename>
						on any of the RMT servers with the <package>rmt-server-pubcloud
							package</package> installed. </para>
					<screen>
regsharing:
peers:
	- &lt;remote rmt 1&gt;.domain.com
	- &lt;remote rmt 2&gt;.domain.com
api_secret: s3cr3t_t0k3n
data_dir: /var/lib/rmt/regsharing/data-dir
					</screen>

					<para>In the above screen:</para>
					<itemizedlist>
						<listitem>
							<para><emphasis>peers</emphasis> is a list of the other RMT servers in
								the region</para>
						</listitem>
						<listitem>
							<para><emphasis>api_secret</emphasis> is a secret token only shared
								between the RMT servers in the region</para>
						</listitem>
					</itemizedlist>

				</step>
				<step>
					<para> Obtain the server certificate from each remote RMT server: </para>
					<screen>
curl --tlsv1.2 --silent --insecure --connect-timeout 10 https://&lt;remote rmt 1&gt;.domain.com/rmt.crt --output /etc/pki/trust/anchors/&lt;remote rmt 1&lt;.domain.com.pem
					</screen>
					<para> Repeat the command for each RMT server listed in
							<filename>/etc/rmt.conf</filename>. </para>
				</step>
				<step>
					<para> Create hashes for the new server certificates: </para>
					<screen>
c_rehash
					</screen>
				</step>
				<step>
					<para>Start the <package>rmt-server</package> service:</para>
					<screen>systemctl start rmt-server</screen>
				</step>
			</procedure>
		</sect2>

		<sect2 xml:id="sec-test-reg-sharing">
			<title>Testing Instance Registration and Deregistration with Registration
				Sharing</title>

			<procedure>
				<step>
					<para>Register an instance to a single RMT server and verify that the
						registration exists:</para>
					<screen>rmt-cli systems list</screen>
				</step>
				<step>
					<para>Initiate a single registration synchronization on the RMT server where the
						instance was registered:</para>
					<screen>systemctl start rmt-server-regsharing.service</screen>
				</step>
				<step>
					<para>Verify the registration was shared by viewing the log:</para>
					<screen>journalctl -u rmt-server-regsharing.service</screen>
				</step>
				<step>
					<para>On the RMT peers, verify the registration exists:</para>
					<screen>rmt-cli systems list</screen>
				</step>
				<step>
					<para>De-register the instance and verify the registration is no longer shown in
						any of the RMT servers:</para>
					<screen>systemctl start rmt-server-regsharing.service</screen>
				</step>
			</procedure>
		</sect2>

		<sect2 xml:id="sec-reg-sharing-timer">
			<title>Starting and Enabling the Registration Sharing Timer</title>
			<para> The package <package>rmt-server-regsharing.timer</package> defaults to starting
				the <package>rmt-server-regsharing</package> every thirty seconds to synchronize
				registration information. </para>
			<screen>
systemctl start rmt-server-regsharing.timer
systemctl enable rmt-server-regsharing.timer
					</screen>
		</sect2>
	</sect1>

	<sect1 xml:id="sec-region-server-config-test">
		<title>Region Server Configuration and Testing</title>

		<sect2 xml:id="sec-region-server-config-test-intro">
			<title>Introduction</title>

			<para>The function of the Region Server is to provide information about the RMT servers
				in a given region to a connecting client. The Region Server runs as a Python script
				using the Flask framework in Apache. The Region Server is provided with the
					<package>cloud-regionsrv</package> package.</para>

			<para>Region servers are located within a CSP network. An exmaple of the region server
				placement could be based on geographic boundaries like Americas, Europe/Middle East
				and Asia. It is recommended that a minimum of two region servers are deployed for
				redundency. Install, register and fully patch SLES 15 SP1 or newer for each of the
				region server.</para>

			<para>A client will attempt to contact a region server from a preconfigured list of
				available region servers. The client will share either it's IP address information
				or a hint that will help the region server return a list of the closest RMT servers
				to the client.</para>

			<para>As with the RMT server, the Region Server should be access-restricted to the IP
				address ranges for the cloud framework. </para>
		</sect2>

		<sect2 xml:id="sec-region-server-setup">
			<title>Region Server Setup</title>

			<procedure>
				<step>
					<para>Use <command>SUSEConnect --list-extension</command> to determine the
						command to enable the Public Cloud module.</para>
				</step>
				<step>
					<para>Install the <package>cloud-regionsrv</package> package.</para>
					<screen>zypper in cloud-regsionsrv</screen>
					<para/>
					<para>The service itself uses two configuration files: </para>
					<itemizedlist>
						<listitem>
							<para><filename>/etc/regionService/regionInfo.cfg</filename> is used to
								configure the service and contains the location of the log file and
								the location of the <filename>regionData.cfg</filename></para>
						</listitem>
						<listitem>
							<para><filename>/etc/regionService/regionData.cfg</filename> contains
								the data the Region Server will provide to the connecting
								client</para>
						</listitem>
					</itemizedlist>
					<para>Both files are available in the <emphasis role="strong">ini</emphasis>
						format.</para>
				</step>
				<step>
					<para>Make a copy of
						<filename>/etc/regionService/regionData.cfg</filename>.</para>
					<screen>cp /etc/regionService/regionData.cfg /etc/regionService/regionData.cfg.orig</screen>
				</step>
				<step>
					<para>Add region information in
							<filename>/etc/regionService/regionData.cfg</filename>.</para>

					<para>The default <filename>regionData.cfg</filename> file provides a template
						for the configuration file. This file can be maintained manually or be
						auto-generated, depending on your setup for IP address allocation within
						your cloud framework.</para>

					<para>The <filename>regionData.cfg</filename> file needs to contain one
						configuration section per region. The hint is processed with string
						matching. Thus having section names match the configured region names is
						important. The server implementation has no option of name mapping. For each
						region all options in the section must be configured.</para>

					<para>The section options are as follows:</para>

					<variablelist>
						<varlistentry>
							<term>public-ips</term>
							<listitem>
								<para>The value for this option is a comma-separated list of IP
									ranges in CIDR format, for example: </para>
								<screen>public-ips = 62.135.16.0/18,56.56.130.0/16</screen>
								<para>These are the ranges the DHCP server in the given region is
									configured to use.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term> smt-server-ip </term>
							<listitem>
								<para> The value for this option is a comma-separated list of the
									RMT Server IP addresses in the region being configured. </para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term> smt-server-name </term>
							<listitem>
								<para> The value for this option sets the host name of the RMT
									Server that was encoded into the certificate during the setup of
									the RMT Server. If only one value is supplied, it will be used
									for all IP addresses provided by the
										<option>smt-server-ip</option> setting. If more than one
									value is supplied, the number of names must match the number of
									IP addresses given with the <option>smt-server-ip</option>
									option. The order of the names and IP addresses must match as
									well. </para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term> smt-fingerprint </term>
							<listitem>
								<para> The value for this option is the fingerprint of the root CA
									created during the RMT Server setup. On the RMT Server, the
										<filename>/srv/www/htdocs</filename> includes the
										<filename>rmt.crt</filename> file. This is the root CA
									transferred to the client and verified prior to accepting the
									repositories from the RMT Server. Obtain the fingerprint with
									the command: </para>
								<screen>openssl x509 -in rmt.crt -noout -fingerprint | /usr/bin/cut -d= -f2</screen>

								<para>Use this fingerprint for the <option>smt-fingerprint</option>
									value. As with the <option>smt-server-name</option>, supplying
									one value is sufficient if all RMT Servers have the same root
									CA. If each server has its own CA, supply a comma-separated
									list. The order must match the order of the IP addresses, or
									certificate acceptance will fail and the guest cannot register
									with the RMT Server.</para>
							</listitem>
						</varlistentry>
					</variablelist>

					<para>
						<emphasis role="strong">Example: Completed Section for a Region in a
							Cloud</emphasis>
					</para>

					<para>The following shows an example of a completed section for a region in a
						cloud setup.</para>

					<screen>[nor-north]
			public-ips = 62.135.16.0/18,56.56.130.0/16
			smt-server-ip = 62.153.16.20,56.56.130.253
			smt-server-name = rmt-nor.supertuxcloud.com
			smt-fingerprint = 9D:B9:88:DB:87:52:00:55:F0:FF:5D:5C:66:60:D3:E0:5C:D4:FB:79</screen>

					<para>In the example above, both RMT Servers share the same certificate. If this
						were not the case, another value for the <option>smt-server-name</option>
						and for the <option>smt-fingerprint</option> options would need to be
						configured.</para>

					<screen>[mid-north]
			public-ips = 62.135.16.0/18,56.56.130.0/16
			smt-server-ip = 62.153.16.20,56.56.130.253
			smt-server-name = rmt-mid-a.supertuxcloud.com, rmt-mid-b.supertuxcloud.com
			smt-fingerprint = 9D:B9:88:DB:87:52:00:55:F0:FF:5D:5C:66:60:D3:E0:5C:D4:FB:79</screen>

					<para>In this example, the servers share the same certificate, but have
						different names. The certificate in this case would contain a wild
						card.</para>
				</step>
				<step>
					<para>Generate a region server certificate.</para>

					<para>It is recommended to use name resolution via DNS for new clients that will
						connect to a region server. One potential advantage of using DNS for the
						Region Server is that no new client update needs to be released if a Region
						Server needs to move out of a given region and into a new region where a new
						IP address would need to be allocated. However, this implies that an entire
						cloud region would be shut down, which is a very unlikely scenario. The
						Region Server package (<systemitem>cloud-regionsrv</systemitem>) provides a
						convenient executable to generate the server certificate.</para>

					<screen>genRegionServerCert -c COUNTRY -d DEPARTMENT --host IP_ADDRESS_OR_HOSTNAME -l LOCATION -o ORGANIZATION -s STATE</screen>

					<para>This will generate the server certificate in
							<filename>/etc/apache2/ssl.crt</filename> and the public certificate in
							<filename>/root/regionServCert/</filename>. The certificate generation
						script will restart the Apache Web server.</para>
				</step>
				<step>
					<para>Modify
						<filename>/etc/apache2/vhosts.d/regionsrv_vhost.conf</filename>.</para>

					<para>Change <option>SUBSTITUTE_WITH_CLOUD_SPECIFC_NAME</option> in the
							<option>ServerName</option> option so that it matches the
						fully-qualified hostname used in in the
							<command>genRegionServerCert</command>.</para>

					<para>Change the following section so that it matches what is below.</para>
					<screen>
						&lt;Directory /srv/www/regionService&gt;
							WSGIProcessGroup regionInfo
							WSGIApplicationGroup %{GLOBAL}
							&lt;RequireAll&gt;
									Require all granted
							&lt;/RequireAll&gt;
						&lt;/Directory&gt;
					</screen>
				</step>
				<step>
					<para>Enable and restart the Region Server service.</para>
					<screen>
						systemctl enable apache2.service
						systemctl restart apache2.service
					</screen>
					<para>The Region Server reads the <filename>regionData.cfg</filename> file as
						configured in the <filename>regionInfo.cfg</filename> file at start-up. It
						creates a hash table from the information provided in the
							<filename>regionData.cfg</filename> file. Depending on the number of IP
						address ranges, this may result in a relatively large requirement of memory.
						For estimation purposes, one can use a requirement of 20 MB per octet (254
						IP addresses). The Region Server also creates a secondary hash table that
						relates the region names to the RMT server information. The secondary hash
						table is consulted if the Region Server receives a region hint from the
						client.</para>
				</step>
			</procedure>
			<para>With the configuration in place the Region Server setup is complete.</para>
		</sect2>

		<sect2 xml:id="sec-client-conf-recommendations">
			<title>Client Configuration Recommendations</title>

			<para>The Region Server provides the <option>regionInfo</option> REST API option that is
				used by the client to obtain RMT information. The client image accesses the Region
				Server via: <link xlink:href="https://IP_ADDRESS_OF_REGION_SERVER/regionInfo"/>
			</para>

			<para>As mentioned previously, for environments where the IP address assignment per
				region is not stable or accessible via API, the option exists to let the client pass
				a region hint to the Region Server. If the region hint is passed, the Region Server
				will first try to provide RMT information to the client based on the region name
				given in the hint. If this fails, the Region Server will fall back to using the IP
				address. A request using the region hint option provides the region hint as an
				argument with the URL: <link
					xlink:href="https://IP_ADDRESS_OF_REGION_SERVER/regionInfo?regionHint=REGION_NAME"
				/>
			</para>

			<para>In this case, <emphasis>REGION_NAME</emphasis> must match a name of one of the
				sections in the <filename>regionData.cfg</filename> file as indicated
				previously.</para>

			<para>The knowledge of the IP addresses of the Region Servers and the certificates for
				the Region Servers are built into the guest image. The
					<package>cloud-regionsrv-client</package> must be installed in the client
				image.</para>

			<para>It is recommended to create a package with the Region Service client configuration
				that contains the following.</para>

			<itemizedlist>
				<listitem>
					<para>Place the public key file that was generated from the
							<command>genRegionServerCert</command> command in the
							<filename>/var/lib/regionService/certs/</filename> directory.</para>
				</listitem>
				<listitem>
					<para>Add a comma-separated list of region servers to <option>regionsrv</option>
						and comment the <option>metadata_server</option>,
							<option>dataProvider</option>, <option>instanceArgs</option> and
							<option>verifyAccess</option> options in the
							<filename>/etc/regionserverclnt.cfg</filename> file.</para>

					<!--	<para>
						<emphasis>NOTE TO REVIEWERS: Probably need to update this item with details
							about each option that are being commented.</emphasis>
					</para>-->
				</listitem>
				<listitem>
					<para>Enable the <package>guestregister</package> service so that a new client
						can determine the closest RMT and automatically register during the initial
						boot.</para>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 xml:id="sec-man-test-client-registration">
			<title>Manually Testing and Troubleshooting a Client Registration</title>

			<para>Use the following command to manually test registering a cloud guest:</para>
			<screen>registercloudguest</screen>

			<para>Review the file <filename>/var/log/cloudregister</filename> if troubleshooting is
				needed.</para>

			<para>Use the command <command>registercloudguest --clean</command> to clean up the
				files written after a previous <command>registercloudguest</command> command has
				been run.</para>
		</sect2>
	</sect1>
	<sect1 xml:id="sec-references">
        <title>References</title>

        <para>For more detailed information and references, have a look at
            the following resources:</para>

        <itemizedlist>
            <listitem>
                <para>
                    <link
                        xlink:href="https://documentation.suse.com/sles/15-SP2/single-html/SLES-rmt/index.html"
                        >Repository Mirroring Tool Guide</link>
                </para>
            </listitem>
        	<!-- <listitem>
        		<para> 
        			<link
        				xlink:href="https://github.com/SUSE/rmt/tree/master/engines/instance_verification">InstanceVerification</link>
        		</para>
        	</listitem> -->           
        </itemizedlist>

    </sect1>

	<sect1 xml:id="sec-legal-notice">
		<title>Legal Notice</title>
		<para>Copyright &copy;2006-2020 SUSE LLC and contributors. All rights reserved. </para>
		<para>Permission is granted to copy, distribute and/or modify this document under the terms
			of the GNU Free Documentation License, Version 1.2 or (at your option) version 1.3; with
			the Invariant Section being this copyright notice and license. A copy of the license
			version 1.2 is included in the section entitled <quote>GNU Free Documentation
				License</quote>.</para>
		<para>SUSE, the SUSE logo and YaST are registered trademarks of SUSE LLC in the United
			States and other countries. For SUSE trademarks, see <link
				xlink:href="http://www.suse.com/company/legal/"
				>http://www.suse.com/company/legal/</link>. Linux is a registered trademark of Linus
			Torvalds. All other names or trademarks mentioned in this document may be trademarks or
			registered trademarks of their respective owners.</para>
		<para>This article is part of a series of documents called "SUSE Best Practices". The
			individual documents in the series were contributed voluntarily by SUSE's employees and
			by third parties.</para>
		<!--  <para>The articles are intended only to be one example of how a particular action could be
   taken. They should not be understood to be the only action and certainly not to be the
   action recommended by SUSE. Also, SUSE cannot verify either that the actions described
   in the articles do what they claim to do or that they don't have unintended
   consequences.</para>-->
		<para> All information found in this article has been compiled with utmost attention to
			detail. However, this does not guarantee complete accuracy.
			<!--Neither SUSE LLC, the authors, nor the translators shall be held liable
    for possible errors or the consequences thereof. -->
		</para>
		<para>Therefore, we need to specifically state that neither SUSE LLC, its affiliates, the
			authors, nor the translators may be held liable for possible errors or the consequences
			thereof. Below we draw your attention to the license under which the articles are
			published.</para>

		<para/>
		<para/>

	</sect1>


	<?pdfpagebreak style="suse2013-sbp" formatter="fop"?>

	<xi:include href="license-gfdl.xml"/>

</article>
