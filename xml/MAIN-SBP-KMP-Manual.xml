<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article role="sbp" xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="art-sbp-rpm-packaging" xml:lang="en">    
    
    <info>
        <title>Kernel Module Packages Manual </title>
        <subtitle>SUSE-based Distributions</subtitle>
        <!--<orgname>SUSE Best Practices</orgname>-->
        <productname>SUSE Linux Enterprise Server 11, 12 GA, 12 SP1</productname>
        <productnumber/>
        <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
            <dm:bugtracker>
                <dm:url>https://github.com/SUSE/suse-best-practices/issues/new</dm:url>
                <dm:product>Kernel Module Packages Manual for SUSE-based
                    Distributions</dm:product>
            </dm:bugtracker>
            <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
        </dm:docmanager>
        
        <meta name="series">SUSE Best Practices</meta> 
        <meta name="category">Packaging</meta> 
        
        <meta name="platform">SUSE Linux Enterprise Server 11</meta> 
        <meta name="platform">SUSE Linux Enterprise Server 12 GA and SP1</meta>  
        
        <authorgroup>
            <author>
                <personname>
                    <firstname>Document Owner: Ann</firstname>
                    <surname>Davis</surname>
                </personname>
                <affiliation>
                    <jobtitle>Senior Software Engineer</jobtitle>
                    <orgname>SUSE</orgname>
                </affiliation>
            </author>
            <!--          <author>
                <personname>
                <firstname></firstname>
                <surname></surname>
                </personname>
                <affiliation>
                <jobtitle></jobtitle>
                <orgname></orgname>
                </affiliation>
                </author>
                <editor>
                <orgname></orgname>
                </editor>
                <othercredit>
                <orgname></orgname>
                </othercredit>-->
        </authorgroup>
        
        <cover role="logos">
            <mediaobject>
                <imageobject>
                    <imagedata fileref="suse.svg" width="4em"/>
                </imageobject>
            </mediaobject>
            <!--            <mediaobject>
                <imageobject>
                <imagedata fileref="microsoft.svg" width="6em"/>
                </imageobject>
                </mediaobject>-->
        </cover>      
        
        <date>July 24, 2017</date>
        
        <abstract>
            <para>SUSE-based distributions use the RPM Package Manager for
                software management. As such, any external kernel modules
                (these are kernel modules not included in SUSE kernel
                packages) should be packaged in RPM packages. These RPMs
                should be built in accordance with specific guidelines to
                ensure that the resulting Kernel Module Packages (KMPs) can
                be installed and updated appropriately, in synchronization
                with kernel updates. </para>
            <para>This document specifies the requirements for RPM packages
                that contain kernel modules, and describes the processes
                surrounding those packages including building, signing,
                installing and upgrading.</para>
            <para>A complete example is given and explained. </para>
            
            <para>
                <emphasis role="strong">Disclaimer: </emphasis>
                Documents published as part of the SUSE Best Practices series have been contributed voluntarily
                by SUSE employees and third parties. They are meant to serve as examples of how particular
                actions can be performed. They have been compiled with utmost attention to detail. However,
                this does not guarantee complete accuracy. SUSE cannot verify that actions described in these
                documents do what is claimed or whether actions described have unintended consequences.
                SUSE LLC, its affiliates, the authors, and the translators may not be held liable for possible errors
                or the consequences thereof.
            </para>
            
        </abstract>
    </info>
    <sect1 xml:id="sec-scope">
        <title>Scope</title>
        <para>This version of the Kernel Module Packages Manual applies
            to:</para>
        <itemizedlist>
            <listitem>
                <para>the Code 11 code base, which includes openSUSE 11.1
                    and newer, SUSE Linux Enterprise Server or Desktop 11
                    (along with service packs)</para>
            </listitem>
            <listitem>
                <para>SUSE Linux Enterprise Server or Desktop 12 (along
                    with service packs)</para>
            </listitem>
            <listitem>
                <para>All products and extensions based on SUSE Linux
                    Enterprise Server 11 and SUSE Linux Enterprise Server
                    12</para>
            </listitem>
        </itemizedlist>
        <para>Versions of this document for Code 9 and Code 10 are
            available as well and can be found at <link
                xlink:href="http://www.novell.com/developer/kernel_module_packages_manuals.html"
                >http://www.novell.com/developer/kernel_module_packages_manuals.html</link></para>
        <para>This document's Appendix B highlights Code 10 to Code 11
            changes and secure boot changes for SUSE Linux Enterprise
            Server and SUSE Linux Enterprise Desktop 11 SP3 and later
            versions. </para>
    </sect1>
    <sect1 xml:id="sec-background">
        <title>Background</title>
        <para>The Linux kernel supports adding functionality at runtime
            through kernel-loadable modules. It includes more than 1500
            modules, about 75 percent of which are hardware drivers. These
            modules are shipped as part of the kernel packages. In some
            cases it is desirable to add additional modules or replace
            existing ones. For example, a driver for a particular storage
            controller that was not available at the time of product
            release might be added later to support new hardware.</para>
        <para>Kernel modules interact with the kernel by the means of
            exported symbols, in a way similar to how user space binaries
            use shared libraries. The /proc/kallsyms file lists all symbols
            currently known to the kernel. To ensure that the kernel and
            modules refer to the same symbols, a version checksum
            (modversion) is added to each symbol. The checksum is computed
            from the symbol's type: in the case of function symbols, the
            checksum is determined by the function's parameters and return
            type.</para>
        <para>When any of a function's parameters or the return type
            changes, the checksum changes as well. This includes all the
            data types involved recursively:</para>
        <para>If a function takes a <emphasis role="strong">struct
                task_struct</emphasis> as parameter and <emphasis
                role="strong">struct task_struct</emphasis> includes a
            field of type <emphasis role="strong">struct dentry</emphasis>,
            then a change to <emphasis role="strong">struct
                dentry</emphasis> will cause the symbol's version checksum
            to change as well. Symbol version checksums for different
            kernel flavors (for example <emphasis role="strong"
                >kernel-default</emphasis> versus <emphasis role="strong"
                >kernel-xen</emphasis>) will not match, and symbol versions
            of the same kernel package on different architectures (for
            example <emphasis role="strong">kernel-default</emphasis> on
            i386 versus x86_64) will not match either. This mechanism
            ensures that the kernel and kernel modules agree on the types
            of data structures that they use to communicate.</para>
        <para>Unless symbol version checking is disabled, modules will load
            only if the checksums of the symbols they use match the
            checksums of the symbols that the kernel exports. The exported
            symbols and their version checksums comprise the kernel
            Application Binary Interface (kABI). When an updated kernel
            includes kABI changes, kernel modules that use any modified
            symbols must be updated as well. </para>
        <para>During its multi-year lifecycle, products like SUSE Linux
            Enterprise Server undergo continuous changes. In addition,
            different kinds of updates like service packs (SPs),
            maintenance/security updates, and customer-specific updates
            (Program Temporary Fixes) are released. The Application Binary
            Interface (ABI) between the kernel and kernel modules is
            volatile. Some kernel updates will change the kernel ABI (kABI)
            by adding or removing exported symbols, or existing symbol
            checksums can change in a kernel update because of changes in
            data structures they reference. SUSE strives to keep the kernel
            ABI stable in maintenance and security and customer-specific
            updates, but sometimes changes cannot be avoided. In service
            packs, SUSE reserves the right to introduce more intrusive
            changes, which increases the likelihood of ABI changes. SUSE
            believes that the added flexibility outweighs the disadvantages
            of breaking older modules. For full discussion of this topic,
            see the documentation <quote>SUSE SolidDriver Documentation:
                SUSE Kernel ABI Stability</quote> at <link
                xlink:href="https://drivers.suse.com/doc/SolidDriver/SUSE_Kernel_ABI_Stability.html"
                >https://drivers.suse.com/doc/SolidDriver/SUSE_Kernel_ABI_Stability.html</link>
            and <quote>The Linux Kernel Driver Interface</quote> from Greg
            Kroah-Hartman at <link
                xlink:href="http://www.kroah.com/log/linux/stable_api_nonsense.html"
                >http://www.kroah.com/log/linux/stable_api_nonsense.html
            </link> (also provided as <emphasis role="strong"
                >stable_api_nonsense.txt</emphasis> in the upstream kernel
            source tree).</para>
        <para>SUSE-based operating systems include technology to ensure
            that kernel modules can be reused or updated in synchronization
            with kernel updates. To use this technology, kernel modules
            must be packaged into Kernel Module Packages (KMPs) as defined
            in this document.</para>
    </sect1>
    <sect1 xml:id="sec-kernel-packages">
        <title>Kernel Packages</title>
        <para>All SUSE products based on kernels 2.6.x, 3.0.x, and 4.4.x
            contain a set of kernel packages that share the same version
            and release number; they are built from the same kernel
            sources. These packages are:</para>
        <bridgehead><package>kernel-FLAVOR</package>,
                <package>kernel-FLAVOR-base</package></bridgehead>
        <para>The binary kernel packages. Each architecture has its own set
            of kernel flavors (for example, kernel-pae, kernel-default,
            kernel-xen, etc.). These are the packages that the kernel
            modules will be used with.</para>
        <bridgehead>
            <package>kernel-source</package>
        </bridgehead>
        <para>The kernel source tree, generated by unpacking the vanilla
            kernel sources and applying all necessary patches. Although the
                <package>kernel-FLAVOR</package> packages technically are
            not built from the <package>kernel-source</package> package,
            they are built from the same source tree. This tree should be
            used for module building.</para>
        <bridgehead>
            <package>kernel-syms, kernel-FLAVOR-devel</package>
        </bridgehead>
        <para>Kernel symbol version information for compiling external
            modules. The kernel-flavor-devel package is required for
            building external modules. If this package is not used, the
            resulting modules will be missing symbol version information,
            which will cause them to break during kernel updates. The
            kernel-source and kernel-devel packages used for compiling
            external modules must match each other exactly.</para>
        <para>Starting with SUSE Linux Enterprise Server and SUSE Linux
            Enterprise Desktop 11 SP1, the <package>kernel-syms</package>
            package is a place-holder package which depends on the
                <package>kernel-FLAVOR-devel</package> packages for all
            kernel flavors.</para>
        <para>For more information, refer to the document <quote>Working
                With The SUSE 2.6.x and 3.x Kernel Sources</quote> from
            Andreas Gruenbacher and Michal Marek. This document is provided
            as README.SUSE in the SUSE kernel-source package.</para>
    </sect1>
    <sect1 xml:id="sec-kernel-modules">
        <title>Kernel Modules</title>
        <para>Documentation on general kernel module building can be found
            in abundance on the Internet. Two good lectures are: </para>
        <itemizedlist>
            <listitem>
                <para>Peter Jay Salzman, Michael Burian, Ori Pomerantz: The
                    Linux Kernel Module Programming Guide, <link
                        xlink:href="http://www.tldp.org/LDP/lkmpg/2.6/html/index.html"
                        >http://www.tldp.org/LDP/lkmpg/2.6/html/index.html
                    </link></para>
            </listitem>
            <listitem>
                <para>Jonathan Corbet, Alessandro Rubini, Greg
                    Kroah-Hartman: Linux Device Drivers, Third Edition,
                    February 2005, <link
                        xlink:href="http://www.oreilly.com/catalog/linuxdrive3/"
                        >http://www.oreilly.com/catalog/linuxdrive3/</link>
                    (also available online at <link
                        xlink:href="http://lwn.net/Kernel/LDD3/"
                        >http://lwn.net/Kernel/LDD3/</link>)</para>
            </listitem>
        </itemizedlist>
        <para>SUSE-specific information is found in README.SUSE in the
            kernel-source package.</para>
        <para>When built, kernel module binaries are installed below
                <filename>/lib/modules/VERSION-RELEASE-FLAVOR</filename> on
            the file system (example:
                <filename>/lib/modules/3.0.101-63-default</filename> for
            the <filename>kernel-default-3.0.101-63</filename> package).
            Different kernels have different module directories, and will
            usually not see each others modules.</para>
        <para>Update modules are modules intended to replace or augment the
            modules that are provided in the kernel packages. Update
            modules must be stored below the
                <filename>/lib/modules/VERSION-RELEASE-FLAVOR/updates/</filename>
            directory. Modules in the updates/ directory have precedence
            over other modules with the same name. Never replace modules
            from the kernel package by overwriting files: this would lead
            to inconsistencies between the file system and the RPM
            database.</para>
        <note>
            <title>Where to Store Modules</title>
            <para>Modules intended to take precedence over in-kernel
                modules of the same name should be stored below
                    <filename>/lib/modules/VERSION-RELEASE-FLAVOR/updates/</filename>.
                Other add-on modules can be stored below
                    <filename>/lib/modules/VERSION-RELEASE-FLAVOR/extra/</filename>.</para>
        </note>
        <para>Modules usually remain compatible with a range of
                <package>kernel-FLAVOR</package> packages. To make such
            modules visible to other <package>kernel-FLAVOR</package>
            packages, symbolic links to compatible modules are put in
                <filename>/lib/modules/VERSION-RELEASE-FLAVOR/weak-updates/</filename>
            directories. Modules in the weak-updates/ directory have lower
            priority than modules in the updates/ directory, but higher
            priority than all other modules in
                <filename>/lib/modules/VERSION-RELEASE-FLAVOR</filename>.
            If more than one compatible module is available for a kernel,
            the module with the highest kernel release is chosen. Kernel
            Module Packages must never install modules into weak-updates or
            directories.</para>
        <para>Kernel modules must never be installed as individual files on
            a production system, but always as part of a Kernel Module
            Package.</para>
    </sect1>
    <sect1 xml:id="sec-kernel-module-packages">
        <title>Kernel Module Packages</title>
        <para>SUSE has worked closely with the Linux Foundation Driver
            Backport Workgroup to establish a standard structure for
            building Kernel Module Packages for all RPM-based
            distributions. The information in this document includes the
            standards as appropriate.</para>
        <para>Kernel Module Package spec files define a main package, and a
            sub-package for each kernel flavor supported. The
            kernel-flavor-specific sub-packages are defined with the
            %kernel_module_package rpm macro. The macro automatically
            determines for which kernel flavors to generate sub-packages.
            Several options are available to modify the macro's behavior,
            which are described below: </para>
        <para>
            <emphasis role="strong">%kernel_module_package [-f filelist]
                [-p preamble] [-n name] [-v version] [-r release] [-t
                template] [-x flavor] [-b] [-c
                module-signing-certificate]</emphasis>
        </para>
        <para>The main package of a Kernel Module Package can either
            contain no <emphasis role="strong">%files</emphasis> section,
            in which case <command>rpm</command> will not create a
            binary package with the main package's name, or the files
            section can also be used for the user-space part associated
            with the kernel modules that end up in the kernel specific
            sub-packages. The example Kernel Module Package in Appendix A
            has a main package without a <emphasis role="strong"
                >%files</emphasis> section.</para>
        <para>Kernel Module Packages must adhere to the following
            rules:</para>
        <itemizedlist>
            <listitem>
                <para>The package <emphasis role="strong">Name</emphasis>
                    should consist of two components: a unique provider
                    prefix, and a driver name. Hyphens are disallowed in
                    the provider prefix, and allowed in the driver name.
                    The provider prefix serves to create a non-overlapping
                    name space for all providers.</para>
                <para>The sub-package names are composed of the main
                    package name, followed by a dash, the string
                        <quote>kmp</quote>, followed by another dash and
                    the flavor of the supported kernel. The first component
                    (main package name) can be overridden with a different
                    value by using the <option>-n</option> option of the
                        <emphasis role="strong"
                        >%kernel_module_package</emphasis> macro.</para>
            </listitem>
            <listitem>
                <para>The kernel module package <emphasis role="strong"
                        >Version</emphasis> can have an arbitrary
                    value.</para>
                <para>The sub-package versions are composed of the main
                    package version, followed by an underscore, and the
                    version of the kernel source used during the
                    build.</para>
                <para>Since sub-packages already include the supported
                    kernel's flavor in their name, the flavor is not again
                    included in the sub-package's version. Dashes in the
                    kernel release are replaced by underscores. The first
                    component (main package version) can be overridden with
                    the <option>-v</option> option of the <emphasis
                        role="strong">%kernel_module_package</emphasis>
                    macro.</para>
            </listitem>
            <listitem>
                <para>The kernel module package <emphasis role="strong"
                        >Release</emphasis> can be assigned freely as
                    required. It must be incremented at least once for each
                    package release.</para>
                <para>The sub-package release numbers equal the main
                    package's release number. It can be overridden with the
                        <option>-r</option> option of the <emphasis
                        role="strong">%kernel_module_package</emphasis>
                    macro.</para>
            </listitem>
            <listitem>
                <para>The appropriate <emphasis role="strong"
                        >Requires</emphasis> and <emphasis role="strong"
                        >Provides</emphasis> tags are computed
                    automatically by <command>rpm</command> as
                    described in the RPM Provides and Requires section
                    below. Requires and Provides tags in the spec file will
                    only be effective for the main package.</para>
            </listitem>
            <listitem>
                <para>Kernel modules must be installed below
                        <filename>/lib/modules/VERSION-RELEASE-FLAVOR/updates/</filename>.</para>
            </listitem>
            <listitem>
                <para>Packages must be signed with a public/private key
                    pair, and the public key of the private/public key-pair
                    used for signing must be made known to RPM. See the
                    section <quote>Signing Kernel Module Packages</quote>
                    below for details.</para>
            </listitem>
            <listitem>
                <para>If a kernel module package is intended to support
                    UEFI Secure Boot, the modules in the package must be
                    signed with a private key and the corresponding public
                    key must be provided at package installation time. The
                    macro's <option>-c</option> option provides a way to
                    create a separate package to provide the UEFI
                    certificate with the required public key. Other spec
                    file changes can be included to actually sign the
                    modules. The <option>-c</option> option is available
                    starting with SUSE Linux Enterprise Server 11
                    SP3.</para>
            </listitem>
        </itemizedlist>
        <para>The <emphasis role="strong">%description</emphasis> tag will
            be applied to both the main package and the
            sub-packages.</para>
        <para>The <emphasis role="strong">%kernel_module_package</emphasis>
            macro uses a default sub-package template that should work for
            most Kernel Module Packages. This template can be overridden
            using the macro's <option>-t</option> option. The default
            template takes care of the following:</para>
        <itemizedlist>
            <listitem>
                <para>When a Kernel Module Package package is installed,
                        <command>depmod</command> is called to update
                    module dependency information and various maps.
                    Symbolic links pointing at the new modules are created
                    in other kernels' <filename>weak-modules/</filename>
                    directories for all compatible modules. Initial RAM
                    disks used during booting are re-created automatically
                    if they contain some of the added modules. Using the
                    macro's <option>-b</option> option will force the
                    recreation of the initial RAM disk regardless of
                    whether the existing RAM disk contains modules with the
                    same names as the modules being installed. The
                        <option>-b</option> option is available starting
                    with SUSE Linux Enterprise Server 11 SP2).</para>
            </listitem>
            <listitem>
                <para>When a Kernel Module Package is removed,
                        <command>depmod</command> is called to update
                    module dependency information and various maps. The
                    symbolic links pointing to the modules being removed
                    are removed as well. Initial RAM disks are re-created
                    in case they did contain some of the removed
                    modules.</para>
            </listitem>
        </itemizedlist>
        <para>By default, each kernel-specific sub-package will have the
            following list of files, which can separately be overridden
            with the <option>-f</option> option:</para>
        <screen>%defattr (-,root,root)
/lib/modules/%2-%1</screen>
        <para>Additional sub-package preamble lines such as <emphasis
                role="strong">Requires</emphasis>, <emphasis role="strong"
                >Provides</emphasis>, and <emphasis role="strong"
                >Obsoletes</emphasis> tags can be specified with the
                <option>-p</option> option. File name arguments specified
            in <option>-f</option>, <option>-p</option> and
                <option>-t</option> should be given as absolute path names
            (for example <filename>%_sourcedir/file</filename>) and should
            be listed as sources. The following substitutions are defined
            in those files:</para>
        <itemizedlist>
            <listitem>
                <para>%1 Flavor of the sub-package (for example:
                    default)</para>
            </listitem>
            <listitem>
                <para>%2 Kernel release string without flavor (for example:
                    2.6.27.8-1)</para>
            </listitem>
            <listitem>
                <para>%{-v*} The sub-package version</para>
            </listitem>
            <listitem>
                <para>%{-r*} The sub-package release</para>
            </listitem>
        </itemizedlist>
        <para>Some Kernel Module Packages may make sense only for some of
            the kernel flavors a given architecture supports. A list of
            flavors to exclude from the build should be passed with the
                <emphasis role="strong">-x</emphasis> option to the
                <emphasis role="strong">%kernel_module_package</emphasis>
            macro.</para>
        <para>Appendix A contains an example Kernel Module Package spec
            file and the source code referenced by it. When this spec file
            and its accompanying source is built into an x86_64 RPM as
            described in section <xref linkend="sec-building-kmp"/>, the <emphasis role="strong"
                >BuildRequires</emphasis> tag in the spec file will pull
            the <package>module-init-tools</package>,
                <package>kernel-source</package>,
                <package>kernel-syms</package> and
                <package>kernel-devel</package> packages into the build
            root. </para>
        <note>
            <title>Dependency</title>
            <para>The <emphasis role="strong"
                    >%kernel_module_package_buildreqs</emphasis> macro does
                not need to explicitly list <quote>kernel-source</quote>
                since the <package>kernel-syms</package> package has a
                dependency on the <package>kernel-source</package>
                package.</para>
        </note>
        <para>Now assume that the required packages are available in SUSE
            Linux Enterprise Server 11 SP4 (kernel 3.0.101-63), and that
            the default, trace, and Xen kernel flavors are available on
            that platform. Assuming a release number of <quote>0</quote>,
                <command>rpm</command> would then create the
            following packages:</para>
        <itemizedlist>
            <listitem>
                <para>
                    <package>suse-hello-kmp-default-1.0_3.0.101_63-0.x86_64.rpm</package>
                </para>
            </listitem>
            <listitem>
                <para>
                    <package>suse-hello-kmp-trace-1.0_3.0.101_63-0.x86_64.rpm</package>
                </para>
            </listitem>
            <listitem>
                <para>
                    <package>suse-hello-kmp-xen-1.0_3.0.101_63-0.x86_64.rpm</package>
                </para>
            </listitem>
        </itemizedlist>
        <para>The generated packages would contain the following modules,
            and require and provide the following symbols:</para>
        <table>
            <title>Package Information</title>
            <tgroup cols="4">
                <colspec colwidth="2cm"/>
                <colspec colwidth="2.4*"/>
                <colspec colwidth="2.7*"/>
                <colspec colwidth="1.5*"/>
                <thead>
                    <row>
                        <entry>Package</entry>
                        <entry>Requires</entry>
                        <entry>Provides</entry>
                        <entry>Modules</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>suse-hello-kmp-default</entry>
                        <entry>
                            <para>kernel(default:kernel_printk) =
                                f06347de1657cfa8</para>
                            <para>...</para>
                        </entry>
                        <entry>
                            <para>suse-hello-kmp = 1.0_3.0.101_63
                                ksym(default:exported_function) =
                                e52d5bcf</para>
                            <para>suse-hello-kmp-default =
                                1.0_3.0.101_63-0</para>
                        </entry>
                        <entry>/lib/modules/ 3.0.101-63-default/
                            updates/hello.ko</entry>
                    </row>
                    <row>
                        <entry>suse-hello-kmp-trace</entry>
                        <entry>
                            <para>kernel(trace:kernel_printk) =
                                7a87f1ab614120c0</para>
                            <para>...</para>
                        </entry>
                        <entry>
                            <para>suse-hello-kmp = 1.0_3.0.101_63
                                ksym(trace:exported_function) =
                                e52d5bcf</para>
                            <para>suse-hello-kmp-trace =
                                1.0_3.0.101_63-0</para>
                        </entry>
                        <entry>/lib/modules/ 2.6.27.8_1.0-trace/
                            updates/hello.ko</entry>
                    </row>
                    <row>
                        <entry>suse-hello-kmp-xen</entry>
                        <entry>
                            <para>kernel(xen:kernel_printk) =
                                69e7f9b015806194</para>
                            <para>...</para>
                        </entry>
                        <entry>
                            <para>suse-hello-kmp = 1.0_3.0.101_63
                                ksym(xen:exported_function) =
                                e52d5bcf</para>
                            <para>suse-hello-kmp-xen =
                                1.0_3.0.101_63-0</para>
                        </entry>
                        <entry>/lib/modules/ 2.6.27.8_1.0-xen/
                            updates/hello.ko</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <title><quote>k</quote> Character</title>
            <para>KMPs built for SUSE Linux Enterprise Server 12 releases
                will include the “k” character before the kernel version in
                the KMP version string. As an example, the
                suse-hello-kmp-default package built for SUSE Linux
                Enterprise Server 12 SP2 (kernel 4.4.21-69) would have the
                full file name
                suse-hello-kmp-default-k4.4.21_69-0.x86_64.rpm.</para>
        </note>
    </sect1>
    <sect1 xml:id="sec-provides-requires">
        <title>RPM Provides and Requires</title>
        <para>Kernels export symbols that kernel modules use. Symbols have
            version checksums attached, and the checksums of the exported
            kernel symbols must match the checksums of the kernel symbols
            that the kernel module package uses. In SUSE Linux Enterprise
            Server 11 releases, kernels do not provide each kernel symbol
            individually; instead they group symbols together into classes
            (called <quote>symsets</quote>) and provide checksums of these
            classes. </para>
        <note>
            <title>Number of Classes</title>
            <para>The number of classes is much smaller than the full
                number of symbols provided by the kernel.</para>
        </note>
        <para>Similarly, SUSE Linux Enterprise Server 11 Kernel Module
            Packages require checksums for classes rather than for
            individual symbols. In SUSE Linux Enterprise Server 12
            releases, kernels provide checksums for each individual symbol.
            Therefore, SUSE Linux Enterprise Server 12 Kernel Module
            Packages require checksums for individual symbols.</para>
        <para>When modules in Kernel Module Packages export additional
            symbols, such symbols are mapped to per-symbol <emphasis
                role="strong">Provides</emphasis> of those packages.
            Modules in other Kernel Module Packages can require those
            symbols; they would also do so on a per-symbol basis. As an
            example, assume that a Kernel Module Package provides an
            exported function as <emphasis role="italic">ksym(default:exported_function)
                = e52d5bcf</emphasis>. Any Kernel Module Package that uses
            this function would require this same symbol and
            checksum.</para>
    </sect1>
    <sect1 xml:id="sec-building-kmp">
        <title>Building Kernel Module Packages</title>
        <para>In addition to the C and kernel programming skills required
            for writing the kernel module source code, creating proper
            Kernel Module Packages requires some familiarity with
                <command>rpm</command> and with build environments.
            For more information on kernel module building refer to the
            above-mentioned <quote>Linux Kernel Module Programming
                Guide</quote> and the <quote>Linux Device Drivers</quote>
            book. Additional SUSE-specific kernel and kernel module
            information can be found in the README.SUSE in the
            kernel-source package. SUSE recommends using the example
            package found in Appendix A as a template to reduce the
            complexities related to <command>rpm</command>. A lot
            of additional information on <command>rpm</command> can
            be found at <link xlink:href="http://www.rpm.org/"
                >http://www.rpm.org/</link>, including a reference to the
            excellent Maximum RPM.</para>
        <para>SUSE strongly recommends using the kernel build
            infrastructure (kbuild) for building and installing the kernel
            modules, as done in the example package. Kbuild is documented
            in /usr/src/linux/Documentation/kbuild/ from the kernel-source
            package. Trying to emulate kbuild will lead to various problems
            including mis-compilations and missing or wrong symbol
            versions, and increased support load because of subtle
            breakages.</para>
        <para>To achieve consistent and reproducible builds in a defined
            environment independent of the software installed on the system
            used for building, use the build script from the
                <package>build.rpm</package> package. This script sets up a
            build environment from the RPM packages the script is pointed
            at. The packages are then built in this environment using
                <command>chroot</command> (see the chroot(1) manual
            page). All SUSE packages are built using the same mechanism.
            When building Kernel Module Packages with
                <package>build.rpm</package>, the following options of the
            build script are particularly relevant:</para>
        <bridgehead>--root <emphasis role="italic"
            >directory</emphasis></bridgehead>
        <para>Define the directory in which to set up the build
            environment. Defaults to the BUILD_ROOT environment variable,
            and to <filename>/var/tmp/build-root</filename> if
            unset.</para>
        <bridgehead>--RPMs <emphasis role="italic"
                >path1</emphasis>[:<emphasis role="italic"
            >path2</emphasis>:...]</bridgehead>
        <para>Define where build will look for packages for constructing
            the build environment. The directories are searched
            recursively. Packages found earlier in the path have precedence
            over packages found later, similar to how the PATH environment
            variable works. Defaults to the BUILD_RPMS environment
            variable, and to <filename>/media/dvd/suse</filename> if unset.
            The <option>--rpms</option> option must only be specified
            once.</para>
        <bridgehead>--clean, --no-init</bridgehead>
        <para>Reconstruct the build environment entirely from scratch
                (<option>--clean</option>), or start the build without
            initializing the build environment
            (<option>--no-init</option>), which skips checking whether all
            packages in the build environment are up-to-date.</para>
        <para>Build stores the created packages below
                <filename>usr/src/packages/</filename> in the build
            environment.</para>
        <para>On dual-architecture machines, packages for the other
            supported architecture can be built by running the build script
            inside an architecture selector. On x86_64, the selector is
            called linux32, on ppc64 this is ppc32, and on s390x the
            selector is called s390. The same build environment cannot be
            reused for different architectures unless it is reinitialized
            with build's <option>--clean</option> option.</para>
        <para>See the build(1) manual page for further information.</para>
        <note>
            <title>Building External Modules</title>
            <para>For building external modules, you need to have both the
                kernel-source and kernel-&lt;flavor>-devel packages
                installed in the build environment. The BuildRequires line
                in spec files takes care of this: the <emphasis
                    role="strong"
                    >%kernel_module_package_buildreqs</emphasis> macro
                specifies the kernel-syms package, which pulls in the
                kernel-source package and the kernel-&lt;flavor>-devel
                packages because of its dependency on them. Note that
                without the kernel-syms the module build can still succeed
                depending on how you do the build, but the resulting
                modules will have module symbol versions disabled. Kernel
                Module Packages without module symbol versions will appear
                to match any kernel although in fact they do not. This can
                easily lead to very hard-to-diagnose system
                malfunctions.</para>
        </note>
    </sect1>
    <sect1 xml:id="sec-signing">
        <title>Signing</title>
        <para>Signing (as applied to a piece of software) is the process of
            digitally tagging the software to verify the author and
            guarantee that the software has not been altered since it was
            signed. SUSE Linux Enterprise Server and SUSE Linux Enterprise
            Desktop include utilities to sign and validate signatures on
            packages and repositories. In addition, SUSE Linux Enterprise
            Server and SUSE Linux Enterprise Desktop 11 SP3 and later
            versions include technology to sign and validate signatures on
            kernel modules.</para>
        <para>The following sections describe how to sign packages and
            kernel modules. The topic of repository signing is beyond the
            scope of this document.</para>
        <sect2 xml:id="sec-signing-packages">
            <title>Signing Packages</title>
            <para>All packages that are provided in SUSE Linux Enterprise
                Server and SUSE Linux Enterprise Desktop are digitally
                signed with the SUSE Build key. SolidDriver/PLDP packages
                that are built on the SolidDriver Build Server by the SUSE
                SolidDriver team are automatically signed with the SUSE
                SolidDriver/PLDP key (see <link
                    xlink:href="https://drivers.suse.com/doc/Usage/Package_Signing_Key.html#package-signing-key"
                    >https://drivers.suse.com/doc/Usage/Package_Signing_Key.html#package-signing-key</link>
                ). Partners who build and/or provide their own packages are
                encouraged to sign them with their own keys. </para>
            <para>To sign packages, a private/public key pair must be
                installed on the GNU Privacy Guard (GPG) keyring of the
                signing user (see the <option>--gen-key</option> option in
                the gpg(1) manual page at <link
                    xlink:href="https://linux.die.net/man/1/gpg"
                    >https://linux.die.net/man/1/gpg</link>). Then the
                following command can be used to sign a package (replace
                build@suse.com with the identity that identifies your
                signing key):</para>
            <screen>$ rpm --eval “%define _signature gpg” \
      --eval “%define _gpg_name build@suse.com” \
      --addsign package.rpm</screen>
            <para>Note that a package can only be signed once. Another
                    <option>--addsign</option> operation will replace an
                existing old signature, and will add the new one.</para>
            <para>The public key used for signing must then be exported
                into a file with the command:</para>
            <screen>$ gpg --armor --export build >build-pubkey.txt</screen>
            <para>Then, import the key into the RPM database with the
                command:</para>
            <screen>$ rpm --import build-pubkey.txt</screen>
            <para>You can verify that both package signing and key import
                have succeeded with RPM's <option>--checksig</option>
                option (note the <quote>gpg</quote> in the output):</para>
            <screen>$ rpm --checksig package.rpm
package.rpm: (sha1) dsa sha1 md5 gpg OK</screen>
            <para>The public key exported to
                    <filename>build-pubkey.txt</filename> must be delivered
                to customers in a way that they will trust. It must be
                imported into the RPM database on systems on which the
                signed packages are to be installed.</para>
        </sect2>
        <sect2 xml:id="sec-signing-module-object">
            <title>Signing Module Object Files <emphasis role="italic"
                    >(UEFI Secure Boot)</emphasis></title>
            <para>Although using signed packages and other OS security
                features can secure an installed and running system, they
                cannot prevent system subversion before the OS has booted.
                To address pre-OS security concerns, the UEFI 2.2 Secure
                Boot specification (see <link
                    xlink:href="http://www.uefi.org/specs "
                    >http://www.uefi.org/specs</link>) details a protocol
                to prevent the loading of boot loaders or kernels
                (including modules) that are not signed with an approved
                digital key stored in the system firmware.</para>
            <para>The UEFI Secure Boot specification allows for variation
                in implementation. A simple way to implement secure boot is
                to ensure that the base system (as provided by the system
                vendor) contains all the keys that will be used by the boot
                loader, the OS, and any drivers. But having the system
                vendor simply place all needed keys into the firmware is
                not a full solution, as it does not give appropriate
                control to the system user/owner. SUSE's secure boot
                implementation addresses this control issue by extending
                the secure-boot-enabled EFI shim loader to accept keys that
                have been approved by the system owner. Thus, if there is a
                need to load a module with an unrecognized key, the key can
                be added to the <quote>approved key</quote> database
                (reboot and system-owner approval required).</para>
            <note>
                <title>Module Without Signature</title>
                <para>If a module has no signature, it cannot be loaded on
                    a secure-boot-enabled system. Users who wish to load
                    unsigned modules on SUSE Linux Enterprise Server/SUSE
                    Linux Enterprise Desktop 11 SP3 or later versions must
                    disable secure boot.</para>
            </note>
            <sect3 xml:id="sec-creating-key">
                <title>Creating a Key and Certificate</title>
                <para>There are several ways to sign modules, but all
                    methods require providing a key and certificate.
                    Official keys and certificates can be provided by an
                    organization's security team or by build services (such
                    as the Open Build Service or the SolidDriver/PLDP Build
                    Service). Developers and packagers can also generate
                    their own keys and certificates for testing purposes.
                    To create a key and certificate using the
                        <command>openssl req</command> command, type the
                    following:</para>
                <screen>export USER="your company name"
openssl req -new -x509 -newkey rsa:2048 -sha256 -keyout key.asc -out cert.der \
            -outform der -nodes -days 4745 -subj "/CN=$USER/"</screen>
                <para>The above sequence of commands will create a
                        <filename>key.asc</filename> key file and a
                        <filename>cert.der</filename> x509 certificate in
                    the current working directory. The
                        <option>4745</option> option generates a
                    certificate which will be valid for 13 years.</para>
            </sect3>
            <sect3 xml:id="sec-sign-existing-kmp">
                <title>Signing an Existing KMP</title>
                <para>The <package>pesign-obs-integration</package> package
                    in SUSE Linux Enterprise Server 11 SP3 and later
                    versions provides a
                        <command>modsign-repackage</command> utility that
                    can be used to sign kernel modules in an existing KMP.
                        <command>modsign-repackage</command> unpacks the
                    original RPM, signs any included modules and re-creates
                    the RPM. It also creates a second
                        <package>&lt;name>-ueficert</package> RPM that
                    installs the certificate and calls the
                        <command>mokutil</command> utility to enroll the
                    public key. The re-packaged RPM will have a dependency
                    on the <package>&lt;name>-ueficert</package> RPM,
                    ensuring that the certificates will be installed at the
                    same time as the module(s).</para>
                <para>To use <command>modsign-repackage</command> with the
                        <emphasis role="strong">key.asc</emphasis> key and
                    the <emphasis role="strong">cert.der</emphasis>
                    certificate created above to repackage a
                        <package>./suse-hello-kmp-default-1.0_3.0.101_63-0.x86_64.rpm</package>
                    package, do the following:</para>
                <screen>modsign-repackage -c ./cert.der -k ./key.asc ./suse-hello-kmp-default-1.0-3.0.101_63-0.x86_64.rpm</screen>
                <para>The above command will create the following
                    directories and files in the current working
                    directory:</para>
                <screen>    ./RPMS/
      x86_64/
          suse-hello-kmp-default-1.0-3.0.101_63-0.x86_64.rpm
          suse-hello-ueficert-1.0-0.x86_64.rpm</screen>
            </sect3>
            <sect3 xml:id="sec-signing-packaging">
                <title>Signing Modules During Packaging</title>
                <para>Signing modules as part of the packaging process
                    requires making a few changes to the KMP spec file
                    template. The spec file template in Appendix A includes
                    these changes along with conditionals to ensure that
                    the changes will apply only when building KMPs for SUSE
                    Linux Enterprise Server or SUSE Linux Enterprise
                    Desktop 11 SP3 or later versions. The changes
                    are:</para>
                <orderedlist>
                    <listitem>
                        <para>List the certificate file as a <emphasis
                                role="strong">%Source</emphasis> file. The
                            top-level directory of the build structure
                            (where the spec file is located) should include
                            both a private key file and a certificate file.
                            The spec file should list the certificate as a
                                <emphasis>%Source</emphasis> file. The spec
                            file should not list the key file (since the
                            private key should not be included in the
                            source KMP).</para>
                        <note>
                            <title>Naming</title>
                            <para>To be recognized by the kernel Makefile,
                                the key file must be named
                                    <quote>signing_key.priv</quote> and the
                                certificate file must be named
                                    <quote>signing_key.x509</quote>. The
                                example above describes how to use the
                                    <command>openssl req</command> command
                                to create a <filename>key.asc</filename>
                                key file and a
                                    <filename>cert.der</filename>
                                certificate file; to use these files at
                                packaging-time, they should be renamed to
                                    <quote>signing_key.priv</quote> and
                                    <quote>signing_key.x509</quote>.</para>
                        </note>
                    </listitem>
                    <listitem>
                        <para>Add code to determine the build target's
                            service pack level. This is done by adding the
                                <package>sles-release</package> (or
                                <package>sled-release</package>) package to
                                <emphasis role="strong"
                                >%BuildRequires</emphasis> and then
                            defining a <emphasis role="strong"
                                >%sle_version</emphasis> macro based on the
                            contents of the
                                <filename>/etc/SuSE-release</filename>
                            file.</para>
                    </listitem>
                    <listitem>
                        <para>For SUSE Linux Enterprise Server 11 SP3 and
                            later versions, invoke the <emphasis
                                role="strong"
                                >%kernel_module_package</emphasis> macro
                            with the <option>-c
                                %_sourcedir/signing_key.x509</option>
                            option to specify the certificate (and thus the
                            key) to use in signing. Using the
                            kernel_module_package <option>-c</option>
                            option does not cause any module signing; it
                            simply ensures the creation of a
                                <package>&lt;name>-ueficert</package>
                            package which installs the certificate and
                            calls the <command>mokutil</command> utility to
                            enroll the public key. The actual module
                            signing is handled in the <emphasis
                                role="strong">%install</emphasis> section
                            of the spec file.</para>
                    </listitem>
                    <listitem>
                        <para>For SUSE Linux Enterprise Server 11 SP3 and
                            later versions, add <emphasis role="strong"
                                >%install</emphasis> section code to ensure
                            that the modules will get signed. This is done
                            by setting the CONFIG_MODULE_SIG_ALL kernel
                            configuration parameter. When
                            CONFIG_MODULE_SIG_ALL is set, the <command>make
                                modules_install</command> step
                            automatically includes module signing.</para>
                    </listitem>
                </orderedlist>
                <note>
                    <title>Own Keys and Certificates</title>
                    <para>The Appendix A sample spec file is designed to be
                        used by developers and packagers who provide their
                        own keys and certificates. Partners who use the
                        Open Build Service will not need to provide keys
                        and certificates and thus should use the spec file
                        in Appendix A.1.</para>
                </note>
            </sect3>
            <sect3 xml:id="sec-secure-boot-kmp">
                <title>Installation of Secure-boot-enabled KMPs</title>
                <para>As discussed above, secure-boot-enabled KMPs include
                    an additional <package>&lt;name>-ueficert</package>
                    package to install the certificate and enroll the
                    public key. The
                        <package>&lt;name>-kmp-&lt;flavor></package>
                    packages require the
                        <package>&lt;name>-ueficert</package>
                    package.</para>
                <para>After the <package>&lt;name>-ueficert</package>
                    package is installed, the system must be rebooted and
                    the newly-enrolled key approved by the system owner
                    before the key (and thus the signed modules) can be
                    used.</para>
                <para>The <command>mokutil</command> utility can also be
                    used on its own to view and manage keys in the key
                    database.</para>
            </sect3>
        </sect2>
    </sect1>
    <sect1 xml:id="sec-deploying-kmp">
        <title>Deploying Kernel Module Packages</title>
        <para>Kernel Module Packages can be distributed on Driver Update
            Disks, as add-on products, in full Bootable Driver
            Kits/Installation Kits, or simply as stand-alone RPMs.</para>
        <para>If a Kernel Module Package's driver is required to boot an
            installation kernel, the Kernel Module Package should be
            provided on a Driver Update Disk (DUD) or in a Bootable Driver
            Kit/Installation Kit. Otherwise, it is recommended to provide
            Kernel Module Packages as add-on products complete with URL(s)
            for functioning update sites.</para>
    </sect1>
    <sect1 xml:id="sec-installation-and-kmp">
        <title>System Installation and Kernel Module Packages</title>
        <para>Initial system installation is carried out by YaST from some
            installation media (CDs or DVDs, network locations, etc.). As
            noted above, support for additional hardware that the
            installation media do not provide can be added with Driver
            Update Disks or Bootable Driver Kits/Installation Kits. This is
            most important to enable hardware needed for booting, such as
            storage controllers.</para>
        <para>Update media such as Driver Update Disks and Bootable Driver
            Kits/Installation Kits provide two kinds of modules: those
            which the kernel that runs the installation uses, and those
            which are installed onto the final target system. Both types of
            modules are provided by including Kernel Module Packages on the
            update media. In addition, update media can contain scripts
            which are run at specific times during the installation. The
            <quote>Update Media HOWTO</quote> at <link
                xlink:href="ftp://ftp.suse.com/pub/people/hvogel/Update-Media-HOWTO"
                >ftp://ftp.suse.com/pub/people/hvogel/Update-Media-HOWTO</link>
            describes in more detail what a Driver Update Disk must contain
            to work.</para>
        <para>After the initial YaST installation, additional driver
            packages can be installed using any of the mechanisms for
            installing RPM packages (YaST Add-on Products, YaST Software
            Management, YaST Online Update, the <command>rpm</command>
            command, etc.). The add-on product format supports the ability
            to register the system for an update site.</para>
        <note>
            <title>initrd</title>
            <para>Any drivers required for getting to and accessing the
                root file system must be part of the initial RAM disk
                (initrd). YaST will automatically include necessary kernel
                modules in the initrd created during installation. But when
                Kernel Module Packages are installed by hand or updated, it
                can be necessary to explicitly rebuild the initrd to
                include the new modules. A Kernel Module Package will
                automatically rebuild the initrd in its <emphasis
                    role="strong">%postinstall</emphasis> script if the
                module being installed is already part of the existing
                initrd or if the <option>-b</option> option to the
                    <emphasis role="strong"
                    >%kernel_module_package</emphasis> macro is
                used.</para>
            <para>The <option>-b</option> option simply forces an initrd
                rebuild using the existing initrd configuration: If the
                existing initrd configuration (for example, the <emphasis
                    role="strong">/etc/sysconfig/kernel
                    INITRD_MODULES</emphasis> variable) does not include
                the module being installed, then simply using the
                    <option>-b</option> option will not include the new
                module in the new initrd. In such cases, the Kernel Module
                Package also needs to make appropriate initrd configuration
                changes (such as updating INITRD_MODULES) to include the
                new module. </para>
        </note>
    </sect1>
    <sect1 xml:id="sec-kernel-updates">
        <title>Kernel Updates and Kernel Module Packages</title>
        <para>After all software repositories that should be checked for
            updates have been added, the package manager will automatically
            detect when new kernel packages and new Kernel Module Packages
            become available. The dependencies between those packages will
            ensure that the installed kernel packages match the installed
            Kernel Module Packages.</para>
    </sect1>
    <sect1 xml:id="sec-appendix-a">
        <title>Appendix A: Sample Source for <package>suse-hello</package>
            Kernel Module Package</title>
        <para>The following sample is described in the section <xref
                linkend="sec-kernel-module-packages"></xref>. The spec file includes conditional code
            that will build secure-boot-enabled packages for SUSE Linux
            Enterprise Server 11 SP3 and later versions and
            non-secure-boot-enabled packages for SUSE Linux Enterprise
            Server 11 – SUSE Linux Enterprise Server 11 SP2. The
            conditional code is shown in bold and can be removed if there
            is no need to build secure-boot-enabled packages.</para>
        <para>When using the sample to build secure-boot-enabled packages,
            the build structure must also include
                <filename>signing_key.priv</filename> and
                <filename>signing_key.x509</filename> files as described in
            the <xref linkend="sec-signing-packaging"></xref> section above. The
                <filename>signing_key.*</filename> files must be located in
            the same directory as the spec file.</para>
        <para>
            <emphasis role="strong">suse-hello.spec</emphasis>
        </para>
        <screen># norootforbuild

Name:			suse-hello
BuildRequires:	%kernel_module_package_buildreqs
<emphasis role="strong"># Required to support secure-boot:  Include sles-release in order to determine
# service-pack version
BuildRequires:	sles-release</emphasis>
License:		GPL
Group:		System/Kernel
Summary:		Sample Kernel Module Package
Version:		1.0
Release:		0
Source0:		%{name}-%{version}.tar.bz2
<emphasis role="strong"># Required to support secure-boot:  Include certificate named “signing_key.x509”
# Build structure should also include a private key named “signing_key.priv”
# Private key should not be listed as a source file
Source1:		signing_key.x509</emphasis>
BuildRoot:		%{_tmppath}/%{name}-%{version}-build

<emphasis role="strong"># Required to support secure-boot:  Determine service-pack level
%define sle_version %(tr '\\n' ' ' &lt; /etc/SuSE-release | sed -rn 's/^SUSE Linux
Enterprise ([A-z]+) ([0-9]+).*PATCHLEVEL = ([0-9]+).*$/\\2\\3/p')</emphasis>

<emphasis role="strong"># Required to support secure-boot:  The -c option tells the macro to generate a
# suse-hello-ueficert subpackage that enrolls the certificate
%if 0%{?sle_version} > 112
%kernel_module_package -c %_sourcedir/signing_key.x509
%else</emphasis>
%kernel_module_package
<emphasis role="strong">%endif</emphasis>

%description
This package contains the hello.ko module.

%prep
%setup
<emphasis role="strong"># Required to support secure-boot:  Copy the signing key to the build area
%if 0%{?sle_version} > 112
cp %_sourcedir/signing_key.* .
%endif</emphasis>
set -- *

mkdir source
mv "$@" source/
mkdir obj

%build
for flavor in %flavors_to_build; do
rm -rf obj/$flavor
cp -r source obj/$flavor
make -C %{kernel_source $flavor} modules M=$PWD/obj/$flavor
done

%install
export INSTALL_MOD_PATH=$RPM_BUILD_ROOT
export INSTALL_MOD_DIR=updates
for flavor in %flavors_to_build; do
     <emphasis role="strong"># Required to support secure-boot:  By default, kernel modules are not
      # signed by make. The CONFIG_MODULE_SIG_ALL=y setting overrides this for
      # flavors with module signing enabled.
      unset CONFIG_MODULE_SIG_ALL
      if grep '^CONFIG_MODULE_SIG=y' %{kernel_source $flavor}/.config; then
         export CONFIG_MODULE_SIG_ALL=y
      fi </emphasis>
      make -C %{kernel_source $flavor} modules_install M=$PWD/obj/$flavor
done

%changelog
* Fri Apr 27 2017 – andavis@suse.com
- Typo fixes; remove excluded flavors from kernel_module_package macro line
* Wed Apr 24 2013 - mmarek@suse.cz
- Sign the module by a supplied keypair.
* Tue Dec 22 2008 - andavis@suse.com
- Updated to reflect CODE 11 changes and LF standard spec file work.
* Sat Jan 28 2006 - agruen@suse.de
- Initial package.</screen>
        <para>The following two files should be compressed to form the
                <filename>suse-hello-1.0.tar.bz2</filename> TAR archive
            referenced as Source0 in the
                <filename>suse-hello.spec</filename> file above.</para>
        <para>
            <emphasis role="strong">suse-hello-1.0/Kbuild</emphasis>
        </para>
        <screen>obj-m		:= hello.o
hello-y	+= main.o</screen>
        <para>
            <emphasis role="strong">suse-hello-1.0/main.c</emphasis>
        </para>
        <screen>/*
 * main.c - A demo kernel module.
 *
 * Copyright (C) 2003, 2004, 2005, 2006
 * Andreas Gruenbacher &lt;agruen@suse.de>, SUSE Labs
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * A copy of the GNU General Public License can be obtained from
 * http://www.gnu.org/.
 */

#include &lt;linux/module.h>
#include &lt;linux/init.h>

MODULE_AUTHOR("Andreas Gruenbacher &lt;agruen@suse.de>");
MODULE_DESCRIPTION("Hello world module");
MODULE_LICENSE("GPL");

int param;

module_param(param, int, 0);
MODULE_PARM_DESC(param, "Example parameter");

void exported_function(void)
{
        printk(KERN_INFO "Exported function called.\n");
}
EXPORT_SYMBOL_GPL(exported_function);

int __init init_hello(void)
{
        printk(KERN_INFO "Hello world.\n");
        return 0;
}

void __exit exit_hello(void)
{
        printk(KERN_INFO "Goodbye world.\n");
}

module_init(init_hello);
module_exit(exit_hello);</screen>
    </sect1>
    <sect1 xml:id="sec-appendix-a1">
        <title>Appendix A.1: Sample Spec File for Use with SUSE Build
            Services</title>
        <para>Packagers who use the Open Build Service (see <link
                xlink:href="https://build.opensuse.org/"
                >https://build.opensuse.org/</link>) to create KMPs can
            take advantage of the fact that this build service provides
            keys and certificates for package and module signing. The
            following spec file can be used in the Open Build Service to
            build secure-boot-enabled KMPs for SUSE Linux Enterprise Server
            and SUSE Linux Enterprise Desktop 11 SP3 and later versions. It
            can also be used to build non-secure-boot-enabled KMPs for all
            versions from SUSE Linux Enterprise Server and SUSE Linux
            Enterprise Desktop 11 up to SUSE Linux Enterprise Server and
            SUSE Linux Enterprise Desktop 11 SP2. The secure-boot
            conditional code is emphasized in bold.</para>
        <para>A sample package similar to this one is available in the Open
            Build Service at <link
                xlink:href="https://build.opensuse.org/package/show/home:andavis:PLDP/suse-hello-1.0"
                >https://build.opensuse.org/package/show/home:andavis:PLDP/suse-hello-1.0</link>
        </para>
        <para>
            <emphasis role="strong">suse-hello.spec</emphasis>
        </para>
        <screen><emphasis role="strong"># The following line tells the buildservice to save the project certificate as
# %_sourcedir/_projectcert.crt

# needssslcertforbuild</emphasis>

Name:			suse-hello
BuildRequires:	%kernel_module_package_buildreqs
<emphasis role="strong"># Required to support secure-boot:  Include sles-release in order to determine
# service-pack version
BuildRequires:	sles-release</emphasis>
License:		GPL
Group:		    System/Kernel
Summary:		Sample Kernel Module Package
Version:		1.0
Release:		0
Source0:		%{name}-%{version}.tar.bz2
BuildRoot:		%{_tmppath}/%{name}-%{version}-build

<emphasis role="strong"># Required to support secure-boot:  Determine service-pack level
%define sle_version %(tr '\\n' ' ' &lt; /etc/SuSE-release | sed -rn 's/^SUSE Linux
Enterprise ([A-z]+) ([0-9]+).*PATCHLEVEL = ([0-9]+).*$/\\2\\3/p')</emphasis>

<emphasis role="strong"># Required to support secure-boot:  The -c option tells the macro to generate a
# suse-hello-ueficert supackage that enrolls the certificate
# The _projectcert.crt certificate is provided by the build service
%if 0%{?sle_version} > 112
%kernel_module_package -c %_sourcedir/_projectcert.crt
%else</emphasis>
%kernel_module_package
<emphasis role="strong">%endif</emphasis>

%description
This package contains the hello.ko module.

%prep
%setup
set -- *
mkdir source
mv "$@" source/
mkdir obj

%build
for flavor in %flavors_to_build; do
      rm -rf obj/$flavor
      cp -r source obj/$flavor
      make -C %{kernel_source $flavor} modules M=$PWD/obj/$flavor
done

%install
export INSTALL_MOD_PATH=$RPM_BUILD_ROOT
export INSTALL_MOD_DIR=updates
for flavor in %flavors_to_build; do
      make -C %{kernel_source $flavor} modules_install M=$PWD/obj/$flavor
done

<emphasis role="strong"># The BRP_PESIGN_FILES variable must be set to a space separated list of
# directories or patterns matching files that need to be signed.  E.g., packages
# that include firmware files would set BRP_PESIGN_FILES='*.ko /lib/firmware'
export BRP_PESIGN_FILES='*.ko'</emphasis>

%changelog
* Fri Apr 27 2017 – andavis@suse.com
- Typo fixes; remove excluded flavors from kernel_module_package macro line.
* Wed Apr 24 2013 - mmarek@suse.cz
- Sign the module by a supplied keypair.
* Tue Dec 22 2008 - andavis@suse.com
- Updated to reflect CODE 11 changes and LF standard spec file work.
* Sat Jan 28 2006 - agruen@suse.de
- Initial package.</screen>
    </sect1>
    <sect1 xml:id="sec-appendix-b">
        <title>Appendix B: Changes, Updates and References</title>
        <sect2 xml:id="sec-code10-to-code11">
            <title>Code 10 to Code 11 Notes for Kernel Module
                Packagers</title>
            <para>Following is a brief list of CODE 10 to CODE 11 changes
                which can affect kernel module packagers</para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="italic">Kernel packages</emphasis>: </para>
                    <itemizedlist>
                        <listitem>
                            <para>The Code 11 kernel is provided via two
                                packages:
                                    <package>kernel-FLAVOR-base</package>
                                and <package>kernel-FLAVOR</package>.
                                    <package>kernel-FLAVOR</package> is
                                dependent on
                                    <package>kernel-FLAVOR-base</package>.
                                Both packages are required to provide
                                checksums for all the kernel symbol
                                groups.</para>
                        </listitem>
                        <listitem>
                            <para>Code 11 automatically installs the
                                    <emphasis role="strong">-pae</emphasis>
                                kernel flavor for 32-bit pae-enabled
                                systems.</para>
                        </listitem>
                        <listitem>
                            <para>The Code 11
                                    <package>kernel-source</package>
                                package does not include the sample Kernel
                                Module Package source provided in Appendix
                                A.</para>
                        </listitem>
                        <listitem>
                            <para>Kernel packages in SUSE Linux Enterprise
                                Server 12 or SUSE Linux Enterprise Desktop
                                12 (including all service packs) provide
                                checksums for individual symbols rather
                                than for groups of symbols
                                (symsets).</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="italic">Kernel module
                            packages</emphasis>:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Starting with SUSE Linux Enterprise
                                Server 11 SP3 or SUSE Linux Enterprise
                                Desktop 11 SP3, kernel module packages can
                                contain modules that have been signed in
                                order to support UEFI Secure Boot.</para>
                        </listitem>
                        <listitem>
                            <para>Kernel Module Packages built for SUSE
                                Linux Enterprise Server 12 or SUSE Linux
                                Enterprise Desktop 12 (including all
                                service packs) require checksums for
                                individual symbols rather than for groups
                                of symbols (symsets).</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="italic">Package and file
                            locations</emphasis>:</para>
                    <itemizedlist>
                        <listitem>
                            <para>In Code 11, several packages have been
                                moved from the base SUSE Linux Enterprise
                                Server product to the SUSE Linux Enterprise
                                SDK. Developers building Kernel Module
                                Packages on Code 11 will need to include
                                the SDK in their build environment to
                                ensure that all build-time package
                                dependencies are resolved.</para>
                        </listitem>
                        <listitem>
                            <para>In Code 11, the RPM macros used to build
                                Kernel Module Packages are provided in the
                                    <package>kernel-source</package>
                                package (instead of the RPM package) and
                                installed under
                                    <filename>/etc/rpm</filename> and
                                    <filename>/usr/lib/rpm</filename>.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="italic">RPM macro
                            changes</emphasis>:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Code 11 includes RPM macros to facilitate
                                creating Kernel Module Package build
                                structures that support multiple RPM-based
                                distributions. The spec file template in
                                Appendix A includes these macros:</para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="strong"/>
                                     %kernel_module_package_buildreqs -
                                     used for
                                     <quote>BuildRequires</quote>.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="strong"
                                     >%kernel_module_package</emphasis> -
                                     used instead of <emphasis
                                     role="strong">
                                     %suse_kernel_module_package</emphasis>
                                     (keep in mind that the options are
                                     slightly different: with <emphasis
                                     role="strong">
                                     %kernel_module_package</emphasis>,
                                     <option>-x</option> is used to exclude
                                     flavors from the build, and
                                     <option>-t</option> replaces
                                     <option>-s</option> as the option to
                                     override the default sub-package
                                     template. See section <xref
                                     linkend="sec-kernel-module-packages"
                                     ></xref> for a
                                     complete description of all <emphasis
                                     role="strong"
                                     >%kernel_module_package</emphasis>
                                     options.)</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="strong"
                                     >%kernel_source</emphasis> – used with
                                     the <option>$flavor</option> argument
                                     to specify the location of the
                                     top-level kernel Makefile.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>Starting with SUSE Linux Enterprise
                                Server 11 SP2 or SUSE Linux Enterprise
                                Desktop 11 SP2, the <emphasis role="strong"
                                    >%kernel_module_package</emphasis>
                                macro includes a <option>-b</option> option
                                that can be used to force initial RAM disk
                                creation when a KMP is installed.</para>
                        </listitem>
                        <listitem>
                            <para>Starting with SUSE Linux Enterprise
                                Server/SUSE Linux Enterprise Desktop 11
                                SP3, the <emphasis role="strong"
                                    >%kernel_module_package
                                    macro</emphasis> includes a <option>-c
                                    &lt;module-signing-certificate></option>
                                option that can be used when building
                                secure-boot-enabled packages.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </sect2>
        <sect2 xml:id="sec-doc-updates">
            <title>Documentation Updates</title>
            <para>April 27, 2017 – andavis@suse.com</para>
            <itemizedlist>
                <listitem>
                    <para>Update to incorporate SUSE Linux Enterprise
                        Server/SUSE Linux Enterprise Desktop 12
                        changes</para>
                </listitem>
            </itemizedlist>
            <para>June 27, 2013 – andavis@suse.com</para>
            <itemizedlist>
                <listitem>
                    <para>Change Novell to SUSE</para>
                </listitem>
                <listitem>
                    <para>Add <option>-b</option> option to
                        kernel_module_package macro</para>
                </listitem>
                <listitem>
                    <para>Support building of secure-boot-enabled
                        packages</para>
                </listitem>
            </itemizedlist>
            <para>August 13, 2009 – andavis@suse.com</para>
            <itemizedlist>
                <listitem>
                    <para>Correctly reflect behavior of <option>-f</option>
                        option to kernel_module_package macro</para>
                </listitem>
            </itemizedlist>
            <para>December 22, 2008 – andavis@suse.com</para>
            <itemizedlist>
                <listitem>
                    <para>Initial Version: Update Code 10 Kernel Module
                        Packages Manual, and adapt it to Code 11
                        process</para>
                </listitem>
            </itemizedlist>
        </sect2>
        <sect2 xml:id="sec-references">
            <title>References</title>
            <itemizedlist>
                <listitem>
                    <para>SUSE SolidDriver Documentation: SUSE Kernel ABI
                        Stability: <link
                            xlink:href="https://drivers.suse.com/doc/SolidDriver/SUSE_Kernel_ABI_Stability.html"
                            >https://drivers.suse.com/doc/SolidDriver/SUSE_Kernel_ABI_Stability.html</link></para>
                </listitem>
                <listitem>
                    <para>Greg Kroah-Hartman: The Linux Kernel Driver
                        Interface, <link
                            xlink:href="http://www.kroah.com/log/linux/stable_api_nonsense.html"
                            >http://www.kroah.com/log/linux/stable_api_nonsense.html</link>
                        (also provided as stable_api_nonsense.txt in the
                        upstream kernel source tree)</para>
                </listitem>
                <listitem>
                    <para>Andreas Gruenbacher, Michal Marek: Working With
                        The SUSE 2.6.x and 3.x Kernel Sources (provided as
                        README.SUSE in SUSE kernel-source packages)</para>
                </listitem>
                <listitem>
                    <para>Peter Jay Salzman, Michael Burian, Ori Pomerantz:
                        The Linux Kernel Module Programming Guide, <link
                            xlink:href="http://www.tldp.org/LDP/lkmpg/2.6/html/index.html"
                            >http://www.tldp.org/LDP/lkmpg/2.6/html/index.html</link></para>
                </listitem>
                <listitem>
                    <para>Jonathan Corbet, Alessandro Rubini, Greg
                        Kroah-Hartman: Linux Device Drivers, Third Edition,
                        February 2005, <link
                            xlink:href="http://www.oreilly.com/catalog/linuxdrive3/"
                            >http://www.oreilly.com/catalog/linuxdrive3/</link>
                        (also available online at <link
                            xlink:href="http://lwn.net/Kernel/LDD3/"
                            >http://lwn.net/Kernel/LDD3/</link>
                    </para>
                </listitem>
                <listitem>
                    <para>Andreas Gruenbacher: Kernel Module Packages
                        Manual for CODE 10, <link
                            xlink:href="http://www.novell.com/developer/kernel_module_packages_manuals.html"
                            >http://www.novell.com/developer/kernel_module_packages_manuals.html</link></para>
                </listitem>
                <listitem>
                    <para>Documentation of The Linux Foundation Driver
                        Backport Workgroup, <link
                            xlink:href="http://www.linuxfoundation.org/en/Driver_Backport"
                            >http://www.linuxfoundation.org/en/Driver_Backport</link></para>
                </listitem>
                <listitem>
                    <para>UEFI Specification, <link
                            xlink:href="http://www.uefi.org/specs"
                            >http://www.uefi.org/specs</link></para>
                </listitem>
            </itemizedlist>
        </sect2>
    </sect1>
    
    <?pdfpagebreak style="sbp" formatter="fop"?>
    
    <xi:include href="sbp-legal-notice.xml"/>
    
    <?pdfpagebreak style="sbp" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
