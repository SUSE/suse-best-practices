<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-sbp-rpm-packaging"
    xml:lang="en">
    
    <info>
        <title>How to Set Up a Multi-PXE Installation Server</title>
        <subtitle/>
        <!--<orgname>SUSE Best Practices</orgname>-->
        <productname>SUSE Linux Enterprise Server</productname>
        <productnumber/>
        <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
            <dm:bugtracker>
                <dm:url>https://github.com/SUSE/suse-best-practices/issues/new</dm:url>
                <dm:product>How to Set Up a Multi-PXE Installation Server</dm:product>
            </dm:bugtracker>
            <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
        </dm:docmanager>
        
        
            <meta name="series">SUSE Best Practices</meta> 
            <meta name="category">Systems Management</meta> 
            
            <meta name="platform">SUSE Linux Enterprise Server</meta>    
 <!--           <meta name="platform"></meta>-->        
            
            <authorgroup>
            <author>
            <personname>
            <firstname>David</firstname>
            <surname>Byte</surname>
            </personname>
            <affiliation>
            <jobtitle>Senior Technology Strategist</jobtitle>
            <orgname>SUSE</orgname>
            </affiliation>
            </author>
  <!--          <author>
            <personname>
            <firstname></firstname>
            <surname></surname>
            </personname>
            <affiliation>
            <jobtitle></jobtitle>
            <orgname></orgname>
            </affiliation>
            </author>
            <editor>
            <orgname></orgname>
            </editor>
            <othercredit>
            <orgname></orgname>
            </othercredit>-->
            </authorgroup>
        
        <cover role="logos">
            <mediaobject>
                <imageobject>
                    <imagedata fileref="suse.svg" width="4em"/>
                </imageobject>
            </mediaobject>
<!--            <mediaobject>
                <imageobject>
                    <imagedata fileref="microsoft.svg" width="6em"/>
                </imageobject>
            </mediaobject>-->
        </cover>
        
         <date>September 25, 2018</date>


        <abstract>

            <para>This SUSE Best Practices document explains how to set up a multi-architecture PXE
                environment for the installation of the SUSE Linux Enterprise Server operating
                system on x86_64 and ARMv8 platforms with both BIOS and EFI. </para>

            <para>Components that usually should be hosted on the installation server are also
                included. This helps improving deployment times in multi-architecture
                environments.</para>
            
            <para>
                <emphasis role="strong">Disclaimer: </emphasis>
                Documents published as part of the SUSE Best Practices series have been contributed voluntarily
                by SUSE employees and third parties. They are meant to serve as examples of how particular
                actions can be performed. They have been compiled with utmost attention to detail. However,
                this does not guarantee complete accuracy. SUSE cannot verify that actions described in these
                documents do what is claimed or whether actions described have unintended consequences.
                SUSE LLC, its affiliates, the authors, and the translators may not be held liable for possible errors
                or the consequences thereof.
            </para>

        </abstract>
    </info>


    <sect1 xml:id="sec-sys-requirements">

        <title>System Requirements</title>

        <para>For a reasonable install server, you need:</para>

        <itemizedlist>
            <listitem>
                <para>200 GB drive space</para>
            </listitem>
            <listitem>
                <para>5 GB RAM</para>
            </listitem>
            <listitem>
                <para>Two network connections</para>
            </listitem>
        </itemizedlist>

        <para>The relatively huge drive space is needed if your installation server should also
            serve as your Subscription Management (SMT) server. Your deployment will use the SMT
            server in an ongoing manner for mirroring updates for the architectures in question in
            addition to hosting the installation repositories.</para>
    </sect1>


    <sect1 xml:id="sec-os-installation">

        <title>Installing the Operating System</title>

        <para>First, install SUSE Linux Enterprise Server 12 SP2 on a virtual or a physical
            system.</para>

        <para>On the registration screen, click the <quote>Network Configuration</quote> button at
            the upper right and configure the network. You can use two different interfaces: one for
            the public network with access to the Internet, and one for the cluster network.
            Deploying using the cluster network has several advantages:</para>

        <itemizedlist>
            <listitem>
                <para>It is a private network for the storage systems only and thus there will be no
                    conflict with other DHCP servers or PXE servers</para>
            </listitem>
            <listitem>
                <para>Generally it is faster than the public network</para>
            </listitem>
        </itemizedlist>

        <para>Use the <emphasis role="strong">Installation Settings</emphasis> screen to review and
            change several proposed installation settings. Clicking <emphasis role="strong"
                >Software</emphasis> opens the <emphasis role="strong">Software Selection and System
                Tasks</emphasis> screen, where you can change the software selection by selecting or
            deselecting patterns.</para>

        <para>The default scope of software includes the base system and X Window with the GNOME
            desktop. Deselect <quote>X Window with the GNOME desktop</quote>. For this, you are also
            safe deselecting 32-bit compatibility libraries. </para>
    </sect1>


    <sect1 xml:id="sec-setup-ntp">

        <title>Setting Up NTP Server</title>

        <para>The NTP server is used to act as an authoritative time source. Start YaST, select
                <emphasis role="strong">NTP Server</emphasis> and configure it to start at boot
            time. Under security settings, select <emphasis role="strong">Open Port in
                Firewall</emphasis> and click <emphasis role="strong">OK</emphasis>. When you use
            the install server, you can point the systems being deployed back to it for time
            synchronization.</para>
    </sect1>


    <sect1 xml:id="sec-setup-dhcp">

        <title>Setting Up DHCP Services</title>

        <para>Go into YaST and select <emphasis role="strong">DHCP Server</emphasis> from network
            services. Configure the IP range you want to use. After that, it is your choice on
            whether you use YaST or edit the configuration file
                (<filename>/etc/dhcpd.conf</filename>) manually. As with the other services, be sure
            to open the ports in the firewall. The end result needs to be a file that looks like the
            below:</para>

        <screen>option domain-name "my.lab";
option domain-name-servers 172.16.253.5;
option routers 192.168.124.1;
option ntp-servers 192.168.124.3;
option arch code 93 = unsigned integer 16; # RFC4578
default-lease-time 3600;
ddns-update-style none;
subnet 192.168.124.0 netmask 255.255.255.0 {
  range 192.168.124.100 192.168.124.199;
  next-server 192.168.124.3;
  default-lease-time 3600;
  max-lease-time 3600;
  if option arch = 00:07 or option arch = 00:09 {
   filename "/EFI/x86/bootx64.efi";
    } else if option arch = 00:0b {
   filename "/EFI/armv8/bootaa64.efi";
    } else {
   filename "/bios/x86/pxelinux.0";
    }
}</screen>

        <note>
            <title>
                <code>if option arch</code>
            </title>
            <para>The <code>if option arch</code> sections allow the DHCP server to make the correct
                decision on which file to use for booting.</para>
        </note>
    </sect1>


    <sect1 xml:id="sec-setup-repositories">

        <title>Setting Up Repositories</title>

        <para>The next step is to create the installation source directories. Use a structure
            similar to <filename>/srv/install/arch/product/version</filename>.</para>

        <screen>/srv/install/x86/sles12/sp2/cd1
/srv/install/armv8/sles12/sp2/cd1</screen>

        <para>Now mount the install media into the appropriate location. Be sure to add it to
                <filename>/etc/fstab</filename> for persistence between reboots.</para>

        <screen>mount -o loop, crossmnt /root/sles12sp2.iso /srv/install/x86/sles12/sp2/cd1/</screen>

        <para>Do the same for each architecture’s boot media.</para>

        <para>The final part of setting up the repositories is to export them. Although there are
            other supported methods such as HTTP, FTP, etc., use NFS for this scenario.  First,
            enable the NFS server through YaST and select <emphasis role="strong">Open Port in
                Firewall</emphasis>.  In this instance, export the entire
                <filename>/srv/install</filename> structure as seen in the sample
                <filename>/etc/exports</filename> entry below.</para>

        <screen>/srv/install  *(ro,root_squash,sync,no_subtree_check)</screen>
    </sect1>


    <sect1 xml:id="sec-setup-tftp">

        <title>Setting Up TFTP</title>

        <para>Now you need to enable the TFTP server. To do so, start YaST and select <emphasis
                role="strong">TFTP Server</emphasis> from <emphasis role="strong">Network
                Services</emphasis>. The system then prompts to <quote>install tftp</quote>. Select
                <emphasis role="strong">Enable</emphasis>, leave the image directory at
                <filename>/srv/tftpboot</filename>, select <emphasis role="strong">Open Port in
                Firewall</emphasis>, and click <emphasis role="strong">OK</emphasis>.</para>
    </sect1>


    <sect1 xml:id="sec-setup-pxe">

        <title>Setting Up PXE Boot</title>

        <para>To ensure you set up your install server correctly, read carefully through the
            following sections. Proceed as described and double check your entries to avoid typos.
            Getting all the right files in the right places allows you to add more architectures,
            operating system install options, etc.  </para>

        <para>Create a structure in <filename>/srv/tftpboot</filename> to support the various
            options:</para>

        <screen>mkdir /srv/tftpboot/bios
mkdir /srv/tftpboot/bios/x86
mkdir /srv/tftpboot/EFI
mkdir /srv/tftpboot/EFI/x86
mkdir /srv/tftpboot/EFI/x86/boot
mkdir /srv/tftpboot/EFI/armv8
mkdir /srv/tftpboot/EFI/armv8/boot</screen>


        <sect2 xml:id="sec-setup-x86-bios">

            <title>Setting Up the x86 BIOS Boot Environment</title>

            <para>At this point, you need to copy the necessary boot files for the x86 BIOS
                environment to the appropriate boot location. To do so, navigate to the appropriate
                directory as shown below:</para>

            <screen>cd /srv/install/x86/sles12/sp2/cd1/boot/x86_64/loader/
cp -a linux initrd message /srv/tftpboot/bios/x86/</screen>

            <para>While still in the loader directory, create the directory for the configuration
                file and copy it in:</para>

            <screen>mkdir /srv/tftpboot/bios/x86/pxelinux.cfg
cp -a isolinux.cfg /srv/tftpboot/bios/x86/pxelinux.cfg/default</screen>

            <para>Copy <filename>pxelinux.0</filename> to the same structure:</para>

            <screen>cp /usr/share/syslinux/pxelinux.0 /srv/tftpboot/bios/x86/</screen>

            <para>Now that the files are all in place, edit the configuration to ensure all the
                correct boot options are also in place.  Start with
                    editing <filename>/srv/tftpboot/bios/x86/pxelinux.cfg/default</filename>. See
                the example below:</para>

            <screen>default harddisk

# hard disk
label harddisk
  localboot -2
  # install
label install
  kernel linux
  append initrd=initrd showopts install=nfs://192.168.124.3/srv/install/x86/sles12/sp2/cd1

display message
implicit 0
prompt 1
timeout 600</screen>

            <para>Now edit <filename>/srv/tftpboot/bios/x86/message</filename> to reflect the
                default file you edited before. See the example below:</para>

            <screen>              Welcome to the Installer Environment!

To start the installation enter 'install' and press &lt;return&gt;.

Available boot options:
  harddisk   - Boot from Hard Disk (this is default)
  install     - Installation

Have a lot of fun...</screen>
        </sect2>

        <sect2 xml:id="sec-setup-x86-efi">
            <title>Setting Up the x86 EFI Boot Environment</title>

            <para>Start by copying the files required for UEFI booting of a <emphasis role="strong"
                    >grub2-efi</emphasis> environment.</para>

            <screen>cd /srv/install/x86/sles12/sp2/cd1/EFI/BOOT
cp -a bootx64.efi grub.efi MokManager.efi /srv/tftpboot/EFI/x86/</screen>

            <para>Copy the kernel and initrd to the directory structure.</para>

            <screen>cd /srv/install/x86/sles12/sp2/cd1/boot/x86_64/loader/
cp -a linux initrd /srv/tftpboot/EFI/x86/boot</screen>

            <para>Now you need to create a <filename>grub.cfg</filename> file. This file goes in
                    <filename>/srv/tftpboot/EFI/x86</filename> and should have contents similar to
                the below example:</para>

            <screen><?dbsuse-fo font-size="0.7em"?>set timeout=5
menuentry 'Install SLES12 SP2 for x86_64' {
 linuxefi /EFI/x86/boot/linux install=nfs://192.168.124.3/srv/install/x86/sles12/sp2/cd1
 initrdefi /EFI/x86/boot/initrd
 }</screen>
        </sect2>


        <sect2 xml:id="sec-setup-armv8-efi">

            <title>Setting Up the ARMv8 EFI Boot Environment</title>

            <para>Setting up the ARMv8 EFI boot environment is done in a way very similar to the
                x86_64 EFI environment. Start by copying the files required for UEFI booting of a
                    <emphasis role="strong">grub2-efi</emphasis> environment:</para>

            <screen>cd /srv/install/armv8/sles12/sp2/cd1/EFI/BOOT
cp -a bootaa64.efi /srv/tftpboot/EFI/armv8/</screen>

            <para>Copy the kernel and initrd to the directory structure:</para>

            <screen>cd /srv/install/armv8/sles12/sp2/cd1/boot/aarch64
cp -a linux initrd /srv/tftpboot/EFI/armv8/boot</screen>

            <para>Next you need to edit the  <filename>grub.cfg</filename> file and add a new
                section.  This file is located in the directory
                    <filename>/srv/tftpboot/EFI/armv8</filename>.  You should add contents similar
                to the example below.</para>

            <screen>menuentry 'Install SLES12 SP2 for SoftIron OverDrive' {
 linux /EFI/armv8/boot/linux network=1 usessh=1 sshpassword="suse" \
   install=nfs://192.168.124.3/srv/install/armv8/sles12/sp2/cd1 \
   console=ttyAMA0,115200n8
 initrd /EFI/armv8/boot/initrd
}</screen>

            <para>This addition to the configuration file contains a few other options to enable the
                serial console and to allow installation via <command>ssh</command>. This is helpful
                for systems that do not have a standard KVM console interface.</para>

            <note>
                <title>ARM Platforms</title>
                <para>Be aware that this configuration is specifically set up only for a specific
                    ARM platform.</para>
            </note>

        </sect2>
    </sect1>


    <sect1 xml:id="sec-setup-smt">

        <title>Setting Up SMT</title>

        <para>The SMT service provides a local repository mirror for updates to your software.
             Follow the instructions in the Subscription Management Tool Guide at <link
                xlink:href="https://documentation.suse.com/sles/12-SP4/html/SLES-all/smt-installation.html"
                >https://documentation.suse.com/sles/12-SP4/html/SLES-all/smt-installation.html</link>
            to install and configure SMT. Be sure to select both the pool and update repositories
            for each product you are supporting with this server.</para>

    </sect1>

    <sect1 xml:id="sec-install-server-completed">
        <title>Installation Server Completed</title>
        <para>At this point, you are ready to use the installation server for BIOS and EFI on x86
            and EFI on ARMv8. Be sure to select the SMT server as the registration server during
            installation. You can gain further value by building custom AutoYaST files as well.
            These files can enable a streamlined installation process and even an unattended process
            if everything is well defined.</para>
    </sect1>


        
    <?pdfpagebreak style="sbp" formatter="fop"?>
    
    <xi:include href="sbp-legal-notice.xml"/>
    
    <?pdfpagebreak style="sbp" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
