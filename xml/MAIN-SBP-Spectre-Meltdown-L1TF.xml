<?xml version="1.0" encoding="UTF-8"?>
<!--<?asciidoc-toc?>
<?asciidoc-numbered?>-->

<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>


<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-sbp-spectre-meltdown"
 xml:lang="en">

 <info>
  <title>System Performance Implications of Meltdown, Spectre, and L1TF Vulnerabilities</title>
  <subtitle>in SUSE-based Products</subtitle>
  <productname>All SUSE Products</productname>
  <productnumber/>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:url>https://github.com/SUSE/suse-best-practices/issues/new</dm:url>
    <dm:product>System Performance Implications of Meltdown, Spectre, and L1TF Vulnerabilities</dm:product>
   </dm:bugtracker>
   <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
  </dm:docmanager>
  
  
   <meta name="series">SUSE Best Practices</meta> 
   <meta name="category">Security</meta> 
   
   <meta name="platform">All SUSE Products</meta>    
 <!--  <meta name="platform"></meta> -->       
   
   <authorgroup>
   <author>
   <personname>
    <firstname>Sheilagh</firstname>
   <surname>Morlan</surname>
   </personname>
   <affiliation>
    <jobtitle>Manager Software Engineering</jobtitle>
   <orgname>SUSE</orgname>
   </affiliation>
   </author>
   <author>
   <personname>
   <firstname>Bryan</firstname>
   <surname>Stephenson</surname>
   </personname>
   <affiliation>
    <jobtitle>SUSE OpenStack Cloud Security Engineer</jobtitle>
   <orgname>SUSE</orgname>
   </affiliation>
   </author>
    <author>
     <personname>
      <firstname>T.R.</firstname>
      <surname>Bosworth</surname>
     </personname>
     <affiliation>
      <jobtitle>Senior Product Manager SUSE OpenStack Cloud</jobtitle>
      <orgname>SUSE</orgname>
     </affiliation>
    </author>
    <author>
     <personname>
      <firstname>Jiri</firstname>
      <surname>Kosina</surname>
     </personname>
     <affiliation>
      <jobtitle>Director SUSE Labs Core</jobtitle>
      <orgname>SUSE</orgname>
     </affiliation>
    </author>
    <author>
     <personname>
      <firstname>Vojtech</firstname>
      <surname>Pavlik</surname>
     </personname>
     <affiliation>
      <jobtitle>VP SUSE Labs</jobtitle>
      <orgname>SUSE</orgname>
     </affiliation>
    </author>
    <author>
     <personname>
      <firstname>Olaf</firstname>
      <surname>Kirch</surname>
     </personname>
     <affiliation>
      <jobtitle>VP SUSE Linux Enterprise</jobtitle>
      <orgname>SUSE</orgname>
     </affiliation>
    </author>
 <!--  <editor>
   <orgname></orgname>
   </editor>
   <othercredit>
   <orgname></orgname>
   </othercredit>-->
   </authorgroup>
  
  <cover role="logos">
   <mediaobject>
    <imageobject>
     <imagedata fileref="suse.svg" width="4em"/>
    </imageobject>
   </mediaobject>
 <!--  <mediaobject>
    <imageobject>
     <imagedata fileref="microsoft.svg" width="6em"/>
    </imageobject>
   </mediaobject>-->
  </cover>

  <date>January 17, 2019</date>

  <abstract>
   <para>This document provides information about released mitigations for Meltdown, Spectre, and L1
    Terminal Fault (L1TF) in SUSE Linux Enterprise-based products. The purpose of this document is
    to help customers evaluate how best to performance test their deployments.</para>
   
   <para>
    <emphasis role="strong">Disclaimer: </emphasis>
    Documents published as part of the SUSE Best Practices series have been contributed voluntarily
    by SUSE employees and third parties. They are meant to serve as examples of how particular
    actions can be performed. They have been compiled with utmost attention to detail. However,
    this does not guarantee complete accuracy. SUSE cannot verify that actions described in these
    documents do what is claimed or whether actions described have unintended consequences.
    SUSE LLC, its affiliates, the authors, and the translators may not be held liable for possible errors
    or the consequences thereof.
   </para>

  </abstract>

 </info>

 <sect1 xml:id="sec-background">
  <title>Background</title>

  <para> To improve chipset performance, in the 1990s, Intel introduced a new architecture to its
   x386 chips. This architecture allowed for predictive calculations to speed up processes. A simple
   explanation is that this design included the ability for processes to read buffers and caches not
   directly related to their specific calculations. A study funded by the NSA in 1995 identified
   both the covert channel and transaction lookaside buffer vulnerabilities at the heart of
   Meltdown, Spectre and L1 Terminal Fault (L1TF). But at the time there were no easy exploits and
   the industry was more interested in performance than security. Twenty years later the rise of
   cloud computing, containers, multi-tenancy, and the drive for performance have created an
   environment where it is now possible to exploit these vulnerabilities.</para>

  <para>There is always a balance between performance and security. Enhanced security means siloed
   computations, message and load encryption, secure threading, and secure database transactions all
   of which take a toll on performance. In a highly competitive industry where speed is market,
   security gets downgraded. When a security problem is identified and mitigated, performance takes
   a hit.</para>

  <para>Since January 2018, chipset manufacturers produced microcode updates to the chips for each
   specific vulnerability. These microcode updates make the chips more secure at the expense of
   performance. </para>

  <note>
   <title>Chipset Vulnerabilities</title>
   <para> The Meltdown, Spectre and L1TF vulnerabilities are chipset hardware problems. They will
    only be completely resolved when the chipset manufacturers develop a new architecture and burn
    new silicon that makes its way into enterprise and consumer hardware available to the
    market.</para>
  </note>

  <para>The challenge for operating system and software providers now is that machines that contain
   the affected chipsets (all of them) have patched vulnerabilities that now need to be accommodated
   through the software that runs on it. This holds specifically true for the operating systems, but
   to a lesser extent also for the applications that run on top of those operating systems.</para>

  <para>Ever since Meltdown and Spectre vulnerabilities were disclosed in January of 2018, customers
   have been asking for guidance on the performance impact of the mitigating patches for these
   hardware vulnerabilities. The most burning questions are:</para>

  <itemizedlist>
   <listitem>
    <para>Do these patches impact performance?</para>
   </listitem>
   <listitem>
    <para>If so, by how much?</para>
   </listitem>
  </itemizedlist>

  <para>The highly unsatisfactory answer is: it depends on the workload. Some types of workloads are
   hardly affected, while others are greatly affected.</para>

  <para>The main determinants of whether a workload will be affected are:</para>

  <itemizedlist>
   <listitem>
    <para>The workload itself:</para>
    <itemizedlist>
     <listitem>
      <para>Workloads that execute more system calls are more highly affected</para>
      <itemizedlist>
       <listitem>
        <para>Heavy database operations</para>
       </listitem>
       <listitem>
        <para>File management</para>
       </listitem>
       <listitem>
        <para>Transfer status information</para>
       </listitem>
       <listitem>
        <para>Attach/detach remote devices</para>
       </listitem>
       <listitem>
        <para>Send/receive messages</para>
       </listitem>
      </itemizedlist>
      <itemizedlist>
       <listitem>
        <para>Workloads that do numeric computations are less affected</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>The CPU vendor and family:</para>
    <itemizedlist>
     <listitem>
      <para>All modern CPUs were affected but not equally</para>
     </listitem>
     <listitem>
      <para>Some CPUs are optimized for certain types of transactions/processes</para>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
  <itemizedlist>
   <listitem>
    <para>The operating system in use:</para>
    <itemizedlist>
     <listitem>
      <para>Different CPUs will respond differently to different patches</para>
      <itemizedlist>
       <listitem>
        <para>Tuning operating system builds is an ongoing process</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>


  <para>In our own testing, we have seen performance benchmarks that regressed just a little, and we
   have seen some that regressed by 15 percent or even more. Because different benchmarks exercise
   different areas of an operating system, it is no surprise that they show different degrees of
   performance regression. What may be more surprising is that most benchmarks showed a high
   variance in the relative impact across different CPU vendors and models, sometimes by a factor of
   2 or more. This means a benchmark that would show a 5 percent impact on one platform would show a
   10 percent impact or more on another.</para>

  <para>Thus we believe that it would be misleading if we provided customers with a table stating
   that workload X will suffer a performance regression of N percent as a result of security fixes
   for Spectre, Meltdown and L1TF vulnerabilities. Given that microcode changes play a major part in
   the mitigation, the performance impact you experience will very much depend on what sort of
   hardware you have. And until there is a <quote>final</quote> set of microcode updates from all
   vendors, any performance measurements must be considered preliminary anyway.</para>

  <para>To make a definitive assessment, you need to benchmark your workloads to find out how they
   are impacted. However, the following sections will explain more in detail what causes the
   performance hit to illustrate how different classes of applications will be impacted differently.
   They also discuss the work SUSE is doing to recover some of the lost performance.</para>

 </sect1>

 <sect1 xml:id="sec-meltdown">
  <title>Meltdown</title>

  <para>This vulnerability, among others, can be exploited by a rogue user space process to
    <quote>read</quote> kernel memory locations. It affects Intel CPUs, some ARM licensees, and IBM
   POWER processors to some degree. The only way to mitigate it is by changing the operating system
   to <quote>help</quote> the CPU to forget its kernel address mapping whenever switching from
   kernel to user space – for example, when returning from a system call.</para>

  <para>The patch set to <quote>help</quote> forget its kernel address mapping on the x86-64
   architecture is called Page Table Isolation (PTI). It adds (a lot of) code to the system call
   entry and exit code plus a few other places to fully isolate the kernel page tables from user
   space access. This involves removing all address mapping information about kernel memory from the
   CPU, and performing a flush on the address translation cache (called a TLB flush). This adds a
   more or less constant cost to each system call, interrupt, etc. The operation itself is not
   hugely expensive, but it is not fast either. The workload itself may add additional latency for
   any TLB hits without PTI, so this is another example of the performance being workload
   specific.</para>

  <para>Our patch set includes a slight optimization on Intel CPUs that relies on a somewhat recent
   CPU feature called <quote>Process Context ID</quote>. This ID can be used to speed up the page
   table isolation a bit. When returning from a system call, we still need to remove all mapping
   information about kernel memory – but we can avoid the other part of this operation, the TLB
   flush. In several of the benchmarks we have run, using the PCID feature would cut the performance
   impact by up to a half. This PTI optimization is enabled by default when we find that the CPU
   supports it.</para>

  <para>This mitigation is not necessary for AMD CPUs as they will be automatically detected and
   disabled during the boot process. For more details, see the Technical Information Document at
    <link xlink:href="https://www.suse.com/support/kb/doc/?id=7022512"/>.</para>


 </sect1>

 <sect1 xml:id="sec-spectre">
  <title>Spectre</title>

  <para>Spectre is not so much a single vulnerability, but several vulnerabilities rolled into one.
   There are many variants of this family of attacks. A complete list can be found in the SUSE blog
   article at <link xlink:href="https://www.suse.com/c/overview-of-meltdown-spectre/"/>. In some
   form, Spectre affects all current CPUs on which SUSE Linux Enterprise products are
   supported.</para>

  <para>Spectre 1 exploits rely on the ability to have the CPU (or a hypervisor) speculatively
   access memory through pointers that can be controlled by the attacker. To a large degree the
   mitigation employed at the kernel and hypervisor level involves finding code that accesses user
   controlled pointers in an exploitable way, and protecting these with speculation barriers that
   flush the branch prediction logic, which is a costly operation. A primary example is the extended
   Berkeley Packet Filtering facility, which suffered a significant hit in the first round of
   updates.</para>

  <para>SUSE kernel developers are working on improving some of these changes to soften the impact
   where possible. For example, we expect eBPF performance to come back to almost the previous
   levels with the next round of kernel updates that are in preparation, by replacing the (hardware)
   barrier with a software based mitigation. SUSE defaults to retpoline mitigation on all CPUs
   except for SkyLake.</para>

  <para>Spectre 2 exploits rely on the ability to actively confuse the branch target prediction
   inside the CPU. This is essentially a cache that is used to predict where indirect calls will end
   up jumping to. By poisoning this cache, an attacker can cause the CPU to speculatively execute
   code at an address controlled by an attacker, with arguments controlled by the attacker. This
   vulnerability cannot be addressed by finding bits of code that can be abused, like it has been
   done for Spectre 1, because the number of combinations is virtually limitless.</para>

  <para>The mitigation currently present in our update kernels is based on three new CPU features
   (introduced by the recent microcode updates and the retpoline software-based mitigation):</para>

  <itemizedlist>
   <listitem>
    <para>Indirect Branch Restricted Speculation (IBRS):</para>
    <itemizedlist>
     <listitem>
      <para>Flushes the cache between privilege levels (user to kernel)</para>
     </listitem>
     <listitem>
      <para>Disables branch prediction on the sibling CPU thread</para>
     </listitem>
     <listitem>
      <para>Enabled on kernel entry; disabled on kernel exit</para>
     </listitem>
     <listitem>
      <para>Can be enabled at boot time or runtime</para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>Single Thread Indirect Branch Predictors STIBP:</para>
    <itemizedlist>
     <listitem>
      <para>Disables branch prediction on the sibling CPU thread</para>
     </listitem>
     <listitem>
      <para>May adversely affect hyper-threading</para>
     </listitem>
     <listitem>
      <para>November 2018 release allows this to run surgically</para>
      <itemizedlist>
       <listitem>
        <para>Only when processes request it </para>
       </listitem>
       <listitem>
        <para>SECCOMP threads</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>Indirect Branch Prediction Barrier (IBPB):</para>
    <itemizedlist>
     <listitem>
      <para>Flushes cache for code running at same privilege level</para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>“Return Trampoline” (Retpoline):</para>
    <itemizedlist>
     <listitem>
      <para>Potential alternative for IBRS</para>
     </listitem>
     <listitem>
      <para>Emits different machine code sequence for indirect calls</para>
     </listitem>
     <listitem>
      <para>Replacement of all indirect calls also results in slowdown</para>
     </listitem>
     <listitem>
      <para>Slowdowns expected to be less than IBRS</para>
     </listitem>
     <listitem>
      <para>Microcode updates still required to take advantage of IBPB mitigations</para>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>

 </sect1>

 <sect1 xml:id="sec-l1tf">
  <title>L1 Terminal Fault</title>

  <para>Exploiting L1 Terminal Fault (L1TF) will bypass protective barriers and read privileged
   memory the attackers would not otherwise have access to. This includes data stored on physical
   machines and on virtual machines in a multi-tenant environment. It exploits modern CPUs’ ability
   to read memory inside the L1 cache. The data that can be exposed resides in:</para>

  <itemizedlist>
   <listitem>
    <para>Intel’s Software Guard Extensions (SGX) secure enclaves</para>
   </listitem>
   <listitem>
    <para>System Management Mode (SMM) memory or the operating system’s kernel</para>
   </listitem>
   <listitem>
    <para>Data from hypervisors/Virtual Machine Monitors (VMMs)</para>
   </listitem>
   <listitem>
    <para>Data from other virtual machines running on the same hardware</para>
   </listitem>
  </itemizedlist>

  <para>Vulnerable processors are:</para>
  <itemizedlist>
   <listitem>
    <para>SGX-enabled Intel Core and Xeon Processors (Skylake and Kaby Lake)</para>
   </listitem>
  </itemizedlist>

  <para>Intel Atom family processors with SGX, AMD, and ARM chips do not seem to be affected.</para>

  <para>Also available from Intel is the <emphasis>flush_l1d</emphasis> feature which hypervisors
   can use to flush the L1 data cache before executing potentially malicious code in the VM. </para>

  <para>We have released additional L1TF mitigation in the form of the <parameter>l1tf</parameter>
   kernel boot parameter for use on both bare metal and virtual machines. Recommended mitigations
   include support for new CPU features and vary depending on environment. L1TF mitigation is
   controlled through the <parameter>l1tf</parameter> kernel boot parameter.</para>

  <para>We have released Linux kernel updates that include a new <varname>sysfs</varname> variable
   that will show the state of available mitigations. These states are available for non-VMX
   systems, systems using KVM/VMX, and CPU microcode protection levels.</para>

  <para>More information on the updates can be found in the SUSE blog article at <link
    xlink:href="https://www.suse.com/c/suse-addresses-the-l1-terminal-fault-issue/"/>. </para>

 </sect1>

 <sect1 xml:id="sec-resources">
  <title>Resources</title>

  <para>For more detailed information, refer to the following documents and articles:</para>

  <itemizedlist>
   <listitem>
    <para>Technical Information Document #7022512 - Security Vulnerability: "Meltdown" and "Spectre"
     side channel attacks against CPUs with speculative execution <link
      xlink:href="https://www.suse.com/support/kb/doc/?id=7022512"/>
    </para>
   </listitem>
   <listitem>
    <para>Blog Article - Overview of Meltdown and Spectre CPU issues <link
      xlink:href="https://www.suse.com/c/overview-of-meltdown-spectre/"/></para>
   </listitem>
   <listitem>
    <para>Blog Article - SUSE addresses the “L1 Terminal Fault” issue <link
      xlink:href="https://www.suse.com/c/suse-addresses-the-l1-terminal-fault-issue/"/></para>
   </listitem>
  </itemizedlist>

 </sect1>

  
 <?pdfpagebreak style="sbp" formatter="fop"?>
  <xi:include href="sbp-legal-notice.xml"/>
 
 <?pdfpagebreak style="sbp" formatter="fop"?>
 <xi:include href="license-gfdl.xml"/>

</article>
