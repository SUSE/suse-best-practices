<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article role="sbp" xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="art-sbp-quilting-osc" xml:lang="en">
    
    <info>
        <title>How to Modify a Package in Open Build Service</title>
        <subtitle>Quilting with OSC</subtitle>
        <productname>SUSE Linux Enterprise Server</productname>
        <!--<productname>SUSE Linux Enterprise Server</productname>-->
        <productnumber/>
        <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
            <dm:bugtracker>
                <dm:url>https://github.com/SUSE/suse-best-practices/issues/new</dm:url>
                <dm:product>How to Modify a Package in the Open Build Service</dm:product>
            </dm:bugtracker>
            <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
        </dm:docmanager>
        
        
            <meta name="series">SUSE Best Practices</meta> 
            <meta name="category">Packaging</meta> 
            
            <meta name="platform">Open Build Service</meta>    
           <!-- <meta name="platform"></meta>  -->      
            
            <authorgroup>
        <!--    <author>
            <personname>
            <firstname></firstname>
            <surname></surname>
            </personname>
            <affiliation>
            <jobtitle></jobtitle>
            <orgname></orgname>
            </affiliation>
            </author>-->
            <author>
            <personname>
            <firstname>Josef</firstname>
            <surname>Moellers</surname>
            </personname>
            <affiliation>
            <jobtitle>Senior Developer SUSE Linux Enterprise
            Network Services</jobtitle>
            <orgname>SUSE</orgname>
            </affiliation>
            </author>
            <!--<editor>
            <orgname></orgname>
            </editor>
            <othercredit>
            <orgname></orgname>
            </othercredit>-->
            </authorgroup>
        
        <cover role="logos">
            <mediaobject>
                <imageobject>
                    <imagedata fileref="suse.svg" width="4em"/>
                </imageobject>
            </mediaobject>
   <!--         <mediaobject>
                <imageobject>
                    <imagedata fileref="microsoft.svg" width="6em"/>
                </imageobject>
            </mediaobject>-->
        </cover>  
        
                <date>March 13, 2018</date>


        <abstract>

            <para>This document leads you through the process of modifying
                a software package in the Open Build Service (OBS) using
                the <command>osc</command> and <command>quilt</command>
                tools. It also discusses simple error cases, based upon the
                author’s own experiences, but it does not attempt to be a
                full manual or to cover all options. The steps described
                here should work well, but if you encounter any
                difficulties, you should consult the manuals or ask an
                expert for help. </para>

            <para>This document does not intend to provide a guide for the
                Open Build Service. If you want to learn more about OBS,
                visit the project’s Web page at <link
                    xlink:href="http://openbuildservice.org/"
                    >http://openbuildservice.org/</link> and read the
                specific documentation there <link
                    xlink:href="http://openbuildservice.org/help/"
                    >http://openbuildservice.org/help/</link>
            </para>
            
            <para>
                <emphasis role="strong">Disclaimer: </emphasis>
                Documents published as part of the SUSE Best Practices series have been contributed voluntarily
                by SUSE employees and third parties. They are meant to serve as examples of how particular
                actions can be performed. They have been compiled with utmost attention to detail. However,
                this does not guarantee complete accuracy. SUSE cannot verify that actions described in these
                documents do what is claimed or whether actions described have unintended consequences.
                SUSE LLC, its affiliates, the authors, and the translators may not be held liable for possible errors
                or the consequences thereof.
            </para>
            

        </abstract>

    </info>


    <sect1 xml:id="sec-intro">

        <title>Introduction: Open Build Service and the Tools
                <command>osc</command> and <command>quilt</command></title>

        <para>The Open Build Service command line client
                <command>osc</command> is a tool developed to interact with
            OBS servers. It provides many functions including: </para>

        <itemizedlist>
            <listitem>
                <para>Creating, modifying and deleting the information
                    (meta data) about projects and packages and downloading
                    or uploading their code and packaging </para>
            </listitem>
            <listitem>
                <para>Managing the repositories or targets that projects or
                    packages build against </para>
            </listitem>
            <listitem>
                <para>Preparing and running local builds of packages
                </para>
            </listitem>
            <listitem>
                <para>Making and managing requests to modify packages in
                    projects (so called <emphasis role="italic">Submit
                        Requests</emphasis>)</para>
            </listitem>
        </itemizedlist>


        <para><command>quilt</command> is a software utility for managing a
            series of changes to the source code of any computer program.
            Such changes are often called <quote>patches</quote> or
                <quote>patch sets</quote>. <command>quilt</command> takes
            an arbitrary number of patches and turns them into a single
            patch. In doing so, <command>quilt</command> makes it easier
            for other programmers to test and evaluate the different
            changes before they are permanently inserted into the source
            code. In short, <command>quilt</command> allows you to easily
            manage many patches by keeping track of the changes each patch
            makes. Patches can be applied, un-applied, refreshed, and more. </para>

        <para>To understand how <command>osc</command> and
                <command>quilt</command> work, a few terms and technologies
            need to be described more in detail:</para>

        <itemizedlist>
            <listitem>
                <para>OBS manages <emphasis role="italic"
                        >repositories</emphasis>, such as <emphasis
                        role="strong">devel:tools</emphasis>, <emphasis
                        role="strong">SUSE:SLE-15:GA</emphasis>, or
                        <emphasis role="strong"
                        >home:&lt;username></emphasis>. <emphasis
                        role="italic">Repositories</emphasis> are sometimes
                    also called <emphasis role="italic"
                    >projects</emphasis>. In this documentation, projects
                    are abbreviated as <emphasis role="strong"
                        >PRJ</emphasis>.</para>

            </listitem>
            <listitem>
                <para>A <emphasis role="italic">repository</emphasis>
                    contains a set of <emphasis role="italic"
                        >packages</emphasis>, such as <emphasis
                        role="strong">pam_krb5</emphasis>, <emphasis
                        role="strong">ntp</emphasis>, <emphasis
                        role="strong">wget</emphasis>, <emphasis
                        role="strong">zypper</emphasis>. In this document,
                    packages are abbreviated as <emphasis role="strong"
                        >PKG</emphasis>. Keep in mind that a package can
                    (and usually will) appear in more than one repository,
                    but for all practical purposes each one is a copy in
                    its own right.</para>
            </listitem>
            <listitem>
                <para>A package consists of a set of files, which
                    contains:</para>
                <itemizedlist>
                    <listitem>
                        <para>at least a <filename>spec</filename>
                            file,</para>
                    </listitem>
                    <listitem>
                        <para>an archive of <emphasis role="italic"
                                >pristine sources</emphasis> – these are
                            the <quote>original</quote> sources for the
                            package without any patches applied – possibly
                            accompanied by a <filename>signature</filename>
                            file,</para>
                    </listitem>
                    <listitem>
                        <para>a <filename>changes</filename> file,</para>
                    </listitem>
                    <listitem>
                        <para>possibly a set of <emphasis role="italic"
                            />patches which are to be applied in a given
                            sequence, the order being defined by the
                                <filename>spec</filename> file, and</para>
                    </listitem>
                    <listitem>
                        <para>sometimes additional files, which are not
                            part of the sources or which control some
                            aspects of the building process, for example an
                                <filename>rpmlintrc</filename> file.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <para>While there exists only <emphasis role="strong"
                >one</emphasis> Open Build Service, it maintains two
            separate collections, or APIs (as they are called in the
            documentation) of repositories:</para>

        <itemizedlist>
            <listitem>
                <para>the <emphasis role="italic">external</emphasis> build
                    service at <link xlink:href="https://api.opensuse.org"
                        >https://api.opensuse.org</link>. It can be used by
                    everyone. When you log in to this Web site, you can
                    view all projects available in the external build
                    service. </para>
            </listitem>


            <listitem>
                <para>the <emphasis role="italic">internal</emphasis> build
                    service where the SUSE products are maintained. Only
                    SUSE employees can access this Web site using their log
                    in credentials. Here you can view the existing projects
                    in the internal build service.</para>

            </listitem>
        </itemizedlist>

        <note>
            <title>External Build Service</title>
            <para>By default, the <command>osc</command> command works on
                the external build service only. To make it work on the
                internal build service, you need to add the special option
                with argument <option>-A int</option>. As this paper
                focuses on the external API of the Open Build Service, only
                the plain <command>osc</command> command is used.</para>
        </note>


        <para>This document guides you through the process of modifying a
            package by updating it to a new version, adding an existing
            upstream patch or by building a new patch.</para>

        <para>You might need to add a patch to several versions of the
            respective package in more than one project. The reason is
            that, if you fix a bug, you often need to fix it in various
            SUSE Linux Enterprise releases. For example, if you fix a bug
            in SUSE Linux Enterprise 11, you might also need to fix it in
            SUSE Linux Enterprise 12. For this purpose we will use two
            tools:</para>

        <itemizedlist>
            <listitem>
                <para><command>osc</command> to manage the package(s)
                    and</para>
            </listitem>
            <listitem>
                <para><command>quilt</command> to manage the
                    patch(es)</para>
            </listitem>
        </itemizedlist>

        <para>Using two tools occasionally requires switching from one tool
            to the other. At the <quote>junctions</quote>, each of the
            tools will <quote>enter the realm</quote> of the other tool.
            But in good Unix tradition, each tool performs its own job,
            while being aware of the other tool. The commands for both
            tools come with a very extensive set of subcommands and very
            good manual pages. Options explained or mentioned in this
            document are usually placed after the subcommand. In
            consequence, for a correct command, type :</para>

        <screen>osc mbranch -c &lt;PKG></screen>

        <para>and NOT</para>

        <screen>osc -c mbranch &lt;PKG></screen>


        <para>The former command requests to check out files from the
            created branches, while the latter would specify to use an
            alternate configuration file <emphasis role="strong">
                <quote>mbranch</quote>
            </emphasis> with <command>&lt;PKG></command> as the
            subcommand.</para>

        <para>Both tools come with a built-in help system. To display the
            information for a given subcommand, type:</para>

        <screen>osc help &lt;subcommand></screen>

        <para>or</para>

        <screen>quilt &lt;subcommand> -h</screen>




    </sect1>


    <sect1 xml:id="sec-repos-projects">

        <title>Repositories and Projects</title>

        <para>This chapter focuses on <emphasis role="italic"
                >repositories</emphasis>. You will have to upload packages
            to <emphasis role="italic">repositories</emphasis> and move
            packages from one <emphasis role="italic">repository</emphasis>
            to another. The term <emphasis role="italic"
                >repository</emphasis> is often used as a synonym for
                <emphasis role="italic">project</emphasis>. But strictly
            speaking a <emphasis role="italic">project</emphasis> is a set
            of packages and a <emphasis role="italic">repository</emphasis>
            is the location where the files for these packages are stored. </para>

        <note>
            <title>Colons</title>
            <para>When you see colons (<quote>:</quote>) in a repository
                (or project) name, notionally replace them by slashes
                    (<quote>/</quote>), to make the file name look more
                familiar. </para>

        </note>

        <para>A project can be</para>

        <itemizedlist>
            <listitem>
                <para>a software project (for example <emphasis
                        role="strong">Apache</emphasis>, <emphasis
                        role="strong">Base:System</emphasis>, or <emphasis
                        role="strong">Linux-PAM</emphasis>)</para>
            </listitem>
            <listitem>
                <para>a home project (for example <emphasis role="strong"
                        >home:jmoellers</emphasis>) </para>
            </listitem>
            <listitem>
                <para>a branch (for example <emphasis role="strong"
                        >home:jmoellers:branches:Linux-PAM</emphasis>)</para>
            </listitem>
            <listitem>
                <para>a product project (for example <emphasis
                        role="strong">SUSE:SLE-12-SP3:GA)</emphasis>
                </para>
                <important>
                    <para><emphasis role="italic">Product
                            project</emphasis> is not an official
                        term!</para>
                </important>
            </listitem>
        </itemizedlist>


        <para>You can list all projects with the command <command>osc ls
                /</command>. For the external build service, this command
            returns a rather long list of available projects (at the time
            of writing, almost 45,000 projects were available).</para>

        <para>Each package included in a product usually goes through at
            least three repositories:</para>

        <orderedlist>
            <listitem>
                <para>the <emphasis role="italic">development
                        repository</emphasis>, or in short <emphasis
                        role="italic">devel repo</emphasis></para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Factory</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">product
                        repository</emphasis></para>
            </listitem>
        </orderedlist>

        <para>Often a fourth repository is needed, which is the <emphasis
                role="italic">branch</emphasis> that you create to work on
            the product. In these cases a package passes through the
            following repositories:</para>

        <itemizedlist>
            <listitem>
                <para>the <emphasis role="italic">development
                        repository</emphasis>, or in short <emphasis
                        role="italic">devel repo</emphasis></para>
            </listitem>
            <listitem>
                <para>your <emphasis role="italic">branch</emphasis></para>
            </listitem>
            <listitem>
                <para>once again the <emphasis role="italic">devel
                        repo</emphasis></para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Factory</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">product
                        repository</emphasis></para>
            </listitem>
        </itemizedlist>


        <sect2 xml:id="sec-upstream">
            <title>Upstream</title>

            <para><emphasis role="italic">Upstream</emphasis> is not a
                    <emphasis role="italic">repository</emphasis> in the
                classical meaning, but usually it is the very basic source
                of a package. It could be a Git repository that you clone,
                or a Web site from where you download a TAR archive. </para>

            <para>When you fix a bug, you should submit the patch to
                    <emphasis role="">upstream</emphasis> to ensure it can
                be included into future versions of the package. This has
                the advantage that next time you upgrade the package from
                    <emphasis role="italic">upstream</emphasis>, you might
                be able to drop one or more local patches. In addition, you
                contribute your efforts to the community. However, getting
                the patch accepted might require some patience and
                persistence, because some upstream maintainers have very
                special requirements regarding how to fix a bug. But
                usually most <emphasis role="italic">upstream</emphasis>
                maintainers are grateful for any fixes.</para>
        </sect2>

        <sect2 xml:id="sec-dev-repo">
            <title>Development Repository</title>

            <para>The <emphasis role="italic">development
                    repository</emphasis>, or in short <emphasis
                    role="italic">devel repo</emphasis>, is where you keep
                a package locally, after it has been downloaded or cloned
                from <emphasis role="italic">upstream</emphasis>. Most
                    <emphasis role="italic">development
                    repositories</emphasis> are located on the external
                build service. Each <emphasis role="italic">development
                    repository</emphasis> has one or more maintainers and
                one or more bugowners. </para>

            <para>Only the maintainer(s) and the bugowner(s) can submit to
                this repository. Other contributors must branch the
                repository and then request the patch to be accepted by the
                maintainer(s) and/or bugowner(s). You can, however, check
                out from the <emphasis role="italic">development
                    repo</emphasis>, for example, if you only want to have
                a look at the source code or if you need to analyze a
                problem without first creating a branch (which takes up
                some space on the build servers).</para>

            <para>You can find the <emphasis role="italic">devel
                    repo</emphasis> of a package by typing</para>

            <screen>osc develproject &lt;PRJ> &lt;PKG></screen>

            <para>The command:</para>

            <screen>osc develproject openSUSE:Factory cvs</screen>

            <para>will display the following output</para>

            <screen>devel:tools:scm</screen>

            <note>
                <title>Short Version</title>
                <para>You can abbreviate <emphasis role="strong"
                        >develproject</emphasis> with the short version
                        <emphasis role="strong">dp</emphasis>.</para>
            </note>

        </sect2>


        <sect2 xml:id="sec-factory">
            <title>Factory</title>

            <para>The <emphasis role="italic">Factory</emphasis> project is
                the rolling development code base for the openSUSE
                distribution Tumbleweed. <emphasis role="italic"
                    >Factory</emphasis> is mainly used as an internal term
                for openSUSE's distribution developers, and the target
                project for all contributions to openSUSE's main code base.
                There is a constant flow of packages going into <emphasis
                    role="italic">Factory</emphasis>. There is no package
                or feature freeze; therefore, the <emphasis role="italic"
                    >Factory</emphasis> repository is not guaranteed to be
                fully stable and is not intended to be used as a
                distribution itself.</para>

            <para>The core system packages receive automated testing via
                openQA, the automated test tool for Linux operating systems
                (for more information, see <link
                    xlink:href="http://open.qa/">http://open.qa/</link>).
                When automated testing is completed and the repository is
                in a consistent state, it is synchronized to the download
                mirrors. Then it is published as the openSUSE Tumbleweed
                distribution, the rolling release version of the openSUSE
                project, featuring the newest technology (see <link
                    xlink:href="https://www.opensuse.org/#Tumbleweed"
                    >https://www.opensuse.org/#Tumbleweed</link>). It is of
                course also the basis for openSUSE Leap, the regular annual
                release from the openSUSE project, with security and
                stability being the main focus. </para>

            <para>In addition, <emphasis role="italic">Factory</emphasis>
                is used as the base repository containing the code stream
                for the development of the next major version of SUSE Linux
                Enterprise and all related enterprise-class products.
                Therefore it is all the more important to keep this
                repository up to date. </para>

            <note>
                <title>Community Project</title>
                <para><emphasis role="strong">openSUSE:Factory</emphasis>
                    is part of the openSUSE community project. This means
                    it resides outside of the official SUSE product
                    projects, and is not regulated or controlled by SUSE.
                    Package maintainers are usually members of the openSUSE
                    community.</para>
            </note>

            <para>A major rule has been established which is called
                    <emphasis role="strong">
                    <quote>Factory First</quote>
                </emphasis>. In theory, this means that you need to submit
                any package that you want to see included in any version of
                openSUSE or SUSE Linux Enterprise to <emphasis
                    role="italic">Factory</emphasis>. In practice, you will
                submit your package or patch to the <emphasis role="italic"
                    >devel repo</emphasis> first and then you will submit
                to <emphasis role="italic">Factory</emphasis> from there.
                As you branch and check out from the <emphasis
                    role="italic">devel repo</emphasis>,
                    <command>osc</command> will automatically submit
                changes to the <emphasis role="italic">devel
                    repo</emphasis> master. Once you have submitted or
                updated a package in its <emphasis role="italic">devel
                    repo</emphasis>, you (or the maintainer of the
                    <emphasis role="italic">devel repo</emphasis>) must
                submit the package to <emphasis role="strong"
                    >openSUSE:Factory</emphasis>. </para>

            <important>
                <title>Factory First Policy</title>
                <para> After you have submitted or updated a package in the
                        <emphasis role="italic">devel repo</emphasis>, you
                    always need to submit it to the next step! As long as
                    the package is updated or patched only in its <emphasis
                        role="italic">devel repo</emphasis>, the new
                    version of the package will not be included with any
                    new release. Only when it is submitted to <emphasis
                        role="strong">openSUSE:Factory</emphasis>, it is
                    available for incorporation into future product
                    releases. This policy is called <emphasis role="strong">
                        <quote>Factory First</quote>
                    </emphasis>!</para>
            </important>

            <para>From <emphasis role="strong">openSUSE:Factory</emphasis>,
                the package will later be submitted to a <emphasis
                    role="italic">distribution repository</emphasis>, for
                example to <emphasis role="strong"
                    >SUSE:SLE-15:GA</emphasis>. Usually this is done by the
                package maintainers, but occasionally you might be asked to
                submit your new or updated package there.</para>

        </sect2>

        <sect2 xml:id="sec-home-project">
            <title>Home Project</title>

            <para>The <emphasis role="italic">Home Project</emphasis> is
                your private repository. It is called <emphasis
                    role="strong">home:&lt;username></emphasis> (for
                example <emphasis role="strong">home:jmoellers</emphasis>).
                In this repository, you store your own projects, and you
                create your <emphasis role="italic"
                >branches</emphasis>.</para>
        </sect2>

        <sect2 xml:id="sec-branch">
            <title>Branch</title>
            <para>When you create a <emphasis role="italic"
                    >branch</emphasis> from an existing project, for
                example from a <emphasis role="italic">devel
                    repo</emphasis> of which you are not the maintainer or
                bugowner, this is stored under <emphasis role="strong"
                    >home:&lt;username>:branches</emphasis>. In the
                following example:</para>

            <screen>home:jmoellers:branches:network:utilities/wget</screen>

            <para><emphasis role="strong"
                    >home:jmoellers:branches:</emphasis> stands for the
                branch, <emphasis role="strong"
                    >network:utilities</emphasis> stands for the <emphasis
                    role="strong">devel project</emphasis>, and <emphasis
                    role="strong">wget</emphasis> is the product.</para>

            <para>Some maintainers or bugowners branch from their own devel
                repos, to ensure clean development processes, and to allow
                for proper documentation. </para>

            <para>The <command>osc</command> command records from which
                repository the branch was created. When you submit changes
                back to your branch, it also makes a request to the
                maintainers of the package to accept and submit the changes
                into the original repository.</para>


        </sect2>

        <sect2 xml:id="sec-product-projects">
            <title>Product Projects</title>

            <para>For the purpose of this document, the term <emphasis
                    role="italic">Product Projects</emphasis> refers to the
                repositories containing the packages that are bundled into
                a SUSE product. When a new product is built, its repository
                usually is named <emphasis role="strong"
                    >SUSE:&lt;productname>:GA</emphasis> (for example
                    <emphasis role="strong">SUSE:SLE-15:GA</emphasis>). At
                a later stage of the lifecycle, after the General
                Availability (GA) of the product, when the service packs
                for a product need to be created, a repository <emphasis
                    role="strong"
                    >SUSE:&lt;productname>:Update</emphasis> is set up.
                This is the repository to which you now should submit your
                patches. The next service pack of a product will be built
                from this repository.</para>

            <note>
                <title>GA Production Repository</title>
                <para>You cannot directly submit to the GA production
                    repository. As the <emphasis role="strong">Factory
                        First</emphasis> rule applies, you submit to
                        <emphasis role="italic">Factory</emphasis>. Then
                    the product release team will fetch the package from
                    there. You can, however, submit to the <emphasis
                        role="strong">Update</emphasis> repositories when
                    you fix a bug in an older release.</para>
            </note>

            <para>Each distribution and each service pack has its own
                repository (for example <emphasis role="strong"
                    >SLE-xx-SPyy</emphasis>). If you fix a bug in a
                package’s <emphasis role="italic">devel repo</emphasis>
                (after which you submit the patch to <emphasis
                    role="strong">openSUSE:Factory</emphasis>), you may
                need to also fix it in the <emphasis role="italic"
                    >distribution repos</emphasis>.</para>

            <para>This requires the following steps:</para>

            <orderedlist>
                <listitem>
                    <para>Creating branches for all versions which are
                        currently in <emphasis role="italic">maintenance
                            mode</emphasis>:</para>

                    <screen>osc mbranch</screen>

                </listitem>
                <listitem>
                    <para>Checking the branches out to your local disk. The
                        previous step and this step can be combined into
                        one step:</para>

                    <screen>osc  mbranch -c</screen>

                </listitem>
                <listitem>
                    <para>Creating one or more patches and modifying the
                        associated files (for example the <emphasis
                            role="strong">spec</emphasis> file)</para>
                </listitem>
                <listitem>
                    <para>Submitting the changes back to the <emphasis
                            role="italic">product repo</emphasis></para>
                </listitem>
            </orderedlist>

            <para>The last step will not automatically update the package
                in the <emphasis role="italic">product repo</emphasis>. The
                package maintainer will do that after some necessary
                tests.</para>
        </sect2>
    </sect1>

    <sect1 xml:id="sec-package">
        <title>Package</title>

        <para>The next paragraphs focus on packages. A package consists
            of:</para>

        <itemizedlist>
            <listitem>
                <para>a <filename>spec</filename> file describing how the
                    binary package is to be built from the sources,</para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">pristine
                        sources</emphasis>, means the unmodified base
                    source archive which you usually download from the
                    upstream git repository, possibly accompanied by a
                    signature file,</para>
            </listitem>
            <listitem>
                <para>a <filename>changes</filename> file containing a
                    human readable list of the changes introduced with each
                    patch, and</para>
            </listitem>
            <listitem>
                <para>(possibly) a set of patches to be applied, for
                    example functional enhancements, adaptations to SUSE
                    specifics or bug fixes</para>
            </listitem>
        </itemizedlist>

        <para>Other files might be included in a package, but they are not
            relevant for the purpose of this document. You can find all
            files of a package in the <emphasis role="italic">source
                RPM</emphasis>.</para>

        <para>The command <command>osc ls &lt;PRJ></command> lists all
            packages of a project or repository.</para>

        <para>Example:</para>

        <screen>osc ls devel:tools:scm</screen>

        <para>This command lists all packages in the <emphasis
                role="strong">s</emphasis>ource <emphasis role="strong"
                >c</emphasis>ode <emphasis role="strong"
            >m</emphasis>anagement section of the <emphasis role="strong"
                >devel</emphasis>opment <emphasis role="strong"
                >tools</emphasis>: from <emphasis role="strong"
                >EasyMercurial</emphasis> through <emphasis role="strong"
                >bugzilla</emphasis>, <emphasis role="strong"
                >cvs</emphasis>, <emphasis role="strong">git</emphasis>,
                <emphasis role="strong">osc</emphasis>, <emphasis
                role="strong">rcs</emphasis>, <emphasis role="strong"
                >trac</emphasis>, down to <emphasis role="strong"
                >xmlto</emphasis>.</para>

        <para>With the command <command>osc search</command> (or short
                <command>osc se</command>) you can find the project(s) a
            package is in:</para>

        <para>Example:</para>

        <screen>osc se bugzilla</screen>

        <para>Besides listing the home projects of contributors who have
            created branches of the <emphasis role="strong"
                >bugzilla</emphasis> package, this command returns the
            following information:</para>

        <screen>devel:tools:scm       bugzilla</screen>

    </sect1>

    <sect1 xml:id="sec-get-package">
        <title>Getting the Package</title>

        <para>At a certain point in time, you need to modify a package.
            You</para>

        <orderedlist>
            <listitem>
                <para>either have worked out a fix for a bug
                    yourself,</para>
            </listitem>
            <listitem>
                <para>or found an upstream patch that you want to
                    include,</para>
            </listitem>
            <listitem>
                <para>or you want to upgrade a package to a new
                    version.</para>
            </listitem>
        </orderedlist>

        <para>If you want to update a <emphasis role="italic"
                >package</emphasis>, you should use the existing one as the
            skeleton. You also you must keep and amend the
                <filename>changes</filename> file. If you want to write a
            patch or use an existing patch, you need the current version of
            the package because you simply add your patch to the package. </para>

        <para>At this stage, you should also have a clear idea of the
            directory structure you want to use. One option is to store all
            your patches and packages under your <emphasis role="strong"
                >HOME</emphasis> directory. But you can also consider to
            create subdirectories by topics for the work you currently have
            in progress. In any case, the meta data that are stored by
                <command>osc</command> ensure that the package is submitted
            to the correct directory.</para>

        <sect2 xml:id="sec-devel-repo-main">
            <title>Development Repository – Maintainer or Bugowner</title>

            <para>You can always check out the sources from the <emphasis
                    role="italic">devel repo</emphasis>. But as long as you
                are not the maintainer or bugowner of that repository, you
                usually cannot submit your changes directly. The tool
                    <command>osc</command> knows where a package comes from
                and will automatically submit it back to the correct
                repository.</para>


            <para>After you moved to the directory where you want to work
                on the sources, you can check out the current revision of
                the package by running the command:</para>

            <screen>osc co &lt;PRJ> &lt;PKG></screen>

            <para>where &lt;PRJ> is the project the package is part of
                and &lt;PKG> is the package’s name.</para>

            <para>Example:</para>

            <screen>osc co devel:languages:perl perl-RPM-VersionSort</screen>

            <para>This command checks out a complete directory tree and
                creates <emphasis role="strong"
                    >devel:languages:perl/perl-RPM-VersionSort</emphasis>.
                Inside the <emphasis role="strong"
                    >perl-RPM-VersionSort</emphasis> directory, all
                required files are available: <filename>spec</filename>
                file, <filename>source</filename> archive,
                    <filename>changes</filename> file, patches etc.</para>

            <para>In case you have created several working directories and
                you try to check out a package you already have a working
                copy of, you will get an error message:</para>

            <screen>error: ‘PRJ/PKG’ is already an initialized osc working copy</screen>

            <para>Change to the indicated directory and update the content
                running the command</para>

            <screen>cd &lt;PRJ>/&lt;PKG>; osc update</screen>

            <para>or short</para>

            <screen>cd &lt;PRJ>/&lt;PKG>; osc up</screen>

            <para>This will check out any changed files and tell you which
                revision is the current one. Everything is now set and you
                may proceed to <xref linkend="sec-working-sources"
                />.</para>

        </sect2>

        <sect2 xml:id="sec-devel-repo-non-main">
            <title>Development Repository - Non-Maintainer or Non-Bugowner </title>

            <para>There are at least two situations where you <emphasis
                    role="strong">must not</emphasis> check out directly
                from the <emphasis role="italic">devel
                repo</emphasis>:</para>

            <orderedlist>
                <listitem>
                    <para>If you need to patch an already released package,
                        the <emphasis role="italic">devel repo</emphasis>
                        usually holds a more current version than the
                        released package. You must not update the release
                        version of such a package (the procedure <emphasis
                            role="italic">devel repo → factory → product
                            repo</emphasis> will not work).</para>
                </listitem>
                <listitem>
                    <para>If you are not the maintainer or bugowner of the
                        package, you cannot submit your changes back to the
                            <emphasis role="italic">devel
                        repo</emphasis>.</para>
                </listitem>
            </orderedlist>

            <para>In these cases you need to create a <emphasis
                    role="italic">branch</emphasis> first. Then you need to
                check out the sources from this branch.</para>



            <sect3 xml:id="sec-branching">
                <title>Branching</title>

                <para>The branch you work on will be created on the build
                    server. When you have finished your work and submitted
                    your changes, remove the branch on the build server to
                    free up resources. If you need the branch for
                    additional tasks, you can remove it also at a later
                    point in time. </para>

                <para>Create a branch with the command</para>

                <screen>osc branch &lt;PRJ> &lt;PKG></screen>

                <para>This command creates the subdirectory <emphasis
                        role="strong"
                        >home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></emphasis>
                    on the server and populates it with the source files
                    (spec file, pristine sources, changes file, current set
                    of patches, etc.) of the package. </para>

                <para>If the patch also needs to be applied to maintained
                    versions, this means versions already released as a
                    product, use the command <command>osc mbranch
                        &lt;PKG></command> to branch the projects. The
                        <emphasis role="strong">
                        <quote>m</quote>
                    </emphasis> in <emphasis role="strong">
                        <quote>mbranch</quote>
                    </emphasis> stands for <emphasis role="strong">
                        <quote>multiple</quote>
                    </emphasis>, and not as often wrongly assumed for
                        <emphasis role="strong">
                        <quote>maintenance</quote>
                    </emphasis>.</para>

                <note>
                    <title>Add Package Name</title>
                    <para>Make sure you add the <emphasis role="italic"
                            >package</emphasis> name and <emphasis
                            role="strong">not</emphasis> the <emphasis
                            role="italic">project</emphasis> name to the
                        command <command>osc branch</command>.
                            <command>mbranch</command> automatically
                        detects in which releases the package is under
                        maintenance and creates the appropriate directory
                        structure. Both commands <command>osc
                            branch</command> and <command>osc
                            mbranch</command> provide a list of the files
                        they have created a branch for, and allow you to
                        easily see which releases you need to work
                        on.</para>
                </note>
            </sect3>

            <sect3 xml:id="sec-checkout">
                <title>Check Out</title>

                <para>The commands <command>osc branch</command> and
                        <command>osc mbranch</command> only create a branch
                    on the build server. To create a branch on your local
                    system including copies of the packages you want to
                    work on, check them out with the command</para>

                <screen>osc co home:&lt;username>:branches:&lt;PRJ>&lt;PKG></screen>

                <para>Remember you check out a package from the <emphasis
                        role="italic">devel repo</emphasis> in the same
                    way. </para>

                <para>This command creates the directory structure
                        <emphasis role="strong"
                        >home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></emphasis>
                    in the current directory on your local machine and
                    populates it with all files. </para>

                <para>If you created your new subdirectory by mistake
                    within the wrong local directory, you can remove the
                    newly created one with the command <command>rm
                        -rf</command>. Then move to the correct directory
                    where the new subdirectory should be located, and check
                    out again.</para>

            </sect3>

            <sect3 xml:id="sec-branch-checkout">
                <title>Branch and Check Out</title>

                <para>When you update or modify a package, you usually need
                    to perform both steps, branching the repository, and
                    checking out the package. You can easily combine both
                    steps into one command by typing</para>

                <screen>osc branchco &lt;PRJ> &lt;PKG></screen>

                <para>or by using the short command version</para>

                <screen>osc bco &lt;PRJ> &lt;PKG></screen>

                <para>If you have used the <command>osc mbranch</command>
                    command for branching, you cannot combine the two steps
                        <command>mbranch</command> and
                        <command>checkout</command> into one command.
                    However, you can specify the
                        <option>--checkout</option> option by typing</para>

                <screen>osc mbranch –-checkout &lt;PKG></screen>

                <para>or in short</para>

                <screen>osc mbranch -c &lt;PKG></screen>

                <note>
                    <title>Add Package Name</title>
                    <para>Make sure you add the package name and <emphasis
                            role="strong">not</emphasis> the project name
                        to the command, as this command will branch and
                        check out all projects where the respective package
                        is under maintenance.</para>
                </note>

            </sect3>
        </sect2>
    </sect1>

    <sect1 xml:id="sec-working-sources">
        <title>Working on the Sources</title>

        <para>The sources are now available on your local system and you
            can start modifying them. Change to the package’s working
            directory. If you checked out from the <emphasis role="italic"
                >devel repo</emphasis> or from a <emphasis role="italic"
                >distribution repo</emphasis>, type the command</para>

        <screen>cd &lt;PRJ>/&lt;PKG></screen>

        <para>If you have branched and checked out of that branch, type the
            command</para>

        <screen>cd home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></screen>

        <para>Inside the current working directory, you should find at
            least the following files:</para>

        <orderedlist>
            <listitem>
                <para>the spec file
                    <filename>&lt;PKG>.spec</filename>,</para>
            </listitem>
            <listitem>
                <para>the pristine sources, for example
                        <filename>&lt;PKG>-&lt;vers>.tar.bz2</filename>,</para>
            </listitem>
            <listitem>
                <para>the changes file
                        <filename>&lt;PKG>.changes</filename>,</para>
            </listitem>
            <listitem>
                <para>any patches,</para>
            </listitem>
            <listitem>
                <para>possibly some other files that belong to this package
                    like an <filename>rpmlintrc</filename> file.</para>
            </listitem>
        </orderedlist>

        <para>Your next steps depend on whether you want to</para>

        <orderedlist>
            <listitem>
                <para>upgrade the package to a new version, which is
                    explained in <xref linkend="sec-upgrading"/>, or</para>
            </listitem>
            <listitem>
                <para>patch the package to add functionality or fix a bug,
                    which is explained in <xref linkend="sec-patching"
                    />.</para>
            </listitem>
        </orderedlist>

        <sect2 xml:id="sec-upgrading">
            <title>Upgrading</title>

            <para>When you upgrade the package to a new version of the
                sources, you must also check if any of the old patches are
                obsoleted by the new version and if they still apply
                without (major) problems. You might hit upon an obsolete or
                faulty patch when one or more patches have been submitted
                and accepted upstream and integrated into the sources.
                Existing patches sometimes do not apply without problems
                when the relevant source sections have changed
                considerably, thus confusing the patching program. Fixing
                issues caused by faulty patches can become an iterative and
                painful process.</para>

            <sect3 xml:id="sec-pristine-sources">
                <title>Pristine Sources</title>

                <para>As you created a complete set of new sources, the
                    first step should be to replace the old sources by the
                    new ones. Do not forget to remove the old sources to
                    avoid any <quote>hiccup</quote> within the build
                    service. You might however want to save the old sources
                    to a subdirectory of your HOME directory for reference
                    and fallback. In addition, if the sources come with a
                    checksum (for example an MD5SUM) or a signature, you
                    should include it.</para>
            </sect3>

            <sect3 xml:id="sec-spec-file">
                <title>Spec File</title>

                <para>Modify the spec File to reflect the new release
                    (version, release, source name). First, disable all
                    existing patches, as some of them might be obsolete or
                    have problems being applied (for example if the sources
                    have changed considerably to disrupt the patch
                    program). You can also temporarily move all patches to
                    another directory and bring them back in when
                    required.</para>
            </sect3>

            <sect3 xml:id="sec-build-source-tree">
                <title>Build the Source Tree</title>

                <para>Set up the source tree by running the command:</para>

                <screen>quilt setup &lt;PKG>.spec</screen>

                <para>As there are no patches (yet) available, this command
                    mainly unpacks the TAR archive.</para>

                <note>
                    <title>Asterisk Wild Card</title>
                    <para>Often you can use the command <command>quilt
                            setup *.spec</command> with the asterisk wild
                        card, because usually there is only one spec file.
                        As <command>quilt setup</command> accepts only a
                        single non-option argument, no damage occurs if
                        more than one spec file exists. However, a warning
                        message is emitted. This means you can redo the
                        command with the desired spec file.</para>
                </note>

            </sect3>

            <sect3 xml:id="sec-check-patches">
                <title>Check the Patches</title>

                <para>Now, one by one, inspect the patches that you removed
                    previously. Determine whether they are still needed. As
                    these are ordinary <quote>patch</quote> type patches,
                    you can use the command </para>

                <screen>patch –dry-run -p1 &lt; &lt;wherever>/patchfile</screen>

                <para>to see if the patch applies well. As some patches
                    were built one directory level deeper, you might need
                    to change to that directory and exchange the
                        <command>-p1</command> with <command>-p0</command>. </para>

                <para>If the patch works well, use the command </para>

                <screen>quilt import &lt;wherever>/patchfile</screen>

                <para>to import the patch and add it to the
                        <filename>series</filename> file.</para>

                <para>With the command <command>quilt push</command> (no
                    further arguments) you actually apply the patch. Add
                    the patch to the spec file, while keeping the original
                    numbering, and continue with <xref
                        linkend="sec-build-package"/>. </para>

                <para>If you prefer, you can re-introduce all the patches
                    you removed earlier and build the package subsequently.
                    You can also add one patch at a time and build the
                    package after each addition.</para>

                <para>If a patch is not accepted, you most probably need to
                    re-create it. <xref linkend="sec-patching"/> details
                    how to build a new patch. When you have finished adding
                    all the patches, proceed to <xref
                        linkend="sec-build-package"/>.</para>

            </sect3>

        </sect2>

        <sect2 xml:id="sec-patching">
            <title>Patching</title>

            <para>The previous paragraphs describe how to update a package
                to a new release or version. But usually, you need to work
                on an existing package and add a patch to fix a bug or
                implement a feature.</para>

            <para>If an upstream patch is already available you can use
                that patch (see <xref linkend="sec-check-patches"/>). This
                can be the case if, for example, you need to fix a security
                vulnerability and someone else has already posted a patch
                for it.</para>

            <para>In other cases, you need to create the patch yourself.
                This can be the case if you</para>

            <itemizedlist>
                <listitem>
                    <para>cannot apply an existing patch,</para>
                </listitem>
                <listitem>
                    <para>have analyzed a problem and found a fix
                        yourself,</para>
                </listitem>
                <listitem>
                    <para>or implemented a new feature.</para>
                </listitem>
            </itemizedlist>

            <para>Start by checking out the sources as described in section
                    <xref linkend="sec-get-package"/>. Then proceed to work
                on the sources.</para>

            <sect3 xml:id="sec-setup">
                <title>Setup</title>

                <para>At this stage, you have branched and checked out the
                        <emphasis role="italic">package</emphasis>. It now
                    resides in its directory, and consists of the
                        <filename>spec</filename> file, the TAR archive,
                    any patches, the <filename>changes</filename> file and
                    some additional files.</para>

                <para>The TAR archive contains the <emphasis role="italic"
                        >pristine sources</emphasis>. These are the
                    unmodified sources cloned from a Git repository or
                    downloaded from the project’s upstream Web site. Most
                    packages also already come with a set of patches.
                    Extract the source files from the TAR archive and apply
                    these patches first, as specified in the
                        <filename>spec</filename> file, before starting to
                    build your own patch. </para>

                <para><command>Quilt</command> offers subcommands that will
                    do this for you.</para>

                <para>Initialize the source tree from the TAR archive.
                    Unpack the TAR archive and prepare for the application
                    of the <filename>%prep</filename>section of the
                        <filename>spec</filename> file with the
                    command</para>

                <screen>quilt setup &lt;packagename>.spec</screen>

                <para>You can also try to use the asterisk wild card
                        <filename>*.spec</filename>, but if a package has
                    more than one <filename>spec</filename> file, using the
                    wild card does not work. If this is the case,
                        <command>quilt</command> alerts you.</para>

                <para>While the command <command>quilt setup</command>
                    prepares the sources, it does not apply the patches. It
                    merely creates a <filename>series</filename> file which
                    contains the list of patches from the
                        <filename>spec</filename> file in the correct
                    order. To apply the patches, change to the source
                    directory and run the command <command>quilt push
                        -a</command>.</para>

                <para>This command applies the patches in the order
                    specified in the <filename>series</filename> file. The
                    output of this command shows you which patches are
                    applied to which files, and if everything went smoothly
                    during the application. You are now prepared to add
                    your own patch.</para>

                <note>
                    <title>Symbolic Link</title>
                    <para>Occasionally, especially if there are no patches
                        to be applied, you need do create a symbolic link
                        from the source directory to the checkout directory
                        by typing <command>ln -s ..
                        patches</command>.</para>
                </note>

            </sect3>

            <sect3 xml:id="sec-build-patch">
                <title>Building the patch</title>

                <para>When you build a new patch, you first need to name
                    it. To do so, in the root of the source tree (this is
                    where you just ran the command <command>quilt push
                        -a</command>), run the command</para>

                <screen>quilt new &lt;patchname></screen>

                <para>For a guide on how to name the patch, see the
                    instructions on the openSUSE Web site at <link
                        xlink:href="https://en.opensuse.org/openSUSE:Packaging_Patches_guidelines#Patch_naming"
                        >https://en.opensuse.org/openSUSE:Packaging_Patches_guidelines#Patch_naming</link></para>

                <note>
                    <title>Name Your Patch</title>
                    <para>Do not forget to name your new patch, else any
                        changes you make will be added to the last
                        patch!</para>
                </note>

                <para>To keep everything under control, you <emphasis
                        role="strong">must not</emphasis> use your favorite
                    editor to modify a file (although it is perfectly fine
                    to peek into a file using your editor). From the root
                    of the source tree, run the command: </para>

                <screen>quilt edit dir/file </screen>

                <para>This command does some <quote>bookkeeping</quote>;
                    for example it saves the original version of the file.
                    Then it invokes your editor (from the <emphasis
                        role="italic">EDITOR</emphasis> environment
                    variable) on the respective file. Subsequently it adds
                    some more information so that the changes later end up
                    in your patch. </para>

                <para>You can run the command <command>quilt edit</command>
                    on several files at once: </para>

                <screen>quilt edit dir1/file1 dir2/file2</screen>

                <para>You can also run <command>quilt edit</command>
                    multiple times on the same file, reverting and amending
                    previous changes. Only the differences between the
                    original version and the end version are recorded in
                    the patch. The first time you run this command the
                    original file is saved. Each time you leave the editor,
                    the current state of the file is compared to this copy
                    and the patch is created from the differences. If you,
                    for example, make thousands of changes, which, in
                    effect, only change one line, then the patch will
                    contain only the changes to this single line.</para>

                <para>When you build a patch, you should follow these
                    rules:</para>

                <orderedlist>
                    <listitem>
                        <para>Make sure you include all required changes in
                            one patch. Do not combine multiple fixes in one
                            patch.</para>
                    </listitem>
                    <listitem>
                        <para>Create multiple patches, if required.</para>
                    </listitem>
                </orderedlist>

                <para> This will make it easier to remove a single patch
                    later, for example if the changes are accepted
                    upstream.</para>

            </sect3>

            <sect3 xml:id="sec-including-patch">
                <title>Including the Patch</title>

                <para>When you have finished the modifications of the
                    sources, run the command <command>quilt
                        refresh</command> to make sure that the patch is
                    stored in the same directory as all other patches. </para>

                <para>Then change to the checkout directory by typing
                        <command>cd ..</command> and prepare for the
                    inclusion of the patch.</para>

                <sect4 xml:id="sec-incl-patch-build-service">
                    <title>Build Service</title>

                    <para>Now make your patch known to the build service
                        with the command <command>osc ar</command>.</para>
                    <para>You can also use the command <command>osc add
                            &lt;patchname></command> but the former one
                        helps you to remove files no longer needed.</para>
                </sect4>

                <sect4 xml:id="sec-incl-patch-spec-file">
                    <title>Spec File</title>

                    <para>Next, add the patch to the spec file. Add at
                        least two lines:</para>

                    <screen>Patch&lt;n>: &lt;patchname></screen>

                    <para>and</para>

                    <screen>%patch&lt;n> -p1</screen>

                    <para>The first line belongs to the header section,
                        usually right after any <emphasis role="strong"
                            >Source&lt;n>:</emphasis> lines. Above the
                            <emphasis role="strong">Patch&lt;
                            n>:</emphasis> line you should also add a
                        comment line describing what the patch tries to
                        accomplish. Make sure to align the patch name with
                        any other columns above, for example the <emphasis
                            role="strong">Source&lt;n>:</emphasis>
                        lines.</para>

                    <para>The second line goes into the <emphasis
                            role="strong">%prep </emphasis> section, again
                        appended to the end of any list of existing
                            <emphasis role="strong"
                            >%patch&lt;n></emphasis> lines. Don't
                        forget that the command <command>quilt
                            edit</command> creates a patch with a patch
                        level of <emphasis role="strong"
                        >-p1</emphasis>.</para>

                    <note>
                        <title>Adding Lines to Spec File</title>
                        <para>Whenever you add these two lines, keep to the
                            given style, aligning columns and appending
                            lines to already existing sets of lines of the
                            same type. Also, do not fill holes in the patch
                            numbers: your patches number is the number of
                            the last patch <emphasis role="strong">plus
                                one</emphasis>. If your patch is the first
                            one, then it is named <emphasis role="strong"
                                >Patch1</emphasis>.</para>
                    </note>

                </sect4>

                <sect4 xml:id="sec-incl-patch-changes">
                    <title>Changes</title>

                    <para>Another important file is the
                            <filename>changes</filename> file. The naming
                        convention usually is
                            <filename>&lt;package>.changes</filename>.
                        This file is maintained through the command
                            <command>osc vc</command>.</para>

                    <para>This command opens an editor on the given
                            <filename>changes</filename> file. As there is
                        not much space to fill in your changes, try to
                        limit the number of items you want to include here.
                        This is especially difficult if you update a
                        package where a lot of changes were made upstream.
                        In this case, mention only the most important
                        changes and refer to the respective change log on
                        the Web.</para>

                    <para>In the change file, you <emphasis role="strong"
                            >must</emphasis> mention the following
                        information:</para>

                    <itemizedlist>
                        <listitem>
                            <para>A BUGZILLA reference if a bug was fixed
                                with this patch. To help others find the
                                bug, prepend the number with a shorthand
                                for bugzilla: <emphasis role="strong">bsc
                                    (suse.com)</emphasis>, <emphasis
                                    role="strong">bnc
                                    (novell.com)</emphasis>, <emphasis
                                    role="strong">boo
                                    (opensuse.org)</emphasis> followed by a
                                hash sign (for example <emphasis
                                    role="strong"
                                >bsc#1234567</emphasis>)</para>
                        </listitem>
                        <listitem>
                            <para>A FATE reference if you add a feature.
                                Like the BUGZILLA references, this consists
                                of the word <quote>fate</quote> followed by
                                a hash, followed by the FATE number (for
                                example <emphasis role="strong"
                                    >fate#123456</emphasis>). </para>
                        </listitem>
                        <listitem>
                            <para>The patch name</para>
                        </listitem>
                        <listitem>
                            <para>The Common Vulnerabilities and Exposures
                                (CVE) ID if the patch closes a security
                                issue (for example <emphasis role="strong"
                                    >CVE-1234-5678</emphasis>).</para>
                        </listitem>
                    </itemizedlist>

                    <para>For more information about how to create a
                            <filename>changes</filename> file, refer to the
                        openSUSE Web page at <link
                            xlink:href="https://en.opensuse.org/openSUSE:Creating_a_changes_file_(RPM)"
                            >https://en.opensuse.org/openSUSE:Creating_a_changes_file_(RPM)</link>.</para>

                    <para>If you have more than one BUGZILLA or FATE
                        reference, because the bug was reported or the
                        feature was requested for more than one release,
                        you must add all references. To avoid the rejection
                        of your patch, make sure that you include the
                        requested information in the
                            <filename>changes</filename> file. </para>

                </sect4>

            </sect3>

            <sect3 xml:id="sec-commit">
                <title>Commit</title>

                <important>
                    <title>Embargoed Bugs</title>
                    <para>Occasionally you will be asked to fix a bug that
                        is EMBARGOED. These bugs usually concern security
                        violations (CVEs). This means no information has
                        been released yet about this bug. Never commit
                        anything to OBS while bugs are still
                        embargoed.</para>
                </important>

                <para>If your local machine runs one of the architectures
                    the package will need to be built for, you can build it
                    locally with the command <command>osc
                    build</command>.</para>

                <para>This command creates a build environment on your
                    local machine, installs tools and packages required to
                    build the package and actually builds it. You can use
                    this command also to keep all the information local.
                    After the package is built, you can immediately get it
                    and test it locally. </para>

                <para>At this stage, you have:</para>

                <orderedlist>
                    <listitem>
                        <para>added your patch(es) to the
                                <filename>spec</filename> file (<emphasis
                                role="strong">&lt;some
                                editor></emphasis>
                            <filename>*.spec</filename>)</para>
                    </listitem>
                    <listitem>
                        <para>added an entry to the
                                <filename>changes</filename> file (with the
                            command <command>osc vc</command>)</para>
                    </listitem>
                    <listitem>
                        <para>made your patches known to
                                <command>osc</command> (with the command
                                <command>osc ar</command>)</para>
                    </listitem>
                </orderedlist>

                <para>To send the changed files to the build server and
                    build the package, run the command <command>osc
                        commit</command> without further arguments. This
                    command:</para>

                <orderedlist>
                    <listitem>
                        <para>starts an editor to allow you to add a
                            message; even if you have already added
                            information to the
                            <filename>changes</filename>, an additional
                            commit message is helpful</para>
                    </listitem>
                    <listitem>
                        <para>synchronizes the files on the build server
                            with the local files by:</para>
                        <orderedlist>
                            <listitem>
                                <para>adding or removing files according to
                                    the command <command>osc
                                    ar</command>and</para>
                            </listitem>
                            <listitem>
                                <para>transferring modified files</para>
                            </listitem>
                        </orderedlist>
                    </listitem>
                    <listitem>
                        <para>triggers one or more builds for various
                            architectures and/or releases</para>
                    </listitem>
                </orderedlist>

            </sect3>
        </sect2>
    </sect1>

    <sect1 xml:id="sec-build-package">
        <title>Build the Package</title>

        <para>When you use the command <command>osc commit</command> to
            submit your changes, the build service starts to build the
            package for various projects and architectures. Depending upon
            the load, this may take a while. You can check the progress by
            running the command <command>osc r</command>.</para>

        <para>The output shows three columns containing:</para>

        <orderedlist>
            <listitem>
                <para>the project (for example <emphasis role="strong"
                        >openSUSE_Leap_42.2</emphasis> or <emphasis
                        role="strong">openSUSE_Factory</emphasis>)</para>
            </listitem>
            <listitem>
                <para>the architecture (for example <emphasis role="strong"
                        >x86_64</emphasis> or <emphasis role="strong"
                        >ppc64</emphasis>)</para>
            </listitem>
            <listitem>
                <para>the status (for example <emphasis role="strong"
                        >scheduled</emphasis>, <emphasis role="strong"
                        >building</emphasis>, <emphasis role="strong"
                        >succeeded</emphasis>, or <emphasis role="strong"
                        >failed</emphasis>)</para>
            </listitem>
        </orderedlist>

        <para>If the status includes an asterisk (for example <emphasis
                role="strong">succeeded*</emphasis>), this means the status
            is outdated. You should always double check if a status is
            outdated. If you are in doubt, use the command <command>osc
                buildlog</command> or <command>osc bl</command> to check
            the status. If the status is <emphasis role="strong"
                >building</emphasis>, <emphasis role="strong"
                >succeeded</emphasis>, or <emphasis role="strong"
                >failed</emphasis>, look at the build log using the
                <command>osc bl &lt;PRJ> &lt;ARCH></command>
            subcommand for further information (&lt;PRJ> is the project
            and &lt;ARCH> is the machine architecture).</para>

        <para>In the early stages of the build process, the <command>osc
                r</command> command does not return any output. In such
            cases repeat the command. If <command>osc r</command>
            consistently includes an asterisk, run the <command>osc
                bl</command> command to verify if the status is really
            outdated. </para>

        <note>
            <title>Dates and Times</title>
            <para>Dates and times in the build log output are displayed in
                Coordinated Universal Time (UTC). </para>
        </note>

        <para>The build log is also very useful if a build has failed: the
            output contains information about what caused the failure. Use
            this information to fix the cause and re-commit.</para>

    </sect1>

    <sect1 xml:id="sec-test">
        <title>Test</title>

        <para>When the package has been built (you can find the list of
            packages built at the end of the build log output), you should
            test your changes. Depending on the kind of package you have
            been working on, you can</para>

        <itemizedlist>
            <listitem>
                <para>use a physical machine from the Orthos pool or</para>
            </listitem>
            <listitem>
                <para>set up a virtual machine</para>
            </listitem>
        </itemizedlist>

        <para>You obtain the packages using the command</para>

        <screen>osc getbinaries &lt;PRJ> &lt;ARCH></screen>

        <para>If you also want to get the source RPM, add the option
                <option>--sources</option>.</para>

        <para>The files are saved in the directory <emphasis role="strong"
                >binaries</emphasis> in the current directory. Use the
            option <option>-d DIR/--destdir=DIR</option> to specify a
            different destination. The command displays a list of fetched
            files.</para>

    </sect1>

    <sect1 xml:id="sec-submit">
        <title>Submit</title>

        <para>After you have tested the package successfully, you usually
            want to release it. This task is called <emphasis role="strong"
                >submit</emphasis>.</para>

        <para>If you haven’t done so already, add a comment to the
            changelog with the command <command>osc vc</command>
        </para>

        <para>To submit the package, type <command>osc sr</command>. This
            command requires no further arguments as the changes are
            submitted to where the package was checked out from beforehand.
            Also, if you submit to your branch, a request is sent to the
            maintainer or to the bugowner of the package to include the
            changes into the repository where you branched from. If you are
            the maintainer or bugowner and had checked out from the
                <emphasis role="italic">devel repo</emphasis>, this command
            updates the <emphasis role="italic">devel repo</emphasis>. If
            you branched via the command <command>osc mbranch</command> and
            you submit now to one of the branches, the command <command>osc
                sr</command> will detect this and will <quote>request to
                open a NEW maintenance incident instead</quote>. If you
            submitted from an <emphasis role="italic">mbranch</emphasis> or
            to your <emphasis role="italic">personal </emphasis> branch,
            your work is done: others will follow up and finish the
            work.</para>

        <para>If you submitted to the <emphasis role="italic">devel
                repo</emphasis>, to fulfill the <emphasis role="strong"
                >Factory first</emphasis> policy, you should then submit
            the changes to <emphasis role="italic">Factory</emphasis>/>
            with the command</para>

        <screen>osc sr &lt;PRJ>/&lt;PKG> openSUSE:Factory</screen>

        <para>This will not immediately submit the package to <emphasis
                role="italic">Factory</emphasis>, but it will be marked for
            submission. When the package is accepted in the <emphasis
                role="italic">devel repo</emphasis>, it will automatically
            be submitted to <emphasis role="italic">Factory</emphasis>,
            where it again needs to be accepted.</para>

        <para>All requests can be inspected at</para>

        <itemizedlist>
            <listitem>
                <para>the <emphasis role="italic">Open Build Service</emphasis> at <link
                        xlink:href="https://build.opensuse.org/request/show/&lt;RequestID>"
                        >https://build.opensuse.org/request/show/&lt;RequestID</link>
                    for normal submit requests, or at</para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">Internal Build Service</emphasis> for maintenance
                    requests.</para>
            </listitem>
        </itemizedlist>

        <para>After a certain period of time your new package will be
            accepted.</para>

    </sect1>

    <sect1 xml:id="sec-propagate-patch">
        <title>Propagate a patch</title>

        <para>Sometimes you need to patch a package in more than one
            repository.</para>

        <para>A useful technique to do so is to start at one end of the
            sequence of releases. This could be the oldest or the newest
            release, for example the version in the <emphasis role="italic"
                >devel repo</emphasis>. Now work your way down to the other
            end, to the newest or the oldest release. At the start end, you
            build the patch and test it. Then you change to the next (newer
            or older) package instance and use the patch from the previous
            step as the basis (use <command>patch –-dry-run</command>,
                <command>quilt import</command>, <command>quilt
                push</command>). In theory this approach assumes that, at
            each step, the package will not have changed much so the patch
            from the previous step can be applied, albeit with some
            correction. Sometimes this does not work; then you need to
            re-write the patch from scratch. But usually this method works,
            saves some time and prevents errors.</para>

    </sect1>

    <sect1 xml:id="sec-conclusion">
        <title>Conclusion</title>

        <para>In summary, the tasks you usually perform to modify a package
            and submit a patch are the following:</para>

        <orderedlist>
            <listitem>
                <para>
                    <command>osc bco &lt;PRJ> &lt;PKG></command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>cd home:&lt;username>:branches:…</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>quilt setup *.spec</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>cd &lt;sources></command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>quilt push -a</command>
                </para>
            </listitem>
            <listitem>
                <para> write your patch/modify the package </para>
            </listitem>
            <listitem>
                <para>
                    <command>quilt refresh</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>cd ..</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc ar</command> (<emphasis role="italic"
                        >Don't forget this step!</emphasis>) </para>
            </listitem>
            <listitem>
                <para>
                    <command>EDITOR *.spec</command> (<emphasis
                        role="italic">add the patch</emphasis>) </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc vc</command> (<emphasis role="italic">add
                        description</emphasis>) </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc commit</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc r</command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc bl &lt;REPOSITORY>
                        &lt;PKG></command>
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>osc submitrequest</command>
                </para>
            </listitem>
        </orderedlist>

        <para>After having followed all the steps above, you have submitted
            your first patch. If you have learned new things, don’t
            hesitate to share your knowledge with others. If you stumbled
            across a problem not covered in this paper, or if you found
            another solution that saves some work, don’t hesitate to send
            your feedback to <email>doc-team@suse.com</email> and help
            enhance this document. </para>

    </sect1>
        
    
    <?pdfpagebreak style="sbp" formatter="fop"?>
    
    <xi:include href="sbp-legal-notice.xml"/>
    
    <?pdfpagebreak style="sbp" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
