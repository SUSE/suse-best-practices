<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--
  2013-02-25: According to jsrain, no changes except changing SP numbers
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-update-auto" os="sles">
 <title>Automated Upgrade from &sle; 11 SP2 to 11 SP3</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  The following procedure is a way to do a mass upgrade unattended from
  &sle;&nbsp;11 SP2 to &sle;&nbsp;11 SP3. Several preparation
  steps are needed to create a suitable &ay; profile. &ay; finally
  will execute the upgrade process.
 </para>
 <sect1 xml:id="sec-update-auto-prep-autoyast">
  <title>Preparing the &ay; Profile</title>

  <para>
   The &ay; profile for the automated upgrade uses the same file format
   as the &ay; installation. For more information about &ay;, see
   <xref linkend="cha-deployment-autoinst"/> and
   <xref linkend="book-autoyast"/>.
  </para>

  <para>
   However, there are some parts of the system (for example, partitioning)
   that do not make sense to be configured during the upgrade. On the other
   hand, it is useful to set upgrade-specific options by means of the
   &ay; profile.
  </para>

  <sect2 xml:id="sec-update-auto-prep-autoyast-upgrade">
   <title>Upgrade</title>
   <para>
    The upgrade options define the behavior of the dependency solver during
    upgrade:
   </para>
<screen>&lt;upgrade&gt;
  &lt;only_installed_packages
    config:type="boolean"&gt;false&lt;/only_installed_packages&gt;
  &lt;stop_on_solver_conflict
    config:type="boolean"&gt;true&lt;/stop_on_solver_conflict&gt;
&lt;/upgrade&gt;</screen>
   <variablelist>
    <varlistentry>
     <term><literal>only_installed_packages</literal>
     </term>
     <listitem>
      <para>
       Set to <literal>true</literal> for package-based upgrades
       (recommended for upgrading to the next service pack of the same
       product) or <literal>false</literal> for pattern-based upgrades
       (recommended for an upgrade between versions of a product, for
       example, from SLES10 to SLES11).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>stop_on_solver_conflict</literal>
     </term>
     <listitem>
      <para>
       Defines whether to show the proposal in case of failure to resolve
       package dependencies interactively (recommended to be set to
       <literal>true</literal>, but this could result in an interactive
       process, during which the user needs to resolve the conflicts
       manually).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-update-auto-prep-autoyast-sw-selection">
   <title>Software Selection</title>
   <para>
    The software selection options define, which components to select or
    deselect in addition to the results of the resolver:
   </para>
<screen>&lt;software&gt;
  &lt;packages config:type="list"&gt;
    &lt;package&gt;autoyast2-installation&lt;/package&gt;
    &lt;package&gt;apparmor-profile-editor&lt;/package&gt;
  &lt;/packages&gt;
  &lt;patterns config:type="list"&gt;
    &lt;pattern&gt;base&lt;/pattern&gt;
  &lt;/patterns&gt;
  &lt;remove-packages config:type="list"/&gt;
  &lt;remove-patterns config:type="list"/&gt;
&lt;/software&gt;</screen>
   <para>
    It is especially important to set packages or patterns for being
    selected or deselected to resolve package conflicts and thus to
    avoid the need for interactive intervention. After the upgrade is done,
    the newly created <filename>autoupg_updated.xml</filename> file contains
    these packages and patterns plus those that were selected or deselected
    for any other reason.
   </para>
  </sect2>

  <sect2 xml:id="sec-update-auto-prep-autoyast-backup">
   <title>Backup Before Upgrade</title>
   <para>
    The backup before upgrade options match these features in the upgrade
    proposal.
   </para>
<screen>&lt;backup&gt;
  &lt;sysconfig config:type="boolean"&gt;true&lt;/sysconfig&gt;
  &lt;modified config:type="boolean"&gt;true&lt;/modified&gt;
  &lt;remove_old config:type="boolean"&gt;false&lt;/remove_old&gt;
&lt;/backup&gt;</screen>
   <variablelist>
    <varlistentry>
     <term><literal>sysconfig</literal>
     </term>
     <listitem>
      <para>
       defines whether to back up sysconfig before upgrading.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>modified</literal>
     </term>
     <listitem>
      <para>
       defines whether to back up the modified configuration files before
       upgrading.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>remove_old</literal>
     </term>
     <listitem>
      <para>
       defines whether to remove old backups from previous upgrades.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-update-auto-run">
  <title>Running the Automated Upgrade</title>

  <para>
   To start the automated upgrade, boot the installation media and pass the
   &ay; profile to it. There are two ways to pass the profile to the
   system:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Pass the profile to the kernel command line the same way as for the
     &ay; installation (use the <literal>autoupgrade=1</literal>
     <filename>autoyast=http://host/path/profile.xml</filename> parameter.
     For &zseries;, this is the only possibility.
    </para>
   </listitem>
   <listitem>
    <para>
     Pass the <literal>autoupgrade=1</literal> parameter to the kernel
     command line. Before you start the upgrade, copy the profile to
     <filename>/root/autoupg.xml</filename>. Then there is no need for any
     additional kernel parameter.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The latter approach allows you to have a single installation kernel
   command line for even different machines&mdash;just copy the
   appropriate profile into its file system.
  </para>

  <para>
   As long as you have only one &sle; system installed on your machine,
   there are no package conflicts and you did not set the profile to stop on
   the upgrade proposal, the complete process will be non-interactive. In
   case you enter the upgrade proposal, you can modify its settings for the
   upgrade.
  </para>

  <para>
   After the upgrade finishes, &yast; writes the
   <filename>/root/autoupg-updated.xml</filename> file, which contains the
   profile with applied software selection changes done in the proposal.
   This is especially useful in case of mass upgrades of machines with the
   same package selection. This way, conflict resolutions from one machine
   can easily be applied on other machines, which consequently will get
   these conflicts resolved automatically and the upgrade itself will be
   non-interactive.
  </para>

  <para>
   If there are more &sle; systems installed on the machine, you will
   always be asked, which one to upgrade&mdash;there is no way to select
   it in advance.
  </para>
 </sect1>
 <sect1 xml:id="sec-update-auto-grub">
  <title>&grub; Menu Section for Booting into the Upgrade</title>

  <remark condition="clarity">
   2014-02-10 - fs: FIXME: This entry needs to be adjusted to GRUB 2. ATM I
                           have no clue how to do it in GRUB 2.
  </remark>

  <para>
   An alternate way to boot the system is to create an additional section in
   the &grub; menu (and similar for other boot loaders and other
   architectures), which starts the installation. The following example
   assumes that there is a separate <filename>/boot</filename> partition,
   which is referred in &grub; as <literal>(hd0,0)</literal>:
  </para>

<screen>title Upgrade
    root (hd0,0)
    kernel /upgrade/linux
    install=<replaceable>inst_source_url</replaceable> autoupgrade=1
    autoyast=<replaceable>autoyast_profile_url</replaceable> vga=0x314
    initrd /upgrade/initrd
  </screen>

  <para>
   The above example assumes that the installation kernel and the
   installation <systemitem>initrd</systemitem>
<!--(see <xref
        linkend="update-auto-prep-mod"/>)-->
   are located in the <filename>/boot/upgrade</filename> directory.
  </para>

  <para>
   On &zseries;, you must add the parameters to the PARM
   file&mdash;proceed the same way as you do when performing an
   &ay;-driven installation.
  </para>
 </sect1>
 <sect1 xml:id="sec-update-auto-2nd-stage">
  <title>Second Stage of the Upgrade</title>

  <para>
   The automated upgrade by default does not perform configuration changes
   during the second stage of the upgrade. The only exception is network
   configuration, which needs to be set to be preserved in the &ay;
   upgrade profile.
  </para>

  <para>
   If configuration adjustment of some system areas is needed after the
   upgrade (for example, configuring a new service), add the relevant
   sections to the &ay; profile for the upgrade and the configuration of
   the selected system areas will be saved during the upgrade.
  </para>

  <warning>
   <title>&ay; Supplied Configuration Replaces Existing Configuration</title>
   <para>
    Be warned that existing configuration of that system area will be
    replaced and thus destroyed by the &ay; configuration.
   </para>
  </warning>

  <para>
   Normally, the only configuration adjustment, which should be done in
   the &ay; profile, is the registration of the system with &smtool;
   (&smt;) or &scc; (SCC). If this is missing, the system will not get
   the update repository and updates will not be possible&mdash;unless
   configured later again.
  </para>
 </sect1>
 <sect1 xml:id="sec-update-auto-limitations">
  <title>Limitations and Hints</title>

  <para/>

  <sect2 xml:id="sec-update-auto-limitations-nm">
   <title>&nm; and Registration</title>
   <para>
    In case of using &nm; for managing network devices and network
    connections, network connection is not available during the second stage
    of the upgrade. This prevents the system from performing the
    registration.
   </para>
  </sect2>

  <sect2 xml:id="sec-update-auto-limitations-clean">
   <title>Cleaning Up Upgrade Setting</title>
   <para>
    If you do any changes in your system to trigger the upgrade
    process (for example, adding a new section to the boot loader menu), you
    probably want to remove it after the upgrade is done.
   </para>
   <para>
    <remark condition="clarity">
     2014-02-10 - fs: FIXME: Check if such a script still exists for GRUB 2
     and/or ELILO
    </remark>
    You can do it automatically with a post-installation script. Find an
    examples in <xref linkend="createprofile-scripts"/>. A sample script
    cleaning up &grub;'s <filename>menu.lst</filename> is included in the
    sample <filename>autoupg.xml</filename> file. Make sure that the script
    matches your particular setup and that it does not remove more than you
    actually want!
   </para>
  </sect2>

  <sect2 xml:id="sec-update-auto-limitations-info">
   <title>For More Information</title>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Linuxrc Documentation:
      <link xlink:href="http://en.opensuse.org/SDB:Linuxrc"/>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
</chapter>
