<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>

<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-sbp-slsa" xml:lang="en">

 <info>
  <title>SLSA: Securing the Software Supply Chain</title>
  <productname>All SUSE Products</productname>
  <!--<productnumber>12, 15</productnumber>-->

  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:url>https://github.com/SUSE/suse-best-practices/issues</dm:url>
    <dm:product/>
   </dm:bugtracker>
   <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
  </dm:docmanager>

  <author>
   <personname>
    <firstname>Marcus</firstname>
    <surname>Meissner, Distinguished Engineer Solutions Security, SUSE</surname>
   </personname>
   <!--      <affiliation>
    <jobtitle>Senior Software Engineer</jobtitle>
    <orgname>SUSE</orgname>
    </affiliation>-->
  </author>
  
  <author>
   <personname>
    <firstname>Jana</firstname>
    <surname>Jaeger, Project Manager Technical Documentation, SUSE</surname>
   </personname>
   <!--      <affiliation>
    <jobtitle>Senior Software Engineer</jobtitle>
    <orgname>SUSE</orgname>
    </affiliation>-->
  </author> 
  
  
  
  <!--    <cover role="logos">
   <mediaobject>
   <imageobject>
   <imagedata fileref="suse.svg"/>
   </imageobject>
   </mediaobject>
   <mediaobject>
   <imageobject>
   <imagedata fileref="amd.jpg"/>
   </imageobject>
   </mediaobject>
   </cover>-->
  <date>June 4, 2022</date>
  <abstract>
   <!--
    <para>Securing our software supply chain is a top priority for SUSE to ensure that our customers
    are protected from security risks, known and zero-day vulnerabilities. Ensuring that no threat
    actor can inject malicious code within our build service systems is certified by industry leading
    security certifications. Our teams continually work to certify all SUSE products, and develop
    security solutions to ensure the highest level of trust and reliability for our customers. </para>
    -->
   <para> This document details how SUSE, as a long-time champion and expert of software supply chain security,
    prepares for SLSA L4 compliance. </para>

   <para>
    <emphasis role="strong">Disclaimer</emphasis>: This document is part of the SUSE Best Practices
    series. All documents published in this series were contributed voluntarily by SUSE employees
    and by third parties. If not stated otherwise inside the document, the articles are intended
    only to be one example of how a particular action could be taken. Also, SUSE cannot verify
    either that the actions described in the articles do what they claim to do or that they do not
    have unintended consequences. All information found in this document has been compiled with
    utmost attention to detail. However, this does not guarantee complete accuracy. Therefore, we
    need to specifically state that neither SUSE LLC, its affiliates, the authors, nor the
    translators may be held liable for possible errors or the consequences thereof. </para>
  </abstract>
 </info>
 
 <sect1 xml:id="sec-why-slsa">
  <title>Software supply chain security at SUSE</title>

  <para> Securing our software supply chain is a top priority for SUSE to protect our customers from
   security risks, known and zero-day vulnerabilities. Ensuring that no threat actor can inject
   malicious code into our build service systems is attested by industry-leading security
   certifications. Our teams continually work to certify all SUSE products, and develop security
   solutions to offer our customers the highest level of trust and reliability. </para>

  <!-- this para reads strange ... rephrase -->

  <para> A new industry standardization effort named SLSA (Supply chain Levels for Software
   Artifacts), started by Google and driven by several industry stakeholders, aims to protect the
   integrity of the software supply chain. </para>

  <para> SLSA defines four levels of assurance, going from basic requirements at level 1 to strict
   rules and documentation requirements at level 4. </para>

  <para> While the SLSA standard is still in development, SUSE already considers it as a great
   representation of needs for a secure product build environment, and we are adjusting our
   processes and tooling to meet the requirements of the highest assurance level 4. </para>
 </sect1>
 <sect1 xml:id="sec-supplychain">
  <title>Background: Threats to the supply chain and their mitigation</title>

  <para> The software supply chain contains several known points of attack. They are illustrated by
   the graphic below. For an exhaustive list of threats and their mitigation, refer to <link
    xlink:href="https://slsa.dev/spec/v0.1/threats"/>. </para>

  <figure>
   <title>Software supply chain and possible threats</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="slsa_threat-sources.svg" width="80%" format="SVG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slsa_threat-sources.svg" width="30%" format="SVG"/>
    </imageobject>
    <textobject role="description">
     <phrase>Software supply chain and possible threats</phrase>
    </textobject>
   </mediaobject>
  </figure>

  <variablelist>
   <varlistentry>
    <term>Source threats</term>
    <listitem>
     <para> Typical source code threats include bad code that introduces vulnerabilities or a
      compromised source control system. To address bad code injection, SLSA mandates two-person
      reviews. To prevent source code from getting compromised, SLSA mandates strong measures to
      secure the source control systems. </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Build threats</term>
    <listitem>
     <para> Build threats include code commits to the build that were not tracked by the source
      control system, a compromised build platform, bypassing the CI/CD system, a compromised
      package repository, and injecting bad packages. Most build threats are mitigated by
      maintaining a controlled build environment, where each build is also fully encapsulated on its
      own, not influenceable from outside, or even reproducible. To prove this to the outside,
      detailed provenance data can be generated, which allows for the external inspection of the
      builds. Strong security controls ensure that the build platform is not easily compromised.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dependency threats</term>
    <listitem>
     <para> Dependency threats come into play where risky dependencies are used. SLSA addresses this
      kind of threat by mandating provenance for all artifacts (files, git commits, directories of
      files, container images, ...), so one would have an indication that this dependency was not
      built from the proper builder or out of the designated GitHub repository. </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-slsa-components">
  <title>SLSA components</title>

  <para> SLSA is designed to standardize the four key components of a software supply chain. Learn
   about these components, the respective SLSA requirements, and whether and how SUSE's build
   process meets these requirements today. </para>

  <para> For a complete summary of SLSA requirements, refer to the official SLSA project pages:
    <link xlink:href="https://slsa.dev/spec/v0.1/requirements"/>. </para>

  <note>
   <title>Reading the requirement tables</title>
   <para> To understand the SLSA requirement tables, check the following legend: </para>
   <simplelist type="horiz" columns="2">
    <member>&#x2713;</member>
    <member>Yes</member>
    <member>&#x274c;</member>
    <member>No</member>
    <member>&#x25cb;</member>
    <member>Best effort</member>
   </simplelist>
  </note>

  <sect2 xml:id="sec-source">
   <title>Source code management</title>
   <para> Keeping source code integrity is the key aspect of supply chain integrity. Source code
    integrity needs to be defended against all threats originating from insider or outsider attacks. </para>
   <para> SLSA mandates the following criteria to be met to ensure source code integrity: </para>
   <table>
    <title>SLSA4 Source requirements and SUSE's OBS</title>
    <tgroup cols="3">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <thead>
      <row>
       <entry> Requirement </entry>
       <entry> Required at SLSA4 </entry>
       <entry> Met by OBS/SUSE </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry> Version-controlled </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Verified history </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Retained indefinitely </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Two-person reviewed </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>

   <para> See how SUSE's current software building pipeline that uses the Open Build Service (OBS)
    meets the above requirements: </para>
   <variablelist>
    <varlistentry>
     <term>Version-controlled source</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Changes to the source must be tracked in a version control system which, in turn,
          needs to provide a <emphasis>change history</emphasis> that contains both the identities
          of the uploader and the reviewers, time stamps of the reviews/submissions, a comprehensive
          description of the change, its content, and parent reviews. The version control system
          must also provide an <emphasis>immutable reference</emphasis> to each revision. This
          requirement is met by most current version control systems, for example, git. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> OBS meets this requirement as it assigns numeric identifiers to commits. The commit
          stores information about the author, the commit time, a comment describing the commit, and
          other information. The commit also contains an identification of the source content, like
          the <emphasis>tree</emphasis> object in git. OBS uses an MD5 sum for identification
          purposes, but also makes sure that there is no collision with other source content.
         </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Verified revision history</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> The history of a revision must be verifiable, that is, it must contain a time stamp
          and carry at least one strongly authenticated actor identity. Actors in this context are
          the author, submitter, or reviewer of the revision. Identities themselves must be
          verifiable and use a two-step verification process, or something similar. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Each commit stores information about the author and commit time. It also contains a
          comment describing the commit and other information. Identities of all actors are
          verifiable and use two-factor authentication. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Revision and change history are retained indefinitely</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> The revision and its change history must be preserved indefinitely and cannot be
          deleted. Exceptions can be made if there is a legal or policy requirement that mandates
          the obliteration of this revision/change history. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> SUSE retains all sources, but also any shipped binary indefinitely. A retraction of
          a shipped update from the customer's channels does not lead to its removal from the build
          system. Furthermore, all source references and binary shipments including bug tracker
          references (CVE, bugzilla) are tracked by the build system for each shipment channel.
         </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Two-person reviewed</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Two trusted persons (see above) need to agree to every change in the revision
          history before it is submitted. Both of them must be strongly authenticated. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The workflows for creating a new product and delivering maintenance updates involve
          multiple parties, like the core code review team and the maintenance or product release
          managers as a minimum. Furthermore, there are reviews by subject matter experts and
          additional checks for quality assurance and legal aspects. These reviews are enforced by
          the OBS, and a single decline rejects the entire release process. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-build">
   <title>Building and build system</title>
   <para> The next part of the integrity chain is the actual build process that turns sources to
    binaries. The entire build process must be secured against any kind of unknown or outside
    influence to avoid possible tampering with the builds. Builds must be reproducible to
    allow verification and checking of build results. </para>
   
   <table>
    <title>SLSA4 Build (process) requirements and SUSE's OBS</title>
    <tgroup cols="3">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <thead>
      <row>
       <entry> Requirement </entry>
       <entry> Required at SLSA4 </entry>
       <entry> Achieved </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry> Scripted build </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Build service </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Build as code </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Ephemeral environment </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Isolated </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Parameterless </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Hermetic </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Reproducible </entry>
       <entry> &#x25cb; </entry>
       <entry> &#x274c; </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para> See how SUSE's current software building pipeline with the Open Build Service (OBS) meets
    the above requirements: </para>
   <variablelist>
    <varlistentry>
     <term>Scripted build</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Define all build steps in any kind of build script. Manual interaction is limited to
          invoking the build script itself. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> This is achieved by the SUSE build script also used by the OBS. Even the decision to
          invoke a build is made by OBS based on the submitted code changes or other builds. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Build service</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Some build service runs the build steps. Running builds on developers' workstations
          does not qualify as a build service. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS (runs in a build cluster in the SUSE data center). </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Build as code</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Store the build definition and configuration in text files and keep them under
          version control. They must be executed by the build service. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The recipe files defining the build process are part of the sources of the
          individual packages, for example the RPM spec file, its sources and patches, or image and
          container description files. The build environment configuration (<emphasis>project
           config</emphasis>) is also under source control in OBS. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ephemeral environment</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Build steps are run in an ephemeral environment such as a VM or container. These
          environments must not be recycled from a prior build and must be provisioned solely for
          this build. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS by using an isolated KVM instance for each build. Access to the outside
          is not possible (no network), only the sources and binaries prepared by OBS can be used.
          OBS also decides which pieces of the build artifacts are used. This includes running Linux
          kernel in the VM. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Isolated</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Build steps must be run isolated from each other. No build instance, either prior or
          concurrent, may influence others. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS (builds in KVM). </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Parameterless</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> The build is fully and solely defined through the build script and nothing else.
          Builds cannot be affected by any user input/parameters (except for build entry point and
          top-level source location). </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The build happens completely decoupled from any user interaction. Any parameter must
          be part of any source submission. No input is possible during the build, which is ensured
          by the KVM setup. The only output during the build is the build log. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Hermetic</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> All build steps must be shielded from any kind of external or internal influences.
          All transitive build steps, sources and dependencies are declared up front with immutable
          references and run without network access. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS (builds in a KVM guest without network, and everything required for the
          build is injected before the build instance is brought up). </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Reproducible</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> When a build is rerun with identical input, it must yield identical results
          (bit-for-bit). Builds that cannot meet this requirement must provide a justification why
          they cannot be made reproducible. This requirement is <emphasis>best effort</emphasis>.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The OBS build system tracks all used binaries for each build and can reproduce the
          build environment of any released binary. The binaries used are also referenced in in-toto
          provenance files and made available together with the sources starting from SUSE Linux Enterprise 15 SP4
          builds. Older builds may have missing binaries because of the nature of the bootstrapping process.
          It is notable that the SUSE Linux Enterprise 15 code base is not enforcing binary identical reproducibility
          yet. Instead, builds are compared and known good differences are accepted (for example time
          stamps or build host name). This validation is done by the code in the build-compare
          package. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-provenance">
   <title>Provenance</title>
   <para> A key aspect of supply chain security is the ability to prove that a build has been
    completed / a package built according to all SLSA4-mandated requirements. This
     <emphasis>provenance</emphasis> is established by means of providing metadata that proves
    compliance to SLSA. </para>
   <para> The SLSA requirements for provenance can be grouped into: </para>
   <itemizedlist>
    <listitem>
     <para> process requirements on provenance generation and consumption </para>
    </listitem>
    <listitem>
     <para> requirements on the contents of the provenance </para>
    </listitem>
   </itemizedlist>
   <para> For provenance generation and consumption, SLSA mandates the following requirements: </para>
   <table>
    <title>SLSA4 Build provenance process requirements and SUSE's OBS</title>
    <tgroup cols="3">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <thead>
      <row>
       <entry> Requirement </entry>
       <entry> Required at SLSA4 </entry>
       <entry> Achieved </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry> Available </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Authenticated </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Service-generated </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Non-falsifiable </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Dependencies complete </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>

   <para> Learn how SUSE's OBS meets the SLSA4 provenance process requirements: </para>
   <variablelist>
    <varlistentry>
     <term>Available</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Provide provenance in a format that is accepted by the consumer. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Provided by SUSE. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authenticated</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Consumer can verify the authenticity and integrity of the provenance. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The provenance records are signed by OBS after the build. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Service-generated</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Provenance data must be provided by the build service. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The build service creates the provenance file. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Non-falsifiable</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Build service users cannot falsify provenance. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Signing is done outside of the build in the build service and cannot be influenced
          by the user. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Dependencies complete</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Record all build dependencies that were available at the build time (includes
          initial state of container, VM, build worker or machine). </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The component downloading the build environment generates the dependency part of the
          provenance file. Nothing else is available for the build process. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>

   <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>

   <para> For provenance contents, SLSA mandates the following requirements: </para>
   <table>
    <title>SLSA4 Build provenance content requirements and SUSE's OBS</title>
    <tgroup cols="3">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <thead>
      <row>
       <entry> Requirement </entry>
       <entry> Required at SLSA4 </entry>
       <entry> Achieved </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry> Identifies artifact </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Identifies builder </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Identifies build instructions </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Identifies source code </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Identifies entry point </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Includes all build parameters </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Includes all transitive dependencies </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Includes reproducible info </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Includes metadata </entry>
       <entry> &#x25cb; </entry>
       <entry> &#x2713; </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para> Learn how SUSE's OBS meets the SLSA4 provenance content requirements: </para>
   <variablelist>
    <varlistentry>
     <term>Identifies artifact</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Identify the output artifact by at least one cryptographic hash included in the
          provenance. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> OBS stores SHA2 hashes of all build artifacts in the provenance files. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Identifies builder</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Provide an identifier for the entity that performed the build with the provenance.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The ID of the builder is added by OBS into the provenance files. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Identifies build instructions</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Provide the top-level instructions that were used to execute the build. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The build instructions are the RPM spec file, which is specified in the provenance
          files. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Identifies source code</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Include the repository origin/origins for the source code used in the build in the
          provenance. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Identifies entry point</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Identify the entry point of the build definition used to drive the build (for example the
          source repo the configuration was taken from). </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The provenance files specify the RPM spec file or container description file as
          entry point. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Includes all build parameters</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Include all build parameters that are under a user's control in the provenance.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Includes all transitive dependencies</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Include list of all transitive dependencies in the provenance. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Includes reproducible info</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Include information on whether the build was intended to be reproducible. If so,
          also include all information needed to reproduce the build. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Met by OBS, but builds are currently marked as non-reproducible. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Includes metadata</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Include metadata in the provenance to help with debugging and investigations.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> OBS includes additional metadata into the provenance. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-common">
   <title>Common</title>
   <para> Every system involved in the supply chain must adhere to a set of strict, common security
    standards. </para>
   <table>
    <title>SLSA4 common requirements and SUSE's OBS</title>
    <tgroup cols="3">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <thead>
      <row>
       <entry> Requirement </entry>
       <entry> Required at SLSA4 </entry>
       <entry> Achieved </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry> Security </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Access </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
      <row>
       <entry> Superusers </entry>
       <entry> &#x2713; </entry>
       <entry> &#x2713; </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para> Learn how SUSE's software supply chain is kept secure by securing all systems involved: </para>
   <variablelist>
    <varlistentry>
     <term>Security</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> The source control and build systems must meet certain security standards to ensure
          they cannot be easily compromised. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Red team scans for vulnerabilities, build team patches build environment. Machine
          identity is enforced, user isolation by policy. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Access</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Make sure that physical and/or remote access is rare and tightly regulated. This
          includes logging and multi-party approval. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> Multi-party approval is done when the user is logged in via SSH auth key which is
          salted. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Superusers</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>SLSA L4 requirement</title>
         <para> Restrict the number of admins allowed to override the above-listed criteria to a
          bare minimum. Whenever such interaction is required, a second admin must give their
          approval. </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>SUSE's processes</title>
         <para> The number of superusers in OBS is very small. </para>
        </formalpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-outlook">
  <title>Outlook</title>

  <para> SUSE is up to a great start with its effort to attain SLSA L4 compliance, as SLSA
   requirements partly overlap with those of Common Criteria EAL4+. This means that several SLSA
   criteria were met by SUSE's supply chain processes right from the start. The core part of this is
   our certified and proven build and integration process which uses the Open Build Service
   technology. </para>

  <para> Over the past few months, SUSE has been working on improving and tightening processes and
   technologies to be able to claim full SLSA L4 compliance. </para>

  <para> New to SUSE is providing the information of the build environment
    (<emphasis>provenance</emphasis>) to the outside world. So far, this kind of information has
   been kept internal, but now it will be delivered in the <emphasis>in-toto</emphasis> format,
   allowing external parties to verify the full build environment used for building all SUSE
   deliverables. </para>

  <!-- final words? Anyone?-->
 </sect1>
 <!-- <sect1 xml:id="sec-slsa-references">
  <title>References</title>
  <para></para>
  </sect1>-->
 <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>
 <xi:include href="sbp-legal-notice.xml"/>
 <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>
 <xi:include href="license-gfdl.xml"/>
</article>
