<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>

<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xmlns:its="http://www.w3.org/2005/11/its"
 xml:id="art-sbp-suse-sec-report-22" xml:lang="en">

 <info>
  <title>SUSE Solution Security Risk Report 2022</title>

  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:url>https://github.com/SUSE/suse-best-practices/issues/new</dm:url>
    <dm:product>SUSE Solution Security Risk Report 2022</dm:product>
   </dm:bugtracker>
   <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
  </dm:docmanager>


  <meta name="series" its:translate="no">Best Practices</meta>
  <meta name="category" its:translate="no">
   <phrase>Security</phrase>
  </meta>
  <meta name="task" its:translate="no">
   <phrase>Vulnerability</phrase>
   <phrase>Auditing</phrase>
  </meta>
  <meta name="title" its:translate="yes">SUSE Solution Security Risk Report 2022</meta>
  <meta name="description" its:translate="yes">Summary of all security vulnerabilities which affected SUSE products in
  calendar year 2022</meta>
  <meta name="social-descr" its:translate="yes">Summary of security issues affecting SUSE in 2022</meta>
<!--  <meta name="productname" its:translate="no">
   <productname>All SUSE Products</productname>
  </meta>-->

  <meta name="platform" its:translate="no">All SUSE Products</meta>

  <authorgroup>
   <author>
    <personname>
     <firstname>Stoyan</firstname>
     <surname>Manolov</surname>
    </personname>
    <affiliation>
     <jobtitle>Head of Solution Security</jobtitle>
     <orgname>SUSE</orgname>
    </affiliation>
   </author>
<!--   <editor>
   <orgname></orgname>
   </editor>
   <othercredit>
   <orgname></orgname>
   </othercredit>-->
  </authorgroup>

  <cover role="logos">
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="suse.svg" width="5em" align="center" valign="bottom"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="suse.svg" width="152px" align="center" valign="bottom"/>
    </imageobject>
    <textobject><phrase>SUSE logo</phrase></textobject>
   </mediaobject>
  </cover>

  <revhistory xml:id="rh-art-sbp-suse-sec-report-22">
   <revision>
    <date>2023-04-08</date>
    <revdescription>
     <para> </para>
    </revdescription>
   </revision>
  </revhistory>


  <abstract>

   <para>SUSE Solution Security is committed to delivering best in class software security to its
    customers and to the open source community. The primary objectives are to treat software
    security as an ongoing and continual process.</para>

   <para>The goal of this report is to provide a summary of all security vulnerabilities which
    affected SUSE products in calendar year 2022.</para>

   <para><emphasis role="strong">Disclaimer</emphasis>: This document is part of the SUSE Best
    Practices series. All documents published in this series were contributed voluntarily by SUSE
    employees and by third parties. If not stated otherwise inside the document, the articles are
    intended only to be one example of how a particular action could be taken. Also, SUSE cannot
    verify either that the actions described in the articles do what they claim to do or that they
    do not have unintended consequences. All information found in this document has been compiled
    with utmost attention to detail. However, this does not guarantee complete accuracy. Therefore,
    we need to specifically state that neither SUSE LLC, its affiliates, the authors, nor the
    translators may be held liable for possible errors or the consequences thereof. </para>

  </abstract>

 </info>

 <sect1 xml:id="sec-motivation">
  <title>Motivation</title>

  <para>SUSE Solution Security is committed to delivering best in class software security to its
   customers and to the open source community. The primary objectives are to treat software security
   as an ongoing and continual process that never ends. This implies to:</para>

  <itemizedlist>
   <listitem>
    <para>promptly react to security incidents and deliver premium quality security updates.</para>
   </listitem>
   <listitem>
    <para>continuously improve the security related functionality in SUSE products.</para>
   </listitem>
   <listitem>
    <para>continuously contribute to the rapidly growing maturity of open source software.</para>
   </listitem>
   <listitem>
    <para>respect the open source software security principles of openness, transparency and
     traceability.</para>
   </listitem>
  </itemizedlist>

  <para>The SUSE Security Team addresses all aspects of software security on an ongoing basis. Any
   software can contain errors (both deliberate and accidental) which could affect the system's
   security, including design flaws, programming errors, and backdoors. In addition, software
   security cannot be thought of as a state you can achieve at a specific point in time. Instead, it
   is a process that must be executed with professional expertise and continuous development. This
   persistent focus is what has given open source software, Linux and SUSE an excellent reputation
   for security.</para>

  <para>The objective of this report is to provide a summary of all security vulnerabilities which
   affected SUSE products in calendar year 2022. We will go into details on the high impact
   vulnerabilities which affected our products in 2022 and elaborate on how we responded to these
   incidents. </para>

 </sect1>

 <sect1 xml:id="sec-background">
  <title>Background</title>

  <para>A modern Linux operating system, such as SUSE Linux Enterprise Server for enterprise use or
   the openSUSE community distribution for home use, features a rich set of security programs and
   functions. Those range from access control, intrusion prevention and detection, flexible and
   trustworthy authentication mechanisms, encryption for files and network connections, file
   integrity checking utilities, to network analysis tools and monitoring/logging utilities for your
   system. To complement this, there are advanced tools that help you to securely configure and
   administer your system, and to securely download and install update packages. These utilities are
   standard in SUSE products. The update packages fix security bugs that have been found after your
   product has been released. The security features of your Linux system are waiting for you to
   explore them. SUSE encourages our customers to take advantage of them to further improve the
   level of privacy and security that is built into every system by default. </para>

  <para>Programs are usually written by humans, and humans make mistakes. By consequence, all
   software can contain errors. Some of these errors appear as instabilities (the software or the
   entire system crashes), while others may not have any apparent, visible effect. However, some
   software errors may introduce a security risk. A local or a remote attacker may be able to feed
   specially drafted data to the software which takes advantage of the programming error. In the
   case of a remotely exploitable bug, the data comes from an attached network device, such as a
   cable or DSL modem, or a wireless network interface card. The application then either crashes,
   resulting in a Denial of Service (DoS) attack, or it executes code that originates from the
   attacker, transferring control over the execution context from what the programmer intended to
   what the attacker has in mind for the exploitation of the error. Depending on the software's
   function, the resulting security breach can impose little or high security risks for your data
   and your system, potentially giving an attacker the opportunity to delete, alter or even steal
   your data, or use the system for his own purposes.</para>

  <para>The SUSE Solution Security team is responsible for handling all SUSE product-related
   security incidents. In that team, clear and well-defined roles are assigned for tracking new
   incidents and coordinating needed updates. The team works with all SUSE engineering software
   specialists.</para>

  <para>We use multiple sources to understand security incidents. These sources include the Mitre
   and NVD Common Vulnerabilities and Exposures (CVE) databases, various security mailing lists (OSS
   security, Linux distros, distros, bugtraq, and full-disclosure), direct reports, and other Linux
   vendors databases. We are also part of various pre-notification mailing lists for software
   components, like Xen, Samba, X.ORG. Confidential pre-notifications about vulnerabilities will be
   treated according to established responsible disclosure procedures.</para>

 </sect1>

 <sect1 xml:id="sec-incident-rating-tracking">
  <title>Incident rating and tracking</title>

  <para>We rate the severity of incidents with two different systems, a simplified rating system and
   the Common Vulnerability Scoring System (CVSS) v3.1 scoring system. The CVSS is an open framework
   for communicating the characteristics and severity of software vulnerabilities. It is being
   developed by the US-based non-profit organization FIRST.org: Its main goal is to assign the right
   score to a vulnerability to help security administrators prioritize responses and resources to
   specific threats. CVSS v3.1 scoring consists of three metric groups: Base, Temporal, and
   Environmental. The Base group represents the intrinsic qualities of a vulnerability that are
   constant over time and across user environments. The Temporal group reflects the characteristics
   of a vulnerability that change over time. The Environmental group represents the characteristics
   of a vulnerability that are unique to a user's environment. The Base metrics produce a score
   ranging from 0 to 10, which can then be modified by scoring the Temporal and Environmental
   metrics. A CVSS score is also represented as a vector string, a compressed textual representation
   of the values used to derive the score. Today, SUSE uses the Base score methodology to evaluate
   vulnerabilities throughout the support life cycle of our products. SUSE keeps the right to adjust
   the final score of the vulnerability as more details become known and available throughout the
   analysis. The most current CVSS resources can be found at <link
    xlink:href="https://www.first.org/cvss/"/> . The CVSS v3.1 calculator used by SUSE could be
   found at <link xlink:href="https://www.first.org/cvss/calculator/3.1"/>. The framework is
   measuring the severity of a given vulnerability, not the associated risk alone. The scoring of
   any vulnerability may vary with different analysts hence the final score could be slightly
   different between vendors impacted by that vulnerability. For a more accurate assessment of the
   impact, vendors and application owners must always consider factors outside of CVSS such as
   exposure or threat.</para>

  <para> The security incidents are tracked in our own workflow system. Technical details are
   tracked in the SUSE bug-tracking system, and the updated software package is built, processed,
   and published by our internal <quote>Open Build System</quote>. Internal Service Level Agreements
   (SLAs) corresponding to the severity rating are monitored and reviewed regularly. Our packagers
   backport the required security fixes to our version of the software. To protect the stability of
   our customer setups, we only rarely do minor version upgrades. After receiving fixes for the
   affected software, four eye reviews cross-check the source patches. Several automated checks
   verify source and binary compatibility and the completeness of patch meta information. They also
   check whether patches can be installed without problems. Dedicated QA teams provide integration,
   bugfix, and regression testing for all updates before they are released to our customers. After
   the release of an update, automated processes publish the updates, update notices, and cross
   reference information on our CVE index pages and machine-readable OVAL and CVRF XML
   information.</para>

  <para>The objective of this report is to provide a summary of all security vulnerabilities which
   affected SUSE products in calendar year 2022. We will go into details on the high impact
   vulnerabilities which affected our prour products in 2022 and elaborate on how we responded to
   these incidents. For a better understanding of our classification mechanisms, we have described
   our rating system along with the equivalency of each rating to the CVSS v3.1 scoring
   calculator:</para>


  <table>
   <title>Incident rating and CVSS score</title>
   <tgroup cols="3">
    <colspec colwidth="2.5cm"/>
    <colspec colwidth="3cm"/>
    <thead>
     <row>
      <entry>Rating</entry>
      <entry>CVSS Score</entry>
      <entry>Definition</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Critical</entry>
      <entry>9.0 and above</entry>
      <entry>This rating is given to flaws that could be easily exploited by a remote
       unauthenticated attacker and lead to system compromise (arbitrary code execution) without
       requiring user interaction. These are the types of vulnerabilities that can be exploited by
       worms. Flaws that require an authenticated remote user, a local user, or an unlikely
       configuration are not classed as critical impact.</entry>
     </row>
     <row>
      <entry>Important</entry>
      <entry>7.0 to 8.9</entry>
      <entry>This rating is given to flaws that can easily compromise the confidentiality,
       integrity, or availability of resources. These are the types of vulnerabilities that allow
       local users to gain privileges, allow unauthenticated remote users to view resources that
       should otherwise be protected by authentication, allow authenticated remote users to execute
       arbitrary code, or allow remote unauthenticated users to cause a denial of service without
       user interaction.</entry>
     </row>
     <row>
      <entry>Moderate </entry>
      <entry>4.0 to 6.9</entry>
      <entry>This rating is given to flaws that may be more difficult to exploit but could still
       lead to some compromise of the confidentiality, integrity, or availability of resources,
       under certain circumstances. These are the types of vulnerabilities that could have had a
       critical impact or important impact but are less easily exploited based on a technical
       evaluation of the flaw, or affect unlikely configurations. Local, persistent (service needs
       to be restarted) denial of service conditions for basic system services (kernel, systemd,
       polkit, dbus, etc.) with and without user interaction should also be rated
        <quote>moderate</quote>.</entry>
     </row>
     <row>
      <entry>Low </entry>
      <entry>up to 3.9 </entry>
      <entry>This rating is given to all other issues that have a security impact. These are the
       types of vulnerabilities that are believed to require unlikely circumstances to be able to be
       exploited, or where a successful exploit would give minimal consequences.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 xml:id="sec-prefer-upgrades-over-backports">
  <title>When to prefer version upgrades over backports</title>

  <para> It is a general policy rule that no new upstream versions of a package are introduced into
   our enterprise products. This rule is not an absolute rule however. For certain types of
   packages, in particular antivirus software, security concerns weigh heavier than the conservative
   approach that is preferable from the perspective of quality assurance. For packages in that
   class, occasionally newer versions are introduced to a released version of an enterprise product
   line. </para>

  <para>Sometimes also for other types of packages the choice is made to introduce a new version
   rather than a backport. This is done when producing a backport is not economically feasible or
   when there is a very relevant technical reason to introduce the newer version.</para>

 </sect1>

 <sect1 xml:id="sec-security-vulnerabilities-2022">
  <title>Major security vulnerabilities in 2022</title>

  <sect2 xml:id="sec-pwnkit">
   <title>pwnkit</title>

   <bridgehead>Overview</bridgehead>
   <para>In the beginning of January, Qualys securcal root exploit in "pkexec" component of polkit.
    The pkexec application is a setuid tool designed to allow unprivileged users to run commands as
    privileged users according predefined policies. Local attackers could use the setuid root
    /usr/bin/pkexec binary to reliably escalate privileges to root. The previous version of pkexec
    did not handle the calling parameters count correctly and ends trying to execute environment
    variables as commands. An attacker could leverage this by crafting environment variables in such
    a way it would induce pkexec to execute arbitrary code. When successfully executed the attack
    could cause a local privilege escalation from unprivileged users able to execute pkexec to
    root.</para>

   <para>This vulnerability affected all SUSE Linux Enterprise Server 12 and SUSE Linux Enterprise
    Server 15 service packs. It did not affect SUSE Linux Enterprise Server 11, as it used a
    previous generation called <quote>PolicyKit</quote>.</para>

   <bridgehead>Solution</bridgehead>
   <para> Installing the updated packages provided by SUSE is sufficient to fix the problem.
    Use</para>

   <screen>zypper lp -a --cve=CVE-2021-4034</screen>

   <para> to search for the specific patch information. A restart of the service is not
    required.</para>

   <para>Note that for any SPx (Service Pack level) which is no longer in general support, an LTSS
    or ESPOS subscription may be needed to obtain the update. See the SUSE <quote>CVE Page</quote>
    link in the <quote>References</quote> paragraph below for more details about each SPx. In future
    releases, SUSE has split out <package>pkexec</package> from the default installed
     <package>polkit-1</package> packages, to allow reducing the attack surface if
     <package>pkexec</package> is not required on the system.</para>

   <bridgehead>Workaround</bridgehead>
   <para> It is also possible to remove the setuid bit
    from <filename>/usr/bin/pkexec </filename>with </para>

   <screen>chmod 755 /usr/bin/pkexec</screen>

   <para>or even by deleting <filename>/usr/bin/pkexec</filename> until fixed packages can be
    installed.</para>

   <para>SUSE does not recommend removing the <command>setuid</command> bit as it will cause
    breakage on the system. Removing the <command>setuid</command> permission from
     the<package>pkexec</package> binary will prevent it from working properly for legitimate use
    cases. This means that any application which relies on <package>pkexec</package> execution will
    stop working, possibly causing unexpected system errors and behavior. The workaround prevents
    exploitation and might be the right thing to do given how easy the exploit it, but customers
    must be aware that this will break functionality until the update is installed.</para>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para> SUSE CVE Web page for CVE-2021-4034: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2021-4034.html"/></para>
    </listitem>
    <listitem>
     <para>SUSE Technical Information Document (TID) 000020564: <link
       xlink:href="https://www.suse.com/support/kb/doc/?id=000020564"/></para>
    </listitem>
   </itemizedlist>

  </sect2>


  <sect2 xml:id="sec-samba-vfs-remote">
   <title>Samba vfs_fruit remote code execution</title>

   <bridgehead>Overview</bridgehead>
   <para> Researcher Orange Tsai from DEVCORE reported a remote buffer overflow in the
     <quote>fruit</quote> vfs module of Samba, tracked under CVE-2021-44142. The fruit module, which
    is used by Samba for Apple-related extended attribute storage, can be exploited by remote
    attackers with access to the Samba server to execute code as the Samba server (basically as
    root). The Samba <package>vfs_fruit</package> module uses extended file attributes (EA, xattr)
    to provide <quote>[...] enhanced compatibility with Apple SMB clients and interoperability with
     a Netatalk 3 AFP file server.</quote> Samba versions prior to 4.13.17, 4.14.12 and 4.15.5 with
     <package>vfs_fruit</package> configured allow out-of-bounds heap read and write via specially
    crafted extended file attributes. A remote attacker with write access to extended file
    attributes can execute arbitrary code with the privileges of smbd, typically root.</para>

   <bridgehead>Solution</bridgehead>
   <para>The <quote>fruit</quote> vfs module is not configured by default. To determine if it is
    used, check for a line starting with <command>"vfs objects="</command> with <quote>fruit</quote>
    listed in <filename>/etc/samba/smb.conf</filename>.</para>

   <para>Packages containing a fix for this security issue were made available quickly. They should
    be installed using</para>

   <screen>zypper patch --cve=CVE-2021-44142</screen>

   <para>for applying the fixed packages. </para>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE TID 000020564: <link xlink:href="https://www.suse.com/support/kb/doc/?id=000020564"
      /></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2021-4034 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2021-4034.html"/></para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="sec-remote-stack-overflow-networking">
   <title>Remote Stack Overflow in the <package>tipc</package> networking module of the Linux
    kernel</title>

   <bridgehead>Overview</bridgehead>
   <para> The Transparent Inter Process Communication (TIPC) is an IPC mechanism designed for
    intra-cluster communication. It represents the cluster topology using the concept of nodes and
    the links between these nodes. A stack overflow flaw was found in the Linux kernel's TIPC
    protocol functionality in the way a user sends a packet with malicious content where the number
    of domain member nodes is higher than the 64 allowed. This flaw allows a remote user to crash
    the system or possibly escalate their privileges if they have access to the TIPC network.</para>

   <para>As part of the monitoring framework the "Overlapping Ring Supervision Algorithm" was
    introduced to monitor neighbouring nodes in the cluster. This also introduced a security bug
    that could be exploited to execute a remote Denial of Service (DoS) attack on systems using TIPC
    and FORTIFY_SOURCE enabled.</para>

   <bridgehead>Solution</bridgehead>
   <para>Installing the updated packages provided by SUSE is sufficient to fix the problem. Use the
    following command to search for the specific patch:</para>

   <screen>zypper lp -a --cve=CVE-2022-0435</screen>
   <para>or</para>
   <screen>zypper patch --cve=CVE-2022-0435</screen>

   <para>to apply the fixes.</para>
   <para>After a kernel update a restart is required. Unless you are using the SUSE Linux Enterprise
    Live Patching extension, for which SUSE provides the live patch to fix this vulnerability
    allowing you to patch the kernel without shutting down your system and reducing the need for
    planned downtime and increasing service availability.</para>


   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE TID 000020580: <link xlink:href="https://www.suse.com/support/kb/doc/?id=000020580"
      /></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-0435 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-0435.html"/></para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="sec-dirty-pipe">
   <title>Dirty Pipe</title>

   <bridgehead>Overview</bridgehead>
   <para> On Monday, March 7th, security researcher Max Kellermann published a new software
    vulnerability that affect users of the Linux kernel. The vulnerability, called Dirty Pipe
    (CVE-2022-0847), impacts Linux kernels 5.8 and later, and allows local attackers to overwrite
    files even if they had only read permissions, allowing for easy privilege escalation. The issue
    is triggered by a combination of two bugs, one bug in Linux kernels 4.9 and newer and made
    exploitable by the second bug introduced in Linux kernel 5.8. Our currently maintained SUSE
    Linux Enterprise products are not affected as they ship older Linux kernels than 5.8. The
    upcoming SUSE Linux Enterprise 15 SP4 with Linux kernel 5.14 will be already fixed before
    shipment.</para>

   <bridgehead>Solution</bridgehead>
   <para>We have released fixes for the first bug for SUSE Linux Enterprise 12 SP4 and newer and
    SUSE Linux Enterprise 15 and newer, even though they are not directly affected. To install the
    respective patch, use </para>

   <screen>zypper patch --cve=CVE-2022-0847</screen>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE TID 000020603: <link xlink:href="https://www.suse.com/support/kb/doc/?id=000020603"
      /></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-0847 Web page: <link
       xlink:href="https://suse.com/security/cve/CVE-2022-0847.html"/></para>
    </listitem>
    <listitem>
     <para>SUSE blog article: <link
       xlink:href="https://www.suse.com/c/suse-statement-on-dirty-pipe-attack/"/></para>
    </listitem>
    <listitem>
     <para>Wep page of dirty pipe: <link xlink:href="https://dirtypipe.cm4all.com/"/></para>
    </listitem>
   </itemizedlist>

  </sect2>


  <sect2 xml:id="sec-boothole-3">
   <title>Boothole 3</title>

   <bridgehead>Overview</bridgehead>
   <para> GRUB developers and security researchers have identified more security relevant bugs in
    the GRUB2 and <package>shim</package> boot loaders, which could be used by local attackers to
    circumvent the secure boot chain. This vulnerability has similar effects and considerations as
    the original Boothole and Boothole2 issues. For regular users with their machine under full
    control this is less of an issue as in scenarios relying on secure boot, like public
    systems.</para>

   <bridgehead>Solution</bridgehead>
   <para>Boothole 3 consists of the following security vulnerabilities:</para>

   <itemizedlist>
    <listitem>
     <para>CVE-2021-3695: A crafted PNG grayscale image may have led to out-of-bounds write in
      heap.</para>
    </listitem>
    <listitem>
     <para>CVE-2021-3696: A crafted PNG image may have led to out-of-bound write during huffman
      table handling.</para>
    </listitem>
    <listitem>
     <para>CVE-2021-3697: A crafted JPEG image could have led to buffer underflow write in the
      heap.</para>
    </listitem>
   </itemizedlist>

   <para>These security issues require attackers to supply crafted images to GRUB2, which is
    unlikely in common local scenarios, but can allow bypassing the secure boot chain.</para>

   <itemizedlist>
    <listitem>
     <para>CVE-2022-28733: Fixed net/ip to do ip fragment maths safely. If GRUB2 is loading
      artefacts from the network, a Man-In-The-Middle attack could be used to execute code. This is
      an uncommon scenario. </para>
    </listitem>
    <listitem>
     <para>CVE-2022-28737: Fixed a buffer overflow in <package>shim</package>. </para>
    </listitem>
    <listitem>
     <para>CVE-2022-28734: Fixed net/http OOB write for split HTTP headers. </para>
    </listitem>
    <listitem>
     <para>CVE-2022-28735: GRUB2 verifier framework changes to avoid potential bypasses. </para>
    </listitem>
    <listitem>
     <para>CVE-2022-28736: Fixed a use-after-free in chainloader command. </para>
    </listitem>
   </itemizedlist>

   <para>SUSE is switching to a new secure boot signing key for secure boot signed artefacts. We
    have released GRUB2 updates, with incremented SBAT revision on AMD64/Intel 64 and signed with
    the new secure boot key to allow disabling it on IBM Z and IBM Power. SUSE also released Linux
    kernel updates signed with the new signing key in June 2022 and following days on our regular
     <quote>second Tuesday of the month</quote> kernel release time. In 2022 we released a new
     <package>shim</package> version that disallows use of the previous secure boot keys and fixes a
     <package>shim</package> security issue, with incremented SBAT version after all the previous
    updates.</para>

   <bridgehead>References</bridgehead>
   <itemizedlist>
    <listitem>
     <para>SUSE TID 000020668: <link xlink:href="https://www.suse.com/support/kb/doc/?id=000020668"
      /></para>
    </listitem>
   </itemizedlist>

   <para><package>grub2</package> security issues</para>

   <itemizedlist>
    <listitem>
     <para>SUSE CVE-2022-28736 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28736"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-28735 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28735"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-28734 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28734"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-28733 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28733"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2021-3697 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2021-3697"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2021-3696 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2021-3696"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2021-3695 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2021-3695"/></para>
    </listitem>
   </itemizedlist>

   <para>
    <package>shim</package> security issue</para>
   <itemizedlist>
    <listitem>
     <para>SUSE CVE-2022-28737 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28737"/></para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="sec-dosa-mmio-register">
   <title>Side-channel information leaks / denial of service attack against MMIO registers</title>

   <bridgehead>Overview</bridgehead>
   <para> Security researchers and Intel engineers have identified several transient execution
    side-channel information leak attacks and one denial of service attack when accessing MMIO
    registers.</para>

   <para> Multiple flavors of these issues have been identified:</para>

   <itemizedlist>
    <listitem>
     <para>CVE-2022-21166: Device Register Partial Write (DRPW) Some endpoint MMIO registers
      incorrectly handle writes that are smaller than the register size. Instead of aborting the
      write or only copying the correct subset of bytes (for example, 2 bytes for a 2-byte write),
      more bytes than specified by the write transaction may be written to the register. On some
      processors, this may expose stale data from the fill buffers of the core that created the
      write transaction. This issue is mitigated using CPU Microcode and Operating System (kernel)
      code changes.</para>
    </listitem>
    <listitem>
     <para>CVE-2022-21127: Update to Special Register Buffer Data Sampling The RDSAND, RDSEED, SGX
      EGET KEY instructions use the low bandwidth MMIO interface, and their content could be sampled
      using side-channel information leak methods. This issue is being mitigated with CPU Microcode
      updates.</para>
    </listitem>
    <listitem>
     <para>CVE-2022-21125: Shared Buffers Data Sampling (SBDS) After propagators may have moved data
      around the uncore and copied stale data into client core fill buffers, processors affected by
      MFBDS can leak data from the fill buffers. This issue is mitigated using CPU Microcode and
      Operating System (kernel) code changes.</para>
    </listitem>
    <listitem>
     <para>CVE-2022-21123: Shared Buffers Data Read (SBDR) It is similar to Shared Buffer Data
      Sampling (SBDS) except that the data is directly read into the architectural software-visible
      state. This issue is mitigated using CPU Microcode and Operating System (kernel) code
      changes.</para>
    </listitem>
    <listitem>
     <para>CVE-2022-21180: Undefined MMIO Hang While not directly related to side channel
      information leaks, overly long MMIO reads to short MMIO registers could lead to machine hangs,
      causing a denial of service. This will be fixed by filtering out too long MMIO reads in kernel
      / hypervisor software.</para>
    </listitem>

   </itemizedlist>

   <bridgehead>Solution</bridgehead>
   <para>An updated Intel CPU Microcode was published in the Intel IPU 2022.1 release, released by
    SUSE in <package>ucode-intel</package> version 20220510 packages. SUSE released kernel updates
    to mitigate the leaks. A new kernel boot command line option has been introduced, called
     <command>mmio_stale_data</command>.</para>

   <para>Configuration:</para>
   <screen>- mmio_stale_data=off</screen>
   <para> Mitigation is disabled.</para>
   <screen>- mmio_stale_data=full</screen>
   <para>Mitigation is enabled, but SMT is still enabled so information might leak on the same CPU
    core.</para>
   <screen>- mmio_stale_data=full,nosmt</screen>
   <para>Mitigation is enabled, and SMT is disabled so the mitigation is complete. Note that this is
    option is also covered by using the generic <quote>mitigations</quote> option.</para>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE Technical Information Document (TID) 000020669:<link
       xlink:href="https://www.suse.com/support/kb/doc/?id=000020669"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-21166 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-21166"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-21127 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-21127"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-21123 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-21123"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-21125 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-21125"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-21180 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-21180"/></para>
    </listitem>
    <listitem>
     <para>Article: <link
       xlink:href="https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/advisory-guidance/undefined-mmio-hang.html"
      /></para>
    </listitem>
    <listitem>
     <para>Article: <link
       xlink:href="https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/processor-mmio-stale-data-vulnerabilities.html"
      /></para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="sec-retbleed">
   <title>RETBLEED transient execution information leak side-channel attack</title>

   <bridgehead>Overview</bridgehead>
   <para> Security researchers Johannes Wikner and Kaveh Razavi from ETH Zuerich have identified a
    new transient execution information leak caused by <quote>return</quote> CPU instructions on
    Intel and AMD x86 systems. In certain scenarios the return instructions turn to use the indirect
    branch predictor, which can be influenced by Branch Target Injection attacks aka Spectre-BTI.
    This allows local attackers to execute code to leak sensitive data out of the kernel, same as
    other Spectre like vulnerabilities.</para>

   <para>Affected CPUs:</para>

   <itemizedlist>
    <listitem>
     <para>Intel Skylake and newer Intel x86 CPU generations</para>
    </listitem>
    <listitem>
     <para>AMD Bulldozer (family 0x15) up to Zen 3</para>
    </listitem>
    <listitem>
     <para>Arm CPUs that are also vulnerable to Spectre variant 2</para>
    </listitem>
   </itemizedlist>

   <bridgehead>Solution</bridgehead>
   <para>Various mitigation methods have been implemented and can be selected manually or are
    selected automatically. IBPB (Indirect Branch Prediction Barrier) can be used to flush the
    indirect branch predictor. This has performance impact, but is the safest option. On Intel
    Skylake the IBRS feature is used (Indirect Branch Restricted Speculation), which clears the
    branch history buffer from lower privileged entries. Go to the <quote>References</quote>
    paragraph for instructions on each mitigation type.</para>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE Technical Information Document (TID) 000020693:<link
       xlink:href="https://www.suse.com/support/kb/doc/?id=000020693"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-29900 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-29900"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-29901 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-29901"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-28693 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-28693"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-23825 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-23825"/></para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="sec-openssl3-cert">
   <title><package>openssl 3</package> certificate parsing buffer overflow</title>

   <bridgehead>Overview</bridgehead>
   <para> Security researcher <quote>Polar Bear</quote> has reported a buffer overflow in
     <package>openssl</package> when parsing X.509 certificates. This problem could be used by
    remote attackers to cause overflows in <package>openssl</package>-based servers parsing, for
    example client certificates, or client overflows when parsing server certificates.</para>

   <para>This problem only affects <package>openssl</package> 3.x and newer, older
     <package>openssl</package> versions are not affected. <package>openssl</package> 3 is only
    shipped as a secondary library starting with SUSE Linux Enterprise 15 SP4. No package currently
    uses <package>openssl</package> 3.</para>

   <bridgehead>Solution</bridgehead>
   <para>Patches are available for download and install for SUSE Linux Enterprise 15 SP4.</para>

   <bridgehead>References</bridgehead>

   <itemizedlist>
    <listitem>
     <para>SUSE CVE-2022-3602 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-3602.html"/></para>
    </listitem>
    <listitem>
     <para>SUSE CVE-2022-3786 Web page: <link
       xlink:href="https://www.suse.com/security/cve/CVE-2022-3786.html"/></para>
    </listitem>
   </itemizedlist>

  </sect2>

 </sect1>

 <sect1 xml:id="sec-vulnerability-management-2022">
  <title>Vulnerability Management in 2022</title>

  <para>The SUSE Solution Security team constantly monitors all the software components used in our
   products for security issues. More and improved tools are now available for finding out zero-day
   vulnerabilities and scanning for existing vulnerabilities. Such instruments can validate and
   report back if the application code written is following the standard security best practices or
   there are major gaps in potential attack vectors such as buffer overflow, denial of service or
   unwanted elevated access. It is clear that developers are becoming more and more security-aware
   and the quality of the code being developed has greatly improved in both quantity and quality.
   While we notice an increasing number of important vulnerabilities, the number of critical
   vulnerabilities is going down year over year. </para>


  <table>
   <title>Vulnerabilities with a unique CVE identified, impacting SUSE products in 2022</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Low</entry>
      <entry>Moderate</entry>
      <entry>Important</entry>
      <entry>Critical</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>100</entry>
      <entry>637</entry>
      <entry>436</entry>
      <entry>15</entry>
     </row>
    </tbody>
   </tgroup>
  </table>


  <table>
   <title>Security updates and patches released to fix these vulnerabilities in 2022</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Low</entry>
      <entry>Moderate</entry>
      <entry>Important</entry>
      <entry>Critical</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>58</entry>
      <entry>584</entry>
      <entry>2364</entry>
      <entry>101</entry>
     </row>
    </tbody>
   </tgroup>
  </table>


  <figure>
   <title>Security updates and patches released per month in 2022</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="suse-security-report-2022-statistics.png" width="90%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="suse-security-report-2022-statistics.png" width="80%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

 </sect1>

 <sect1 xml:id="sec-secure-sw-supply-chain">
  <title>Secure Software Supply Chain </title>

  <para>Securing our software supply chain is a top priority for SUSE to protect our customers
   security risks, known and zero-day vulnerabilities. Ensuring that no threat actor can inject
   malicious code into our build service systems is certified by industry leading security
   certifications. Our teams continually work to certify all SUSE products, and develop security
   solutions to offer our customers the highest level of trust and reliability.</para>

  <para> A new industry standardization effort named Supply chain Levels for Software Artifacts
   (SLSA ), started by Google and driven by several industry stakeholders, aims to protect the
   integrity of the software supply chain. SLSA defines four levels of assurance, going from basic
   requirements at level 1 to strict rules and documentation requirements at level 4. While the SLSA
   standard is still in development, SUSE already considers it as a great representation of needs
   for a secure product build environment. Thus we are adjusting our processes and tooling to meet
   the requirements of the highest assurance level 4. The main controls which are covering the
   highest assurance level 4 for our SUSE Linux Enterprise product offering include: </para>


  <bridgehead>SOURCE CODE MANAGEMENT</bridgehead>
  <para> Keeping source code integrity is the key aspect of supply chain integrity. Source code
   integrity needs to be defended against all threats originating from insider or outsider attacks. </para>

  <itemizedlist>
   <listitem>
    <para><emphasis role="strong">Source threats:</emphasis> Typical source code threats include bad
     code that introduces vulnerabilities or a compromised source control system. To address bad
     code injection, SLSA mandates two-person reviews. To prevent source code from getting
     compromised, SLSA mandates strong measures to secure the source control systems. </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Build threats </emphasis> Build threats include code commits to
     the build that were not tracked by the source control system, a compromised build platform,
     bypassing the CI/CD system, a compromised package repository, and injecting bad packages. Most
     build threats are mitigated by maintaining a controlled build environment, where each build is
     also fully encapsulated on its own, not influenceable from outside, or even reproducible. To
     prove this to the outside, detailed provenance data can be generated, which allows for the
     external inspection of the builds. Strong security controls ensure that the build platform is
     not easily compromised. </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Dependency threats</emphasis> Dependency threats come into play
     where risky dependencies are used. SLSA addresses this kind of threat by mandating provenance
     for all artifacts (files, Git commits, directories of files, container images, ...). That way
     one would have an indication that this dependency was not built from the proper builder or out
     of the designated GitHub repository. </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="strong"> Version-controlled source </emphasis> Our Open Build Service complies
     with this requirement as it assigns numeric identifiers to commits. The commit stores
     information about the author, the commit time, a comment describing the commit, and other
     information. The commit also contains an identification of the source content, like the tree
     object in git. </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Verified revision history:</emphasis> Each commit stores
     information about the author and commit time. It also contains a comment describing the commit
     and other information. Identities of all actors are verifiable and use two-factor
     authentication. </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Revision and change history are retained indefinitely:</emphasis>
     We retain all sources, but also any shipped binary indefinitely. A retraction of a shipped
     update from the customer's channels does not lead to its removal from the build system.
     Furthermore, all source references and binary shipments including bug tracker references (CVE,
     bugzilla) are tracked by the build system for each shipment channel. </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Two-person reviewed:</emphasis> The workflows for creating a new
     product and delivering maintenance updates involve multiple parties, like the core code review
     team and the maintenance or product release managers as a minimum. Furthermore, there are
     reviews by subject matter experts and additional checks for quality assurance and legal
     aspects. These reviews are enforced by the OBS, and a single decline rejects the entire release
     process. </para>
   </listitem>
  </itemizedlist>


  <bridgehead>BUILDING AND BUILD SYSTEM </bridgehead>

  <para> The next part of the integrity chain is the actual build process that turns sources to
   binaries. The entire build process must be secured against any kind of unknown or outside
   influence to avoid possible tampering with the builds. Builds must be reproducible to allow
   verification and checking of build results. </para>

  <itemizedlist>
   <listitem>
    <para><emphasis role="strong">Scripted build:</emphasis> This is achieved by the SUSE build
     script also used by the Open Build Service (OBS). Even the decision to invoke a build is made
     by OBS based on the submitted code changes or other builds.</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Build service:</emphasis> We are running our build service in a
     dedicated build cluster within the SUSE data center</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Build as code:</emphasis> The recipe files defining the build
     process are part of the sources of the individual packages, for example the RPM spec file, its
     sources and patches, or image and container description files. The build environment
     configuration (project config) is also under source control in OBS.</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Isolated and Ephemeral environment</emphasis> We are using an
     isolated KVM instance for each build. Access to the outside is not possible (no network), only
     the sources and binaries prepared by OBS can be used. OBS also decides which pieces of the
     build artifacts are used. This includes running Linux kernel in the VM.</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Parameterless:</emphasis> The build happens completely decoupled
     from any user interaction. Any parameter must be part of any source submission. No input is
     possible during the build, which is ensured by the KVM setup. The only output during the build
     is the build log.</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Hermetic:</emphasis> Our software builds in a KVM guest without
     network, and everything required for the build is injected before the build instance is brought
     up.</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Reproducible:</emphasis> Our OBS system tracks all used binaries
     for each build and can reproduce the build environment of any released binary. The binaries
     used are also referenced in in-toto provenance files and made available together with the
     sources starting from SUSE Linux Enterprise 15 SP4 builds. Older builds may have missing
     binaries because of the nature of the bootstrapping process. It is notable that the SUSE Linux
     Enterprise 15 code base is not enforcing binary identical reproducibility yet. Instead, builds
     are compared and known good differences are accepted (for example time stamps or build host
     name). This validation is done by the code in the build-compare package.</para>
   </listitem>
  </itemizedlist>

  <bridgehead>PROVENANCE</bridgehead>
  <para>A key aspect of supply chain security is the ability to prove that a build has been
   completed / a package built according to all SLSA4-mandated requirements. This provenance is
   established by means of providing metadata that proves compliance to SLSA. The SLSA requirements
   for provenance include process requirements on provenance generation and consumption, and
   requirements on the contents of the provenance.</para>

  <itemizedlist>
   <listitem>
    <para><emphasis role="strong">Source threats </emphasis> Available</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Source threats </emphasis> Authenticated</para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="strong">Source threats </emphasis> Service-generated </para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Source threats </emphasis> Non-falsifiable</para>
   </listitem>
   <listitem>
    <para><emphasis role="strong">Source threats </emphasis> Dependencies complete </para>
   </listitem>
  </itemizedlist>

  <para> SUSE is up to a great start with its effort to attain SLSA L4 compliance, as SLSA
   requirements partly overlap with the requirements of Common Criteria EAL4+. This means that
   several SLSA criteria were met by SUSE's supply chain processes right from the start. The core
   part of this is our certified and proven build and integration process which uses the Open Build
   Service technology. Over the past few months, SUSE has been working on improving and tightening
   processes and technologies to be able to claim full SLSA L4 compliance. </para>

  <para>For more information on our compliance with the Google SLSA Level 4 requirements, visit:
    <link xlink:href="https://documentation.suse.com/sbp/security/html/SBP-SLSA4/"/>
  </para>

 </sect1>

 <sect1 xml:id="sec-sigstore">
  <title>Adopting Sigstore for our Supply Chain Security </title>

  <para> Sigstore is a recent initiative to enhance signing and cryptographic verification of open
   source deliveries. SUSE has adopted additional "cosign" style signing for its published container
   images including Base Container Images (BCI) containers. SUSE also started uploading
   cryptographic signatures to the global "rekor" transparency log for its containers and product
   repositories in February 2022. SUSE Linux Enterprise Base Container Images (SLE BCI) offer a
   platform for creating SUSE Linux Enterprise Server-based custom container images and
   containerized applications that can be distributed freely. SLE BCIs feature the same predictable
   enterprise lifecycle as SUSE Linux Enterprise Server. The SLE_BCI 15 SP3 and SP4 repository
   (which is a subset of the SUSE Linux Enterprise repository) gives SLE BCIs access to 4000
   packages available for the AMD64/Intel 64, AArch64, PowerPC, and IBM Z architectures. The
   packages in the repository have undergone quality assurance and security audits by SUSE. The
   container images are FIPS-compliant when running on a host in FIPS mode. In addition to that,
   SUSE can provide official support for SLE BCIs through SUSE subscription plans. </para>

  <bridgehead>Security</bridgehead>
  <para>Each package in the <emphasis role="italic">SLE_BCI</emphasis> repository undergoes security
   audits, and SLE BCIs benefit from the same mechanism of dealing with CVEs as SUSE Linux
   Enterprise Server. All discovered and fixed vulnerabilities are announced via e-mail, the
   dedicated CVE pages, and as OVAL and CVRF data. To ensure a secure supply chain, all container
   images are signed with Notary v1, Podman’s GPG signatures, and Sigstore Cosign. We have also
   implemented support for cosign signatures on a rekor server, so you can also check BCI container
   images against rekor, the immutable tamper resistant ledger. All cosign signatures of containers
   and generated update repositories (GPG) are uploaded to the Linux Foundation’s rekor transparency
   log. </para>

  <bridgehead>Stability</bridgehead>
  <para>Since SLE BCIs are based on SUSE Linux Enterprise Server, they feature the same level of
   stability and quality assurance. Similar to SUSE Linux Enterprise Server, SLE BCIs receive
   maintenance updates that provide bug fixes, improvements, and security patches. Tooling and
   integration SLE BCIs are designed to provide drop-in replacements for popular container images
   available on hub.docker.com. You can use the general-purpose SLE BCIs and the tools they put at
   your disposal to create custom container images, while the language stack SLE BCIs provide a
   foundation and the required tooling for building containerized applications.</para>

  <bridgehead>Redistribution</bridgehead>
  <para>SUSE Linux Enterprise Base Container Images are covered by a permissive EULA that allows you
   to redistribute custom container images based on such a SLE BCI. </para>

 </sect1>

 <sect1 xml:id="sec-securing-product-portfolio">
  <title>Securing Our Product Portfolio</title>

  <para>
   <emphasis role="bold"> January 25th 2022</emphasis>
  </para>
  <para>The Defense Information Systems Agency (DISA) has released the Security Content Automation
   Protocol (SCAP) for the SUSE Linux Enterprise Server 15 Security Technical Implementation Guide
   (STIG). The SCAP information is available at <link
    xlink:href="https://static.open-scap.org/ssg-guides/ssg-sle15-guide-cis_workstation_l1.html"
   />. DISA also released the automated benchmark for the SUSE Linux Enterprise Server 15 Security
   Technical Implementation Guide (STIG). The benchmark is also available on the Cyber Exchange
   public site at <link xlink:href="https://public.cyber.mil/stigs/downloads"/>. </para>

  <para>
   <emphasis role="bold"> April 19th 2022</emphasis>
  </para>
  <para>DISA released the SUSE Rancher Manager Security Technical Implementation Guide (STIG). The
   STIG is also available on the Cyber Exchange public site at
   https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_RGS_MCM_V1R1_STIG.zip </para>

  <para>
   <emphasis role="bold">June 13th 2022 </emphasis>
  </para>
  <para>SUSE has translated its SUSE Security Situation Advisory Guide (SUSE S2 UAG) v. 1.1 into
   English. This guide provides an overview of possible immediate actions and approaches that can be
   taken with SUSE customer products. It can be accessed via <link
    xlink:href="https://links.imagerelay.com/cdn/3404/ql/0fb22d6c1aa740bf829f863d5841981a/SUSE_Security_Situation_Advisory_Guide__SUSE_S2UAG.pdf"
   /></para>

  <para>
   <emphasis role="bold">June 29th 2022</emphasis>
  </para>
  <para>SUSE became a collaborator with the National Institute of Standards and Technology (NIST) on
   the Automation of the Cryptographic Module Validation Program (ACMVP). "The National
   Cybersecurity Center of Excellence (NCCoE), a part of NIST, is a collaborative hub where industry
   organizations, government agencies, and academic institutions work together to address
   businesses’ most pressing cybersecurity challenges. Through this collaboration, the NCCoE
   develops modular, easily adaptable example cybersecurity solutions using standards, best
   practices, and commercially available technology." SUSE looks forward to our joint activities
   with NIST and the other vendors in the program. You can read more at the NIST ACMVP Web site. </para>

  <para>
   <emphasis role="bold">August 1st 2022</emphasis>
  </para>
  <para>SUSE was awarded the Certificate of Software Quality Level 1 (Certificate #22-0353), also
   known as the Good Software (GS) Certification, by the Telecommunications Technology Association
   (TTA) of the Republic of Korea, for its SUSE Linux Enterprise Server 15.  "The GS (Good Software)
   Certification certifies good quality software based on international standards, ISO/IEC 25023,
   25051 and 25041 to improve the quality of software products and promote the spread of high
   quality products." For more information, visit <link
    xlink:href="https://www.suse.com/support/security/certifications/" />
  </para>

  <para>
   <emphasis role="bold">October 31st 2022 </emphasis>
  </para>
  <para>The Defense Information Systems Agency (DISA) released SUSE Rancher Kubernetes Engine 2
   Security Technical Implementation Guide (STIG). This content is published as a resource to assist
   in the application of security guidance to systems. The STIG may be accessed at <link
    xlink:href="https://ranchergovernment.com/security-certifications"/>
  </para>

  <para>
   <emphasis role="bold">December 6th 2022 </emphasis>
  </para>
  <para>SUSE successfully implemented ISO 27001 and ISO 27701 in full scope and with all of the
   clauses and achieved certification of our Information Security Management System (ISMS) and the
   Privacy Information Management System (PIMS) to the respective standards, attesting to our
   commitment of secure innovation, with focus on privacy, rights and freedoms of individuals. In
   doing so, SUSE has obtained two certifications from NQA, the leading independent provider of
   environmental simulation testing, inspection and certification services. They span everything
   within SUSE and our entities, including all countries we operate in, subsidiaries and all
   processes. </para>

  <para>The ISMS &amp; PIMS of SUSE (as PII Controller and Processor) applies to all client
   facing services, internal services, processed information including personal data related to
   employees, clients, openSUSE Community and other interested parties, related IT and non-IT
   supporting infrastructure as detailed in the latest Statement of Applicability version 1.0. </para>

  <para>For additional information, you can download the certifications accessing the below links:
   ISO 27001: <link xlink:href="https://www.suse.com/assets/GB235856-HO-ISMS.pdf"/> ISO 27701: <link
    xlink:href="https://www.suse.com/assets/GB235856-HO-PIMS.pdf"/>
  </para>

 </sect1>

 <sect1 xml:id="sec-about-suse">
  <title>About SUSE</title>

  <para>SUSE is a global leader in innovative, reliable and enterprise-grade open source solutions,
   relied upon by more than 60% of the Fortune 500 to power their mission-critical workloads. We
   specialize in Enterprise Linux, Kubernetes Management, and Edge solutions, and collaborate with
   partners and communities to empower our customers to innovate everywhere – from the data center,
   to the cloud, to the edge and beyond. SUSE puts the <quote>open</quote> back in open source,
   giving customers the agility to tackle innovation challenges today and the freedom to evolve
   their strategy and solutions tomorrow. The company employs nearly 2000 people globally and is
   listed in the regulated market (Prime Standard) of the Frankfurt Stock Exchange. For more
   information, visit <link xlink:href="https://www.suse.com"/>.</para>

 </sect1>

 <sect1 xml:id="sec-statements">
  <title>Forward-looking statements</title>

  <para>Any statements in this document about future expectations, plans and prospects for the
   company, including statements containing the words <quote>aims</quote>, <quote>targets</quote>,
    <quote>will</quote>, <quote>believes</quote>, <quote>anticipates</quote>,
    <quote>plans</quote><quote>, expects</quote>, and similar expressions, may constitute
   forward-looking statements and should be read with caution.</para>

  <para>Actual results may differ materially from those indicated by such forward-looking statements
   as a result of various important factors, including competitive landscape, development of
   customer deals, reliance upon customer relationships, management of growth and acquisitions, the
   possibility of undetected software issues, the risks of impacts of the COVID-19 pandemic and
   economic downturns, pricing pressures and the viability of the Internet. In addition, any
   forward-looking statements included herein represent views as of the date of this document and
   these views could change. The Company does not have any obligation to update its forward-looking
   statements. These forward-looking statements are subject to change and should not be relied upon
   as representing the Company’s views as of any date other than the publication date of this
   document.</para>

 </sect1>

 <?pdfpagebreak style="sbp" formatter="fop"?>
 <xi:include href="sbp-legal-notice.xml"/>


 <?pdfpagebreak style="sbp" formatter="fop"?>
 <xi:include href="license-gfdl.xml"/>


</article>
